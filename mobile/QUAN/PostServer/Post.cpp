// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.4.3.
// Generated from `Post.jce'
// **********************************************************************

#include "Post.h"
#include "jce/wup.h"
#include "servant/BaseF.h"

using namespace wup;

namespace QUAN
{

    taf::Int32 PostProxy::auditSecret(const vector<taf::Int64> &vSId, taf::Int32 iLevel, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(vSId, 1);
        _os.write(iLevel, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"auditSecret", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        return _ret;
    }

    void Post::async_response_auditSecret(taf::JceCurrentPtr current, taf::Int32 _ret)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void PostProxy::async_auditSecret(PostPrxCallbackPtr callback,const vector<taf::Int64> &vSId,taf::Int32 iLevel,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(vSId, 1);
        _os.write(iLevel, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"auditSecret", _os.getByteBuffer(), context, _mStatus, callback);
    }

    taf::Int32 PostProxy::cleanTrail(const QUAN::CleanTrailReq &tReq, QUAN::CleanTrailRsp &tRsp, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        _os.write(tRsp, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"cleanTrail", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(tRsp, 2, true);
        return _ret;
    }

    void Post::async_response_cleanTrail(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::CleanTrailRsp &tRsp)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("tRsp", tRsp);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(tRsp, 2);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void PostProxy::async_cleanTrail(PostPrxCallbackPtr callback,const QUAN::CleanTrailReq &tReq,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"cleanTrail", _os.getByteBuffer(), context, _mStatus, callback);
    }

    taf::Int32 PostProxy::clearCommentCache(taf::Int64 lSId, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(lSId, 1);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"clearCommentCache", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        return _ret;
    }

    void Post::async_response_clearCommentCache(taf::JceCurrentPtr current, taf::Int32 _ret)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void PostProxy::async_clearCommentCache(PostPrxCallbackPtr callback,taf::Int64 lSId,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(lSId, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"clearCommentCache", _os.getByteBuffer(), context, _mStatus, callback);
    }

    taf::Int32 PostProxy::clearPostCache(taf::Int64 lSId, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(lSId, 1);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"clearPostCache", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        return _ret;
    }

    void Post::async_response_clearPostCache(taf::JceCurrentPtr current, taf::Int32 _ret)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void PostProxy::async_clearPostCache(PostPrxCallbackPtr callback,taf::Int64 lSId,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(lSId, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"clearPostCache", _os.getByteBuffer(), context, _mStatus, callback);
    }

    taf::Int32 PostProxy::clearUserCleanTrailCache(taf::Int64 lUId, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(lUId, 1);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"clearUserCleanTrailCache", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        return _ret;
    }

    void Post::async_response_clearUserCleanTrailCache(taf::JceCurrentPtr current, taf::Int32 _ret)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void PostProxy::async_clearUserCleanTrailCache(PostPrxCallbackPtr callback,taf::Int64 lUId,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(lUId, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"clearUserCleanTrailCache", _os.getByteBuffer(), context, _mStatus, callback);
    }

    taf::Int32 PostProxy::clearUserOpCache(taf::Int64 lUId, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(lUId, 1);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"clearUserOpCache", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        return _ret;
    }

    void Post::async_response_clearUserOpCache(taf::JceCurrentPtr current, taf::Int32 _ret)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void PostProxy::async_clearUserOpCache(PostPrxCallbackPtr callback,taf::Int64 lUId,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(lUId, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"clearUserOpCache", _os.getByteBuffer(), context, _mStatus, callback);
    }

    taf::Int32 PostProxy::getBatchNotifySecrets(taf::Int64 lUId, const vector<QUAN::NotifyPost> &vInSecret, vector<QUAN::SecretInfo> &vOutSecrets, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(lUId, 1);
        _os.write(vInSecret, 2);
        _os.write(vOutSecrets, 3);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"getBatchNotifySecrets", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(vOutSecrets, 3, true);
        return _ret;
    }

    void Post::async_response_getBatchNotifySecrets(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<QUAN::SecretInfo> &vOutSecrets)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("vOutSecrets", vOutSecrets);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(vOutSecrets, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void PostProxy::async_getBatchNotifySecrets(PostPrxCallbackPtr callback,taf::Int64 lUId,const vector<QUAN::NotifyPost> &vInSecret,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(lUId, 1);
        _os.write(vInSecret, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"getBatchNotifySecrets", _os.getByteBuffer(), context, _mStatus, callback);
    }

    taf::Int32 PostProxy::getBatchSecrets(taf::Int64 lUId, const vector<taf::Int64> &vInSecret, vector<QUAN::SecretInfo> &vOutSecrets, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(lUId, 1);
        _os.write(vInSecret, 2);
        _os.write(vOutSecrets, 3);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"getBatchSecrets", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(vOutSecrets, 3, true);
        return _ret;
    }

    void Post::async_response_getBatchSecrets(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<QUAN::SecretInfo> &vOutSecrets)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("vOutSecrets", vOutSecrets);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(vOutSecrets, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void PostProxy::async_getBatchSecrets(PostPrxCallbackPtr callback,taf::Int64 lUId,const vector<taf::Int64> &vInSecret,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(lUId, 1);
        _os.write(vInSecret, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"getBatchSecrets", _os.getByteBuffer(), context, _mStatus, callback);
    }

    taf::Int32 PostProxy::getSecretContent(const QUAN::ContentListReq &tReq, QUAN::ContentListRsp &tRsp, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        _os.write(tRsp, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"getSecretContent", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(tRsp, 2, true);
        return _ret;
    }

    void Post::async_response_getSecretContent(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::ContentListRsp &tRsp)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("tRsp", tRsp);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(tRsp, 2);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void PostProxy::async_getSecretContent(PostPrxCallbackPtr callback,const QUAN::ContentListReq &tReq,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"getSecretContent", _os.getByteBuffer(), context, _mStatus, callback);
    }

    taf::Int32 PostProxy::getUserOpBatch(taf::Int64 lUId, const vector<QUAN::FriendsList> &vUId, vector<map<taf::Int64, taf::Int32> > &vOp, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(lUId, 1);
        _os.write(vUId, 2);
        _os.write(vOp, 3);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"getUserOpBatch", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(vOp, 3, true);
        return _ret;
    }

    void Post::async_response_getUserOpBatch(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<map<taf::Int64, taf::Int32> > &vOp)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("vOp", vOp);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(vOp, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void PostProxy::async_getUserOpBatch(PostPrxCallbackPtr callback,taf::Int64 lUId,const vector<QUAN::FriendsList> &vUId,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(lUId, 1);
        _os.write(vUId, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"getUserOpBatch", _os.getByteBuffer(), context, _mStatus, callback);
    }

    taf::Int32 PostProxy::postContent(const QUAN::PostContentReq &tReq, QUAN::PostContentRsp &tRsp, vector<taf::Int64> &vRelatUId, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        _os.write(tRsp, 2);
        _os.write(vRelatUId, 3);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"postContent", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(tRsp, 2, true);
        _is.read(vRelatUId, 3, true);
        return _ret;
    }

    void Post::async_response_postContent(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::PostContentRsp &tRsp, const vector<taf::Int64> &vRelatUId)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("tRsp", tRsp);
            tafAttr.put("vRelatUId", vRelatUId);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(tRsp, 2);

            _os.write(vRelatUId, 3);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void PostProxy::async_postContent(PostPrxCallbackPtr callback,const QUAN::PostContentReq &tReq,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"postContent", _os.getByteBuffer(), context, _mStatus, callback);
    }

    taf::Int32 PostProxy::postFavor(const QUAN::PostFavorReq &tReq, QUAN::PostFavorRsp &tRsp, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        _os.write(tRsp, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"postFavor", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(tRsp, 2, true);
        return _ret;
    }

    void Post::async_response_postFavor(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::PostFavorRsp &tRsp)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("tRsp", tRsp);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(tRsp, 2);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void PostProxy::async_postFavor(PostPrxCallbackPtr callback,const QUAN::PostFavorReq &tReq,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"postFavor", _os.getByteBuffer(), context, _mStatus, callback);
    }

    taf::Int32 PostProxy::postReport(const QUAN::PostReportReq &tReq, QUAN::PostReportRsp &tRsp, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        _os.write(tRsp, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"postReport", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(tRsp, 2, true);
        return _ret;
    }

    void Post::async_response_postReport(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::PostReportRsp &tRsp)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("tRsp", tRsp);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(tRsp, 2);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void PostProxy::async_postReport(PostPrxCallbackPtr callback,const QUAN::PostReportReq &tReq,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"postReport", _os.getByteBuffer(), context, _mStatus, callback);
    }

    taf::Int32 PostProxy::postSecret(const QUAN::PostSecretReq &tReq, QUAN::PostSecretRsp &tRsp, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        _os.write(tRsp, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"postSecret", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(tRsp, 2, true);
        return _ret;
    }

    void Post::async_response_postSecret(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::PostSecretRsp &tRsp)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("tRsp", tRsp);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(tRsp, 2);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void PostProxy::async_postSecret(PostPrxCallbackPtr callback,const QUAN::PostSecretReq &tReq,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"postSecret", _os.getByteBuffer(), context, _mStatus, callback);
    }

    taf::Int32 PostProxy::removeContent(const QUAN::RemoveContentReq &tReq, QUAN::RemoveContentRsp &tRsp, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        _os.write(tRsp, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"removeContent", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(tRsp, 2, true);
        return _ret;
    }

    void Post::async_response_removeContent(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::RemoveContentRsp &tRsp)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("tRsp", tRsp);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(tRsp, 2);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void PostProxy::async_removeContent(PostPrxCallbackPtr callback,const QUAN::RemoveContentReq &tReq,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"removeContent", _os.getByteBuffer(), context, _mStatus, callback);
    }

    taf::Int32 PostProxy::removeSecret(const QUAN::RemoveSecretReq &tReq, QUAN::RemoveSecretRsp &tRsp, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        _os.write(tRsp, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"removeSecret", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        _is.read(tRsp, 2, true);
        return _ret;
    }

    void Post::async_response_removeSecret(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::RemoveSecretRsp &tRsp)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);
            tafAttr.put("tRsp", tRsp);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            _os.write(tRsp, 2);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void PostProxy::async_removeSecret(PostPrxCallbackPtr callback,const QUAN::RemoveSecretReq &tReq,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(tReq, 1);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"removeSecret", _os.getByteBuffer(), context, _mStatus, callback);
    }

    taf::Int32 PostProxy::shareSecret(taf::Int64 lSId, taf::Int64 lShareId, const map<string, string> &context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(lSId, 1);
        _os.write(lShareId, 2);
        taf::ResponsePacket rep;
        std::map<string, string> _mStatus;
        taf_invoke(taf::JCENORMAL,"shareSecret", _os.getByteBuffer(), context, _mStatus, rep);
        taf::JceInputStream<taf::BufferReader> _is;
        _is.setBuffer(rep.sBuffer);
        taf::Int32 _ret;
        _is.read(_ret, 0, true);
        return _ret;
    }

    void Post::async_response_shareSecret(taf::JceCurrentPtr current, taf::Int32 _ret)
    {
        if (current->getRequestVersion() == WUPVERSION || current->getRequestVersion() == WUPVERSION2)
        {
            UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
            tafAttr.setVersion(current->getRequestVersion());
            tafAttr.put("", _ret);

            vector<char> sWupResponseBuffer;
            tafAttr.encode(sWupResponseBuffer);
            current->sendResponse(taf::JCESERVERSUCCESS, sWupResponseBuffer);
        }
        else
        {
            taf::JceOutputStream<taf::BufferWriter> _os;
            _os.write(_ret, 0);

            current->sendResponse(taf::JCESERVERSUCCESS, _os.getByteBuffer());
        }
    }

    void PostProxy::async_shareSecret(PostPrxCallbackPtr callback,taf::Int64 lSId,taf::Int64 lShareId,const map<string, string>& context)
    {
        taf::JceOutputStream<taf::BufferWriter> _os;
        _os.write(lSId, 1);
        _os.write(lShareId, 2);
        std::map<string, string> _mStatus;
        taf_invoke_async(taf::JCENORMAL,"shareSecret", _os.getByteBuffer(), context, _mStatus, callback);
    }

    PostProxy* PostProxy::taf_hash(int64_t key)
    {
        return (PostProxy*)ServantProxy::taf_hash(key);
    }

    static ::std::string __QUAN__Post_all[]=
    {
        "auditSecret",
        "cleanTrail",
        "clearCommentCache",
        "clearPostCache",
        "clearUserCleanTrailCache",
        "clearUserOpCache",
        "getBatchNotifySecrets",
        "getBatchSecrets",
        "getSecretContent",
        "getUserOpBatch",
        "postContent",
        "postFavor",
        "postReport",
        "postSecret",
        "removeContent",
        "removeSecret",
        "shareSecret"
    };

    int PostPrxCallback::onDispatch(taf::ReqMessagePtr msg)
    {
        pair<string*, string*> r = equal_range(__QUAN__Post_all, __QUAN__Post_all+17, msg->request.sFuncName);
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __QUAN__Post_all)
        {
            case 0:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_auditSecret_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                callback_auditSecret(_ret);
                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_cleanTrail_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                QUAN::CleanTrailRsp tRsp;
                _is.read(tRsp, 2, true);
                callback_cleanTrail(_ret, tRsp);
                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_clearCommentCache_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                callback_clearCommentCache(_ret);
                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_clearPostCache_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                callback_clearPostCache(_ret);
                return taf::JCESERVERSUCCESS;

            }
            case 4:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_clearUserCleanTrailCache_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                callback_clearUserCleanTrailCache(_ret);
                return taf::JCESERVERSUCCESS;

            }
            case 5:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_clearUserOpCache_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                callback_clearUserOpCache(_ret);
                return taf::JCESERVERSUCCESS;

            }
            case 6:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getBatchNotifySecrets_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<QUAN::SecretInfo> vOutSecrets;
                _is.read(vOutSecrets, 3, true);
                callback_getBatchNotifySecrets(_ret, vOutSecrets);
                return taf::JCESERVERSUCCESS;

            }
            case 7:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getBatchSecrets_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<QUAN::SecretInfo> vOutSecrets;
                _is.read(vOutSecrets, 3, true);
                callback_getBatchSecrets(_ret, vOutSecrets);
                return taf::JCESERVERSUCCESS;

            }
            case 8:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getSecretContent_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                QUAN::ContentListRsp tRsp;
                _is.read(tRsp, 2, true);
                callback_getSecretContent(_ret, tRsp);
                return taf::JCESERVERSUCCESS;

            }
            case 9:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_getUserOpBatch_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                vector<map<taf::Int64, taf::Int32> > vOp;
                _is.read(vOp, 3, true);
                callback_getUserOpBatch(_ret, vOp);
                return taf::JCESERVERSUCCESS;

            }
            case 10:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_postContent_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                QUAN::PostContentRsp tRsp;
                _is.read(tRsp, 2, true);
                vector<taf::Int64> vRelatUId;
                _is.read(vRelatUId, 3, true);
                callback_postContent(_ret, tRsp, vRelatUId);
                return taf::JCESERVERSUCCESS;

            }
            case 11:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_postFavor_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                QUAN::PostFavorRsp tRsp;
                _is.read(tRsp, 2, true);
                callback_postFavor(_ret, tRsp);
                return taf::JCESERVERSUCCESS;

            }
            case 12:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_postReport_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                QUAN::PostReportRsp tRsp;
                _is.read(tRsp, 2, true);
                callback_postReport(_ret, tRsp);
                return taf::JCESERVERSUCCESS;

            }
            case 13:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_postSecret_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                QUAN::PostSecretRsp tRsp;
                _is.read(tRsp, 2, true);
                callback_postSecret(_ret, tRsp);
                return taf::JCESERVERSUCCESS;

            }
            case 14:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_removeContent_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                QUAN::RemoveContentRsp tRsp;
                _is.read(tRsp, 2, true);
                callback_removeContent(_ret, tRsp);
                return taf::JCESERVERSUCCESS;

            }
            case 15:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_removeSecret_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                QUAN::RemoveSecretRsp tRsp;
                _is.read(tRsp, 2, true);
                callback_removeSecret(_ret, tRsp);
                return taf::JCESERVERSUCCESS;

            }
            case 16:
            {
                if (msg->response.iRet != taf::JCESERVERSUCCESS)
                {
                    callback_shareSecret_exception(msg->response.iRet);

                    return msg->response.iRet;
                }
                taf::JceInputStream<taf::BufferReader> _is;

                _is.setBuffer(msg->response.sBuffer);
                taf::Int32 _ret;
                _is.read(_ret, 0, true);

                callback_shareSecret(_ret);
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }

    int Post::onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer)
    {
        pair<string*, string*> r = equal_range(__QUAN__Post_all, __QUAN__Post_all+17, _current->getFuncName());
        if(r.first == r.second) return taf::JCESERVERNOFUNCERR;
        switch(r.first - __QUAN__Post_all)
        {
            case 0:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                vector<taf::Int64> vSId;
                taf::Int32 iLevel;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("vSId", vSId);
                    tafAttr.get("iLevel", iLevel);
                }
                else
                {
                    _is.read(vSId, 1, true);
                    _is.read(iLevel, 2, true);
                }
                taf::Int32 _ret = auditSecret(vSId,iLevel, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 1:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                QUAN::CleanTrailReq tReq;
                QUAN::CleanTrailRsp tRsp;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("tReq", tReq);
                    tafAttr.getByDefault("tRsp", tRsp, tRsp);
                }
                else
                {
                    _is.read(tReq, 1, true);
                    _is.read(tRsp, 2, false);
                }
                taf::Int32 _ret = cleanTrail(tReq,tRsp, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("tRsp", tRsp);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(tRsp, 2);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 2:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                taf::Int64 lSId;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("lSId", lSId);
                }
                else
                {
                    _is.read(lSId, 1, true);
                }
                taf::Int32 _ret = clearCommentCache(lSId, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 3:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                taf::Int64 lSId;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("lSId", lSId);
                }
                else
                {
                    _is.read(lSId, 1, true);
                }
                taf::Int32 _ret = clearPostCache(lSId, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 4:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                taf::Int64 lUId;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("lUId", lUId);
                }
                else
                {
                    _is.read(lUId, 1, true);
                }
                taf::Int32 _ret = clearUserCleanTrailCache(lUId, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 5:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                taf::Int64 lUId;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("lUId", lUId);
                }
                else
                {
                    _is.read(lUId, 1, true);
                }
                taf::Int32 _ret = clearUserOpCache(lUId, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 6:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                taf::Int64 lUId;
                vector<QUAN::NotifyPost> vInSecret;
                vector<QUAN::SecretInfo> vOutSecrets;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("lUId", lUId);
                    tafAttr.get("vInSecret", vInSecret);
                    tafAttr.getByDefault("vOutSecrets", vOutSecrets, vOutSecrets);
                }
                else
                {
                    _is.read(lUId, 1, true);
                    _is.read(vInSecret, 2, true);
                    _is.read(vOutSecrets, 3, false);
                }
                taf::Int32 _ret = getBatchNotifySecrets(lUId,vInSecret,vOutSecrets, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("vOutSecrets", vOutSecrets);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(vOutSecrets, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 7:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                taf::Int64 lUId;
                vector<taf::Int64> vInSecret;
                vector<QUAN::SecretInfo> vOutSecrets;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("lUId", lUId);
                    tafAttr.get("vInSecret", vInSecret);
                    tafAttr.getByDefault("vOutSecrets", vOutSecrets, vOutSecrets);
                }
                else
                {
                    _is.read(lUId, 1, true);
                    _is.read(vInSecret, 2, true);
                    _is.read(vOutSecrets, 3, false);
                }
                taf::Int32 _ret = getBatchSecrets(lUId,vInSecret,vOutSecrets, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("vOutSecrets", vOutSecrets);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(vOutSecrets, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 8:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                QUAN::ContentListReq tReq;
                QUAN::ContentListRsp tRsp;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("tReq", tReq);
                    tafAttr.getByDefault("tRsp", tRsp, tRsp);
                }
                else
                {
                    _is.read(tReq, 1, true);
                    _is.read(tRsp, 2, false);
                }
                taf::Int32 _ret = getSecretContent(tReq,tRsp, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("tRsp", tRsp);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(tRsp, 2);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 9:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                taf::Int64 lUId;
                vector<QUAN::FriendsList> vUId;
                vector<map<taf::Int64, taf::Int32> > vOp;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("lUId", lUId);
                    tafAttr.get("vUId", vUId);
                    tafAttr.getByDefault("vOp", vOp, vOp);
                }
                else
                {
                    _is.read(lUId, 1, true);
                    _is.read(vUId, 2, true);
                    _is.read(vOp, 3, false);
                }
                taf::Int32 _ret = getUserOpBatch(lUId,vUId,vOp, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("vOp", vOp);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(vOp, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 10:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                QUAN::PostContentReq tReq;
                QUAN::PostContentRsp tRsp;
                vector<taf::Int64> vRelatUId;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("tReq", tReq);
                    tafAttr.getByDefault("tRsp", tRsp, tRsp);
                    tafAttr.getByDefault("vRelatUId", vRelatUId, vRelatUId);
                }
                else
                {
                    _is.read(tReq, 1, true);
                    _is.read(tRsp, 2, false);
                    _is.read(vRelatUId, 3, false);
                }
                taf::Int32 _ret = postContent(tReq,tRsp,vRelatUId, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("tRsp", tRsp);
                        tafAttr.put("vRelatUId", vRelatUId);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(tRsp, 2);
                        _os.write(vRelatUId, 3);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 11:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                QUAN::PostFavorReq tReq;
                QUAN::PostFavorRsp tRsp;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("tReq", tReq);
                    tafAttr.getByDefault("tRsp", tRsp, tRsp);
                }
                else
                {
                    _is.read(tReq, 1, true);
                    _is.read(tRsp, 2, false);
                }
                taf::Int32 _ret = postFavor(tReq,tRsp, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("tRsp", tRsp);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(tRsp, 2);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 12:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                QUAN::PostReportReq tReq;
                QUAN::PostReportRsp tRsp;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("tReq", tReq);
                    tafAttr.getByDefault("tRsp", tRsp, tRsp);
                }
                else
                {
                    _is.read(tReq, 1, true);
                    _is.read(tRsp, 2, false);
                }
                taf::Int32 _ret = postReport(tReq,tRsp, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("tRsp", tRsp);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(tRsp, 2);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 13:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                QUAN::PostSecretReq tReq;
                QUAN::PostSecretRsp tRsp;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("tReq", tReq);
                    tafAttr.getByDefault("tRsp", tRsp, tRsp);
                }
                else
                {
                    _is.read(tReq, 1, true);
                    _is.read(tRsp, 2, false);
                }
                taf::Int32 _ret = postSecret(tReq,tRsp, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("tRsp", tRsp);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(tRsp, 2);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 14:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                QUAN::RemoveContentReq tReq;
                QUAN::RemoveContentRsp tRsp;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("tReq", tReq);
                    tafAttr.getByDefault("tRsp", tRsp, tRsp);
                }
                else
                {
                    _is.read(tReq, 1, true);
                    _is.read(tRsp, 2, false);
                }
                taf::Int32 _ret = removeContent(tReq,tRsp, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("tRsp", tRsp);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(tRsp, 2);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 15:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                QUAN::RemoveSecretReq tReq;
                QUAN::RemoveSecretRsp tRsp;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("tReq", tReq);
                    tafAttr.getByDefault("tRsp", tRsp, tRsp);
                }
                else
                {
                    _is.read(tReq, 1, true);
                    _is.read(tRsp, 2, false);
                }
                taf::Int32 _ret = removeSecret(tReq,tRsp, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.put("tRsp", tRsp);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.write(tRsp, 2);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
            case 16:
            {
                taf::JceInputStream<taf::BufferReader> _is;
                _is.setBuffer(_current->getRequestBuffer());
                taf::Int64 lSId;
                taf::Int64 lShareId;
                if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                {
                    UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                    tafAttr.setVersion(_current->getRequestVersion());
                    tafAttr.decode(_current->getRequestBuffer());
                    tafAttr.get("lSId", lSId);
                    tafAttr.get("lShareId", lShareId);
                }
                else
                {
                    _is.read(lSId, 1, true);
                    _is.read(lShareId, 2, true);
                }
                taf::Int32 _ret = shareSecret(lSId,lShareId, _current);
                if(_current->isResponse())
                {
                    if (_current->getRequestVersion() == WUPVERSION || _current->getRequestVersion() == WUPVERSION2)
                    {
                        UniAttribute<taf::BufferWriter, taf::BufferReader>  tafAttr;
                        tafAttr.setVersion(_current->getRequestVersion());
                        tafAttr.put("", _ret);
                        tafAttr.encode(_sResponseBuffer);
                    }
                    else
                    {
                        taf::JceOutputStream<taf::BufferWriter> _os;
                        _os.write(_ret, 0);
                        _os.swap(_sResponseBuffer);
                    }
                }
                return taf::JCESERVERSUCCESS;

            }
        }
        return taf::JCESERVERNOFUNCERR;
    }


}

