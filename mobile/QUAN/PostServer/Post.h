// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.4.3 by WSRD Tencent.
// Generated from `Post.jce'
// **********************************************************************

#ifndef __POST_H_
#define __POST_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "SecretBase.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "servant/TafCallbacks.h"


namespace QUAN
{
    struct PostCacheKey : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.PostCacheKey";
        }
        static string MD5()
        {
            return "c5d29a3a3b5e33926ecd936ff3153e6b";
        }
        PostCacheKey(taf::Int64 lSId)
            :lSId(lSId)
        {
        }
        PostCacheKey()
        :lSId(0)
        {
        }
        void resetDefautlt()
        {
            lSId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lSId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lSId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lSId,"lSId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lSId, false);
            return _os;
        }
    public:
        taf::Int64 lSId;
    };
    inline bool operator==(const PostCacheKey&l, const PostCacheKey&r)
    {
        return l.lSId == r.lSId;
    }
    inline bool operator!=(const PostCacheKey&l, const PostCacheKey&r)
    {
        return !(l == r);
    }

    struct PostCacheValue : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.PostCacheValue";
        }
        static string MD5()
        {
            return "ab78b9f7c0b5440106dd36f74979923c";
        }
        PostCacheValue(const QUAN::SecretInfo &tSecretInfo,taf::Int32 iTimespan)
            :tSecretInfo(tSecretInfo),iTimespan(iTimespan)
        {
        }
        PostCacheValue()
        :iTimespan(0)
        {
        }
        void resetDefautlt()
        {
            iTimespan = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tSecretInfo, 0);
            _os.write(iTimespan, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tSecretInfo, 0, false);
            _is.read(iTimespan, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tSecretInfo,"tSecretInfo");
            _ds.display(iTimespan,"iTimespan");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tSecretInfo, true);
            _ds.displaySimple(iTimespan, false);
            return _os;
        }
    public:
        QUAN::SecretInfo tSecretInfo;
        taf::Int32 iTimespan;
    };
    inline bool operator==(const PostCacheValue&l, const PostCacheValue&r)
    {
        return l.tSecretInfo == r.tSecretInfo && l.iTimespan == r.iTimespan;
    }
    inline bool operator!=(const PostCacheValue&l, const PostCacheValue&r)
    {
        return !(l == r);
    }

    struct CommentCacheValue : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.CommentCacheValue";
        }
        static string MD5()
        {
            return "9d359f7a8c0b3d4fc933fecd0784c014";
        }
        CommentCacheValue(const vector<QUAN::ContentInfo> &vContentInfo,taf::Int32 iTimespan)
            :vContentInfo(vContentInfo),iTimespan(iTimespan)
        {
        }
        CommentCacheValue()
        :iTimespan(0)
        {
        }
        void resetDefautlt()
        {
            iTimespan = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vContentInfo, 0);
            _os.write(iTimespan, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vContentInfo, 0, false);
            _is.read(iTimespan, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vContentInfo,"vContentInfo");
            _ds.display(iTimespan,"iTimespan");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vContentInfo, true);
            _ds.displaySimple(iTimespan, false);
            return _os;
        }
    public:
        vector<QUAN::ContentInfo> vContentInfo;
        taf::Int32 iTimespan;
    };
    inline bool operator==(const CommentCacheValue&l, const CommentCacheValue&r)
    {
        return l.vContentInfo == r.vContentInfo && l.iTimespan == r.iTimespan;
    }
    inline bool operator!=(const CommentCacheValue&l, const CommentCacheValue&r)
    {
        return !(l == r);
    }

    struct UserFavorCacheValue : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.UserFavorCacheValue";
        }
        static string MD5()
        {
            return "83edec67ce052eef6d7032646fde684e";
        }
        UserFavorCacheValue(const map<taf::Int64, taf::Int32> &mpFavorList,taf::Int32 iTimespan)
            :mpFavorList(mpFavorList),iTimespan(iTimespan)
        {
        }
        UserFavorCacheValue()
        :iTimespan(0)
        {
        }
        void resetDefautlt()
        {
            iTimespan = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(mpFavorList, 0);
            _os.write(iTimespan, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(mpFavorList, 0, false);
            _is.read(iTimespan, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(mpFavorList,"mpFavorList");
            _ds.display(iTimespan,"iTimespan");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(mpFavorList, true);
            _ds.displaySimple(iTimespan, false);
            return _os;
        }
    public:
        map<taf::Int64, taf::Int32> mpFavorList;
        taf::Int32 iTimespan;
    };
    inline bool operator==(const UserFavorCacheValue&l, const UserFavorCacheValue&r)
    {
        return l.mpFavorList == r.mpFavorList && l.iTimespan == r.iTimespan;
    }
    inline bool operator!=(const UserFavorCacheValue&l, const UserFavorCacheValue&r)
    {
        return !(l == r);
    }

    struct UserCleanTrailCacheValue : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.UserCleanTrailCacheValue";
        }
        static string MD5()
        {
            return "feec12de7b13d3c49a37abb722ac4db4";
        }
        UserCleanTrailCacheValue(taf::Int32 iCleanTrailTime,taf::Int32 iTimespan)
            :iCleanTrailTime(iCleanTrailTime),iTimespan(iTimespan)
        {
        }
        UserCleanTrailCacheValue()
        :iCleanTrailTime(0),iTimespan(0)
        {
        }
        void resetDefautlt()
        {
            iCleanTrailTime = 0;
            iTimespan = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iCleanTrailTime, 0);
            _os.write(iTimespan, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iCleanTrailTime, 0, false);
            _is.read(iTimespan, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iCleanTrailTime,"iCleanTrailTime");
            _ds.display(iTimespan,"iTimespan");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iCleanTrailTime, true);
            _ds.displaySimple(iTimespan, false);
            return _os;
        }
    public:
        taf::Int32 iCleanTrailTime;
        taf::Int32 iTimespan;
    };
    inline bool operator==(const UserCleanTrailCacheValue&l, const UserCleanTrailCacheValue&r)
    {
        return l.iCleanTrailTime == r.iCleanTrailTime && l.iTimespan == r.iTimespan;
    }
    inline bool operator!=(const UserCleanTrailCacheValue&l, const UserCleanTrailCacheValue&r)
    {
        return !(l == r);
    }

    struct NotifyPost : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.NotifyPost";
        }
        static string MD5()
        {
            return "bcdab25845af3d13d13a3ffa45b256bd";
        }
        NotifyPost(taf::Int64 lSId,taf::Int32 iNotifyType)
            :lSId(lSId),iNotifyType(iNotifyType)
        {
        }
        NotifyPost()
        :lSId(0),iNotifyType(0)
        {
        }
        void resetDefautlt()
        {
            lSId = 0;
            iNotifyType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lSId, 0);
            _os.write(iNotifyType, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lSId, 0, false);
            _is.read(iNotifyType, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lSId,"lSId");
            _ds.display(iNotifyType,"iNotifyType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lSId, true);
            _ds.displaySimple(iNotifyType, false);
            return _os;
        }
    public:
        taf::Int64 lSId;
        taf::Int32 iNotifyType;
    };
    inline bool operator==(const NotifyPost&l, const NotifyPost&r)
    {
        return l.lSId == r.lSId && l.iNotifyType == r.iNotifyType;
    }
    inline bool operator!=(const NotifyPost&l, const NotifyPost&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class PostPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~PostPrxCallback(){}
        virtual void callback_getSecretContent(taf::Int32 ret, const QUAN::ContentListRsp& tRsp)
        { throw std::runtime_error("callback_getSecretContent() overloading incorrect."); }
        virtual void callback_getSecretContent_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getSecretContent_exception() overloading incorrect."); }

        virtual void callback_postSecret(taf::Int32 ret, const QUAN::PostSecretRsp& tRsp)
        { throw std::runtime_error("callback_postSecret() overloading incorrect."); }
        virtual void callback_postSecret_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_postSecret_exception() overloading incorrect."); }

        virtual void callback_postContent(taf::Int32 ret, const QUAN::PostContentRsp& tRsp, const vector<taf::Int64>& vRelatUId)
        { throw std::runtime_error("callback_postContent() overloading incorrect."); }
        virtual void callback_postContent_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_postContent_exception() overloading incorrect."); }

        virtual void callback_postFavor(taf::Int32 ret, const QUAN::PostFavorRsp& tRsp)
        { throw std::runtime_error("callback_postFavor() overloading incorrect."); }
        virtual void callback_postFavor_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_postFavor_exception() overloading incorrect."); }

        virtual void callback_postReport(taf::Int32 ret, const QUAN::PostReportRsp& tRsp)
        { throw std::runtime_error("callback_postReport() overloading incorrect."); }
        virtual void callback_postReport_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_postReport_exception() overloading incorrect."); }

        virtual void callback_removeSecret(taf::Int32 ret, const QUAN::RemoveSecretRsp& tRsp)
        { throw std::runtime_error("callback_removeSecret() overloading incorrect."); }
        virtual void callback_removeSecret_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_removeSecret_exception() overloading incorrect."); }

        virtual void callback_removeContent(taf::Int32 ret, const QUAN::RemoveContentRsp& tRsp)
        { throw std::runtime_error("callback_removeContent() overloading incorrect."); }
        virtual void callback_removeContent_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_removeContent_exception() overloading incorrect."); }

        virtual void callback_cleanTrail(taf::Int32 ret, const QUAN::CleanTrailRsp& tRsp)
        { throw std::runtime_error("callback_cleanTrail() overloading incorrect."); }
        virtual void callback_cleanTrail_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_cleanTrail_exception() overloading incorrect."); }

        virtual void callback_getBatchSecrets(taf::Int32 ret, const vector<QUAN::SecretInfo>& vOutSecrets)
        { throw std::runtime_error("callback_getBatchSecrets() overloading incorrect."); }
        virtual void callback_getBatchSecrets_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getBatchSecrets_exception() overloading incorrect."); }

        virtual void callback_clearPostCache(taf::Int32 ret)
        { throw std::runtime_error("callback_clearPostCache() overloading incorrect."); }
        virtual void callback_clearPostCache_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_clearPostCache_exception() overloading incorrect."); }

        virtual void callback_clearCommentCache(taf::Int32 ret)
        { throw std::runtime_error("callback_clearCommentCache() overloading incorrect."); }
        virtual void callback_clearCommentCache_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_clearCommentCache_exception() overloading incorrect."); }

        virtual void callback_clearUserOpCache(taf::Int32 ret)
        { throw std::runtime_error("callback_clearUserOpCache() overloading incorrect."); }
        virtual void callback_clearUserOpCache_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_clearUserOpCache_exception() overloading incorrect."); }

        virtual void callback_clearUserCleanTrailCache(taf::Int32 ret)
        { throw std::runtime_error("callback_clearUserCleanTrailCache() overloading incorrect."); }
        virtual void callback_clearUserCleanTrailCache_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_clearUserCleanTrailCache_exception() overloading incorrect."); }

        virtual void callback_getUserOpBatch(taf::Int32 ret, const vector<map<taf::Int64, taf::Int32> >& vOp)
        { throw std::runtime_error("callback_getUserOpBatch() overloading incorrect."); }
        virtual void callback_getUserOpBatch_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getUserOpBatch_exception() overloading incorrect."); }

        virtual void callback_getBatchNotifySecrets(taf::Int32 ret, const vector<QUAN::SecretInfo>& vOutSecrets)
        { throw std::runtime_error("callback_getBatchNotifySecrets() overloading incorrect."); }
        virtual void callback_getBatchNotifySecrets_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getBatchNotifySecrets_exception() overloading incorrect."); }

        virtual void callback_shareSecret(taf::Int32 ret)
        { throw std::runtime_error("callback_shareSecret() overloading incorrect."); }
        virtual void callback_shareSecret_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_shareSecret_exception() overloading incorrect."); }

        virtual void callback_auditSecret(taf::Int32 ret)
        { throw std::runtime_error("callback_auditSecret() overloading incorrect."); }
        virtual void callback_auditSecret_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_auditSecret_exception() overloading incorrect."); }

        virtual void callback_getSecretById(taf::Int32 ret, const QUAN::GetSecretByIdRsp& tRsp)
        { throw std::runtime_error("callback_getSecretById() overloading incorrect."); }
        virtual void callback_getSecretById_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getSecretById_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<PostPrxCallback> PostPrxCallbackPtr;

    /* callback of lambda_async support proxy for client */
    template<typename ...Args>
    class PostPrxCallbackImp:public PostPrxCallback,public tafAsync::TafCallback<Args...>
    {
    public:
        virtual void callback_getSecretContent(taf::Int32 ret, const QUAN::ContentListRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getSecretContent_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_postSecret(taf::Int32 ret, const QUAN::PostSecretRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_postSecret_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_postContent(taf::Int32 ret, const QUAN::PostContentRsp& tRsp, const vector<taf::Int64>& vRelatUId)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp,vRelatUId);}
        virtual void callback_postContent_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_postFavor(taf::Int32 ret, const QUAN::PostFavorRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_postFavor_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_postReport(taf::Int32 ret, const QUAN::PostReportRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_postReport_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_removeSecret(taf::Int32 ret, const QUAN::RemoveSecretRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_removeSecret_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_removeContent(taf::Int32 ret, const QUAN::RemoveContentRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_removeContent_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_cleanTrail(taf::Int32 ret, const QUAN::CleanTrailRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_cleanTrail_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getBatchSecrets(taf::Int32 ret, const vector<QUAN::SecretInfo>& vOutSecrets)
        { tafAsync::TafCallback<Args...>::doCalls(ret,vOutSecrets);}
        virtual void callback_getBatchSecrets_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_clearPostCache(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_clearPostCache_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_clearCommentCache(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_clearCommentCache_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_clearUserOpCache(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_clearUserOpCache_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_clearUserCleanTrailCache(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_clearUserCleanTrailCache_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getUserOpBatch(taf::Int32 ret, const vector<map<taf::Int64, taf::Int32> >& vOp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,vOp);}
        virtual void callback_getUserOpBatch_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getBatchNotifySecrets(taf::Int32 ret, const vector<QUAN::SecretInfo>& vOutSecrets)
        { tafAsync::TafCallback<Args...>::doCalls(ret,vOutSecrets);}
        virtual void callback_getBatchNotifySecrets_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_shareSecret(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_shareSecret_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_auditSecret(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_auditSecret_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getSecretById(taf::Int32 ret, const QUAN::GetSecretByIdRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getSecretById_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

    };
    /* proxy for client */
    class PostProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        typedef PostPrxCallbackImp<taf::Int32, const QUAN::ContentListRsp&> taf_getSecretContentCb;
        typedef PostPrxCallbackImp<taf::Int32, const QUAN::PostSecretRsp&> taf_postSecretCb;
        typedef PostPrxCallbackImp<taf::Int32, const QUAN::PostContentRsp&, const vector<taf::Int64>&> taf_postContentCb;
        typedef PostPrxCallbackImp<taf::Int32, const QUAN::PostFavorRsp&> taf_postFavorCb;
        typedef PostPrxCallbackImp<taf::Int32, const QUAN::PostReportRsp&> taf_postReportCb;
        typedef PostPrxCallbackImp<taf::Int32, const QUAN::RemoveSecretRsp&> taf_removeSecretCb;
        typedef PostPrxCallbackImp<taf::Int32, const QUAN::RemoveContentRsp&> taf_removeContentCb;
        typedef PostPrxCallbackImp<taf::Int32, const QUAN::CleanTrailRsp&> taf_cleanTrailCb;
        typedef PostPrxCallbackImp<taf::Int32, const vector<QUAN::SecretInfo>&> taf_getBatchSecretsCb;
        typedef PostPrxCallbackImp<taf::Int32> taf_clearPostCacheCb;
        typedef PostPrxCallbackImp<taf::Int32> taf_clearCommentCacheCb;
        typedef PostPrxCallbackImp<taf::Int32> taf_clearUserOpCacheCb;
        typedef PostPrxCallbackImp<taf::Int32> taf_clearUserCleanTrailCacheCb;
        typedef PostPrxCallbackImp<taf::Int32, const vector<map<taf::Int64, taf::Int32> >&> taf_getUserOpBatchCb;
        typedef PostPrxCallbackImp<taf::Int32, const vector<QUAN::SecretInfo>&> taf_getBatchNotifySecretsCb;
        typedef PostPrxCallbackImp<taf::Int32> taf_shareSecretCb;
        typedef PostPrxCallbackImp<taf::Int32> taf_auditSecretCb;
        typedef PostPrxCallbackImp<taf::Int32, const QUAN::GetSecretByIdRsp&> taf_getSecretByIdCb;

        taf::Int32 getSecretContent(const QUAN::ContentListReq & tReq,QUAN::ContentListRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getSecretContent(PostPrxCallbackPtr callback,const QUAN::ContentListReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getSecretContentCb> async_getSecretContent(const QUAN::ContentListReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getSecretContentCb> cb=new taf_getSecretContentCb; async_getSecretContent(cb,tReq,context);return cb; }

        taf::Int32 postSecret(const QUAN::PostSecretReq & tReq,QUAN::PostSecretRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_postSecret(PostPrxCallbackPtr callback,const QUAN::PostSecretReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_postSecretCb> async_postSecret(const QUAN::PostSecretReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_postSecretCb> cb=new taf_postSecretCb; async_postSecret(cb,tReq,context);return cb; }

        taf::Int32 postContent(const QUAN::PostContentReq & tReq,QUAN::PostContentRsp &tRsp,vector<taf::Int64> &vRelatUId,const map<string, string> &context = TAF_CONTEXT());
        void async_postContent(PostPrxCallbackPtr callback,const QUAN::PostContentReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_postContentCb> async_postContent(const QUAN::PostContentReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_postContentCb> cb=new taf_postContentCb; async_postContent(cb,tReq,context);return cb; }

        taf::Int32 postFavor(const QUAN::PostFavorReq & tReq,QUAN::PostFavorRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_postFavor(PostPrxCallbackPtr callback,const QUAN::PostFavorReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_postFavorCb> async_postFavor(const QUAN::PostFavorReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_postFavorCb> cb=new taf_postFavorCb; async_postFavor(cb,tReq,context);return cb; }

        taf::Int32 postReport(const QUAN::PostReportReq & tReq,QUAN::PostReportRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_postReport(PostPrxCallbackPtr callback,const QUAN::PostReportReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_postReportCb> async_postReport(const QUAN::PostReportReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_postReportCb> cb=new taf_postReportCb; async_postReport(cb,tReq,context);return cb; }

        taf::Int32 removeSecret(const QUAN::RemoveSecretReq & tReq,QUAN::RemoveSecretRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_removeSecret(PostPrxCallbackPtr callback,const QUAN::RemoveSecretReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_removeSecretCb> async_removeSecret(const QUAN::RemoveSecretReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_removeSecretCb> cb=new taf_removeSecretCb; async_removeSecret(cb,tReq,context);return cb; }

        taf::Int32 removeContent(const QUAN::RemoveContentReq & tReq,QUAN::RemoveContentRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_removeContent(PostPrxCallbackPtr callback,const QUAN::RemoveContentReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_removeContentCb> async_removeContent(const QUAN::RemoveContentReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_removeContentCb> cb=new taf_removeContentCb; async_removeContent(cb,tReq,context);return cb; }

        taf::Int32 cleanTrail(const QUAN::CleanTrailReq & tReq,QUAN::CleanTrailRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_cleanTrail(PostPrxCallbackPtr callback,const QUAN::CleanTrailReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_cleanTrailCb> async_cleanTrail(const QUAN::CleanTrailReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_cleanTrailCb> cb=new taf_cleanTrailCb; async_cleanTrail(cb,tReq,context);return cb; }

        taf::Int32 getBatchSecrets(taf::Int64 lUId,const vector<taf::Int64> & vInSecret,vector<QUAN::SecretInfo> &vOutSecrets,const map<string, string> &context = TAF_CONTEXT());
        void async_getBatchSecrets(PostPrxCallbackPtr callback,taf::Int64 lUId,const vector<taf::Int64> & vInSecret,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getBatchSecretsCb> async_getBatchSecrets(taf::Int64 lUId,const vector<taf::Int64> & vInSecret,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getBatchSecretsCb> cb=new taf_getBatchSecretsCb; async_getBatchSecrets(cb,lUId,vInSecret,context);return cb; }

        taf::Int32 clearPostCache(taf::Int64 lSId,const map<string, string> &context = TAF_CONTEXT());
        void async_clearPostCache(PostPrxCallbackPtr callback,taf::Int64 lSId,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_clearPostCacheCb> async_clearPostCache(taf::Int64 lSId,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_clearPostCacheCb> cb=new taf_clearPostCacheCb; async_clearPostCache(cb,lSId,context);return cb; }

        taf::Int32 clearCommentCache(taf::Int64 lSId,const map<string, string> &context = TAF_CONTEXT());
        void async_clearCommentCache(PostPrxCallbackPtr callback,taf::Int64 lSId,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_clearCommentCacheCb> async_clearCommentCache(taf::Int64 lSId,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_clearCommentCacheCb> cb=new taf_clearCommentCacheCb; async_clearCommentCache(cb,lSId,context);return cb; }

        taf::Int32 clearUserOpCache(taf::Int64 lUId,const map<string, string> &context = TAF_CONTEXT());
        void async_clearUserOpCache(PostPrxCallbackPtr callback,taf::Int64 lUId,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_clearUserOpCacheCb> async_clearUserOpCache(taf::Int64 lUId,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_clearUserOpCacheCb> cb=new taf_clearUserOpCacheCb; async_clearUserOpCache(cb,lUId,context);return cb; }

        taf::Int32 clearUserCleanTrailCache(taf::Int64 lUId,const map<string, string> &context = TAF_CONTEXT());
        void async_clearUserCleanTrailCache(PostPrxCallbackPtr callback,taf::Int64 lUId,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_clearUserCleanTrailCacheCb> async_clearUserCleanTrailCache(taf::Int64 lUId,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_clearUserCleanTrailCacheCb> cb=new taf_clearUserCleanTrailCacheCb; async_clearUserCleanTrailCache(cb,lUId,context);return cb; }

        taf::Int32 getUserOpBatch(taf::Int64 lUId,const vector<QUAN::FriendsList> & vUId,vector<map<taf::Int64, taf::Int32> > &vOp,const map<string, string> &context = TAF_CONTEXT());
        void async_getUserOpBatch(PostPrxCallbackPtr callback,taf::Int64 lUId,const vector<QUAN::FriendsList> & vUId,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getUserOpBatchCb> async_getUserOpBatch(taf::Int64 lUId,const vector<QUAN::FriendsList> & vUId,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getUserOpBatchCb> cb=new taf_getUserOpBatchCb; async_getUserOpBatch(cb,lUId,vUId,context);return cb; }

        taf::Int32 getBatchNotifySecrets(taf::Int64 lUId,const vector<QUAN::NotifyPost> & vInSecret,vector<QUAN::SecretInfo> &vOutSecrets,const map<string, string> &context = TAF_CONTEXT());
        void async_getBatchNotifySecrets(PostPrxCallbackPtr callback,taf::Int64 lUId,const vector<QUAN::NotifyPost> & vInSecret,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getBatchNotifySecretsCb> async_getBatchNotifySecrets(taf::Int64 lUId,const vector<QUAN::NotifyPost> & vInSecret,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getBatchNotifySecretsCb> cb=new taf_getBatchNotifySecretsCb; async_getBatchNotifySecrets(cb,lUId,vInSecret,context);return cb; }

        taf::Int32 shareSecret(taf::Int64 lSId,taf::Int64 lShareId,const map<string, string> &context = TAF_CONTEXT());
        void async_shareSecret(PostPrxCallbackPtr callback,taf::Int64 lSId,taf::Int64 lShareId,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_shareSecretCb> async_shareSecret(taf::Int64 lSId,taf::Int64 lShareId,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_shareSecretCb> cb=new taf_shareSecretCb; async_shareSecret(cb,lSId,lShareId,context);return cb; }

        taf::Int32 auditSecret(const vector<taf::Int64> & vSId,taf::Int32 iLevel,const map<string, string> &context = TAF_CONTEXT());
        void async_auditSecret(PostPrxCallbackPtr callback,const vector<taf::Int64> & vSId,taf::Int32 iLevel,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_auditSecretCb> async_auditSecret(const vector<taf::Int64> & vSId,taf::Int32 iLevel,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_auditSecretCb> cb=new taf_auditSecretCb; async_auditSecret(cb,vSId,iLevel,context);return cb; }

        taf::Int32 getSecretById(const QUAN::GetSecretByIdReq & tReq,QUAN::GetSecretByIdRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getSecretById(PostPrxCallbackPtr callback,const QUAN::GetSecretByIdReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getSecretByIdCb> async_getSecretById(const QUAN::GetSecretByIdReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getSecretByIdCb> cb=new taf_getSecretByIdCb; async_getSecretById(cb,tReq,context);return cb; }

        PostProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<PostProxy> PostPrx;

    /* servant for server */
    class Post : public taf::Servant
    {
    public:
        virtual ~Post(){}
        virtual taf::Int32 getSecretContent(const QUAN::ContentListReq & tReq,QUAN::ContentListRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getSecretContent(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::ContentListRsp &tRsp);

        virtual taf::Int32 postSecret(const QUAN::PostSecretReq & tReq,QUAN::PostSecretRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_postSecret(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::PostSecretRsp &tRsp);

        virtual taf::Int32 postContent(const QUAN::PostContentReq & tReq,QUAN::PostContentRsp &tRsp,vector<taf::Int64> &vRelatUId,taf::JceCurrentPtr current) = 0;
        static void async_response_postContent(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::PostContentRsp &tRsp, const vector<taf::Int64> &vRelatUId);

        virtual taf::Int32 postFavor(const QUAN::PostFavorReq & tReq,QUAN::PostFavorRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_postFavor(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::PostFavorRsp &tRsp);

        virtual taf::Int32 postReport(const QUAN::PostReportReq & tReq,QUAN::PostReportRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_postReport(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::PostReportRsp &tRsp);

        virtual taf::Int32 removeSecret(const QUAN::RemoveSecretReq & tReq,QUAN::RemoveSecretRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_removeSecret(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::RemoveSecretRsp &tRsp);

        virtual taf::Int32 removeContent(const QUAN::RemoveContentReq & tReq,QUAN::RemoveContentRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_removeContent(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::RemoveContentRsp &tRsp);

        virtual taf::Int32 cleanTrail(const QUAN::CleanTrailReq & tReq,QUAN::CleanTrailRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_cleanTrail(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::CleanTrailRsp &tRsp);

        virtual taf::Int32 getBatchSecrets(taf::Int64 lUId,const vector<taf::Int64> & vInSecret,vector<QUAN::SecretInfo> &vOutSecrets,taf::JceCurrentPtr current) = 0;
        static void async_response_getBatchSecrets(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<QUAN::SecretInfo> &vOutSecrets);

        virtual taf::Int32 clearPostCache(taf::Int64 lSId,taf::JceCurrentPtr current) = 0;
        static void async_response_clearPostCache(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 clearCommentCache(taf::Int64 lSId,taf::JceCurrentPtr current) = 0;
        static void async_response_clearCommentCache(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 clearUserOpCache(taf::Int64 lUId,taf::JceCurrentPtr current) = 0;
        static void async_response_clearUserOpCache(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 clearUserCleanTrailCache(taf::Int64 lUId,taf::JceCurrentPtr current) = 0;
        static void async_response_clearUserCleanTrailCache(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 getUserOpBatch(taf::Int64 lUId,const vector<QUAN::FriendsList> & vUId,vector<map<taf::Int64, taf::Int32> > &vOp,taf::JceCurrentPtr current) = 0;
        static void async_response_getUserOpBatch(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<map<taf::Int64, taf::Int32> > &vOp);

        virtual taf::Int32 getBatchNotifySecrets(taf::Int64 lUId,const vector<QUAN::NotifyPost> & vInSecret,vector<QUAN::SecretInfo> &vOutSecrets,taf::JceCurrentPtr current) = 0;
        static void async_response_getBatchNotifySecrets(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<QUAN::SecretInfo> &vOutSecrets);

        virtual taf::Int32 shareSecret(taf::Int64 lSId,taf::Int64 lShareId,taf::JceCurrentPtr current) = 0;
        static void async_response_shareSecret(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 auditSecret(const vector<taf::Int64> & vSId,taf::Int32 iLevel,taf::JceCurrentPtr current) = 0;
        static void async_response_auditSecret(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 getSecretById(const QUAN::GetSecretByIdReq & tReq,QUAN::GetSecretByIdRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getSecretById(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::GetSecretByIdRsp &tRsp);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}

#define QUAN_PostCacheKey_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lSId,b.lSId);

#define QUAN_PostCacheValue_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tSecretInfo,b.tSecretInfo);jce_copy_struct(a.iTimespan,b.iTimespan);

#define QUAN_CommentCacheValue_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vContentInfo,b.vContentInfo);jce_copy_struct(a.iTimespan,b.iTimespan);

#define QUAN_UserFavorCacheValue_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.mpFavorList,b.mpFavorList);jce_copy_struct(a.iTimespan,b.iTimespan);

#define QUAN_UserCleanTrailCacheValue_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iCleanTrailTime,b.iCleanTrailTime);jce_copy_struct(a.iTimespan,b.iTimespan);

#define QUAN_NotifyPost_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lSId,b.lSId);jce_copy_struct(a.iNotifyType,b.iNotifyType);



#include "Post.hpp"
#endif
