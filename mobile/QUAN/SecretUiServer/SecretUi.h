// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.4.3 by WSRD Tencent.
// Generated from `SecretUi.jce'
// **********************************************************************

#ifndef __SECRETUI_H_
#define __SECRETUI_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "SecretBase.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "servant/TafCallbacks.h"


namespace QUAN
{

    /* callback of async proxy for client */
    class SecretUiPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~SecretUiPrxCallback(){}
        virtual void callback_test(taf::Int32 ret)
        { throw std::runtime_error("callback_test() overloading incorrect."); }
        virtual void callback_test_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_test_exception() overloading incorrect."); }

        virtual void callback_auditSecret(taf::Int32 ret)
        { throw std::runtime_error("callback_auditSecret() overloading incorrect."); }
        virtual void callback_auditSecret_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_auditSecret_exception() overloading incorrect."); }

        virtual void callback_getAllSecretList(taf::Int32 ret, const QUAN::SecretListRsp& tRsp)
        { throw std::runtime_error("callback_getAllSecretList() overloading incorrect."); }
        virtual void callback_getAllSecretList_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getAllSecretList_exception() overloading incorrect."); }

        virtual void callback_getSecretList(taf::Int32 ret, const QUAN::SecretListRsp& tRsp)
        { throw std::runtime_error("callback_getSecretList() overloading incorrect."); }
        virtual void callback_getSecretList_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getSecretList_exception() overloading incorrect."); }

        virtual void callback_getSecretContent(taf::Int32 ret, const QUAN::ContentListRsp& tRsp)
        { throw std::runtime_error("callback_getSecretContent() overloading incorrect."); }
        virtual void callback_getSecretContent_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getSecretContent_exception() overloading incorrect."); }

        virtual void callback_postSecret(taf::Int32 ret, const QUAN::PostSecretRsp& tRsp)
        { throw std::runtime_error("callback_postSecret() overloading incorrect."); }
        virtual void callback_postSecret_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_postSecret_exception() overloading incorrect."); }

        virtual void callback_postContent(taf::Int32 ret, const QUAN::PostContentRsp& tRsp)
        { throw std::runtime_error("callback_postContent() overloading incorrect."); }
        virtual void callback_postContent_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_postContent_exception() overloading incorrect."); }

        virtual void callback_postFavor(taf::Int32 ret, const QUAN::PostFavorRsp& tRsp)
        { throw std::runtime_error("callback_postFavor() overloading incorrect."); }
        virtual void callback_postFavor_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_postFavor_exception() overloading incorrect."); }

        virtual void callback_postReport(taf::Int32 ret, const QUAN::PostReportRsp& tRsp)
        { throw std::runtime_error("callback_postReport() overloading incorrect."); }
        virtual void callback_postReport_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_postReport_exception() overloading incorrect."); }

        virtual void callback_cleanTrail(taf::Int32 ret, const QUAN::CleanTrailRsp& tRsp)
        { throw std::runtime_error("callback_cleanTrail() overloading incorrect."); }
        virtual void callback_cleanTrail_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_cleanTrail_exception() overloading incorrect."); }

        virtual void callback_removeSecret(taf::Int32 ret, const QUAN::RemoveSecretRsp& tRsp)
        { throw std::runtime_error("callback_removeSecret() overloading incorrect."); }
        virtual void callback_removeSecret_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_removeSecret_exception() overloading incorrect."); }

        virtual void callback_getPushMsg(taf::Int32 ret, const QUAN::PushMsgRsp& tRsp)
        { throw std::runtime_error("callback_getPushMsg() overloading incorrect."); }
        virtual void callback_getPushMsg_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getPushMsg_exception() overloading incorrect."); }

        virtual void callback_getMsgNum(taf::Int32 ret, const QUAN::GetMsgNumRsp& tRsp)
        { throw std::runtime_error("callback_getMsgNum() overloading incorrect."); }
        virtual void callback_getMsgNum_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getMsgNum_exception() overloading incorrect."); }

        virtual void callback_addMsg(taf::Int32 ret)
        { throw std::runtime_error("callback_addMsg() overloading incorrect."); }
        virtual void callback_addMsg_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_addMsg_exception() overloading incorrect."); }

        virtual void callback_changeMsgStatus(taf::Int32 ret)
        { throw std::runtime_error("callback_changeMsgStatus() overloading incorrect."); }
        virtual void callback_changeMsgStatus_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_changeMsgStatus_exception() overloading incorrect."); }

        virtual void callback_feedBack(taf::Int32 ret, const QUAN::FeedBackRsp& tRsp)
        { throw std::runtime_error("callback_feedBack() overloading incorrect."); }
        virtual void callback_feedBack_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_feedBack_exception() overloading incorrect."); }

        virtual void callback_getUserSingleSecret(taf::Int32 ret, const QUAN::SglSecretRsp& tRsp)
        { throw std::runtime_error("callback_getUserSingleSecret() overloading incorrect."); }
        virtual void callback_getUserSingleSecret_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getUserSingleSecret_exception() overloading incorrect."); }

        virtual void callback_clearUserCache(taf::Int32 ret)
        { throw std::runtime_error("callback_clearUserCache() overloading incorrect."); }
        virtual void callback_clearUserCache_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_clearUserCache_exception() overloading incorrect."); }

        virtual void callback_getSystemList(taf::Int32 ret, const QUAN::SystemListRsp& tRsp)
        { throw std::runtime_error("callback_getSystemList() overloading incorrect."); }
        virtual void callback_getSystemList_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getSystemList_exception() overloading incorrect."); }

        virtual void callback_bindMsg(taf::Int32 ret)
        { throw std::runtime_error("callback_bindMsg() overloading incorrect."); }
        virtual void callback_bindMsg_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_bindMsg_exception() overloading incorrect."); }

        virtual void callback_atMsg(taf::Int32 ret)
        { throw std::runtime_error("callback_atMsg() overloading incorrect."); }
        virtual void callback_atMsg_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_atMsg_exception() overloading incorrect."); }

        virtual void callback_shareSecret(taf::Int32 ret)
        { throw std::runtime_error("callback_shareSecret() overloading incorrect."); }
        virtual void callback_shareSecret_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_shareSecret_exception() overloading incorrect."); }

        virtual void callback_createCircle(taf::Int32 ret, const QUAN::CreateCircleRsp& tRsp)
        { throw std::runtime_error("callback_createCircle() overloading incorrect."); }
        virtual void callback_createCircle_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_createCircle_exception() overloading incorrect."); }

        virtual void callback_searchCircle(taf::Int32 ret, const QUAN::SearchCircleRsp& tRsp)
        { throw std::runtime_error("callback_searchCircle() overloading incorrect."); }
        virtual void callback_searchCircle_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_searchCircle_exception() overloading incorrect."); }

        virtual void callback_getCircle(taf::Int32 ret, const QUAN::GetCircleRsp& tRsp)
        { throw std::runtime_error("callback_getCircle() overloading incorrect."); }
        virtual void callback_getCircle_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getCircle_exception() overloading incorrect."); }

        virtual void callback_setCircleConcern(taf::Int32 ret)
        { throw std::runtime_error("callback_setCircleConcern() overloading incorrect."); }
        virtual void callback_setCircleConcern_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_setCircleConcern_exception() overloading incorrect."); }

        virtual void callback_auditCircle(taf::Int32 ret)
        { throw std::runtime_error("callback_auditCircle() overloading incorrect."); }
        virtual void callback_auditCircle_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_auditCircle_exception() overloading incorrect."); }

        virtual void callback_recommCircle(taf::Int32 ret)
        { throw std::runtime_error("callback_recommCircle() overloading incorrect."); }
        virtual void callback_recommCircle_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_recommCircle_exception() overloading incorrect."); }

        virtual void callback_getCircleList(taf::Int32 ret, const QUAN::GetCircleListRsp& tRsp)
        { throw std::runtime_error("callback_getCircleList() overloading incorrect."); }
        virtual void callback_getCircleList_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getCircleList_exception() overloading incorrect."); }

        virtual void callback_getSysMsg(taf::Int32 ret, const QUAN::GetSysMsgRsp& tRsp)
        { throw std::runtime_error("callback_getSysMsg() overloading incorrect."); }
        virtual void callback_getSysMsg_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getSysMsg_exception() overloading incorrect."); }

        virtual void callback_pushSysMsg(taf::Int32 ret)
        { throw std::runtime_error("callback_pushSysMsg() overloading incorrect."); }
        virtual void callback_pushSysMsg_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_pushSysMsg_exception() overloading incorrect."); }

        virtual void callback_getNewSysMsg(taf::Int32 ret, const QUAN::GetNewSysMsgRsp& tRsp)
        { throw std::runtime_error("callback_getNewSysMsg() overloading incorrect."); }
        virtual void callback_getNewSysMsg_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getNewSysMsg_exception() overloading incorrect."); }

        virtual void callback_addCircleLocation(taf::Int32 ret)
        { throw std::runtime_error("callback_addCircleLocation() overloading incorrect."); }
        virtual void callback_addCircleLocation_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_addCircleLocation_exception() overloading incorrect."); }

        virtual void callback_modifyCircleLocation(taf::Int32 ret)
        { throw std::runtime_error("callback_modifyCircleLocation() overloading incorrect."); }
        virtual void callback_modifyCircleLocation_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_modifyCircleLocation_exception() overloading incorrect."); }

        virtual void callback_getSecretById(taf::Int32 ret, const QUAN::GetSecretByIdRsp& tRsp)
        { throw std::runtime_error("callback_getSecretById() overloading incorrect."); }
        virtual void callback_getSecretById_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getSecretById_exception() overloading incorrect."); }

        virtual void callback_pushImMsg(taf::Int32 ret)
        { throw std::runtime_error("callback_pushImMsg() overloading incorrect."); }
        virtual void callback_pushImMsg_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_pushImMsg_exception() overloading incorrect."); }

        virtual void callback_createCircleByAdmin(taf::Int32 ret, const QUAN::CreateCircleRsp& tRsp)
        { throw std::runtime_error("callback_createCircleByAdmin() overloading incorrect."); }
        virtual void callback_createCircleByAdmin_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_createCircleByAdmin_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<SecretUiPrxCallback> SecretUiPrxCallbackPtr;

    /* callback of lambda_async support proxy for client */
    template<typename ...Args>
    class SecretUiPrxCallbackImp:public SecretUiPrxCallback,public tafAsync::TafCallback<Args...>
    {
    public:
        virtual void callback_test(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_test_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_auditSecret(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_auditSecret_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getAllSecretList(taf::Int32 ret, const QUAN::SecretListRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getAllSecretList_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getSecretList(taf::Int32 ret, const QUAN::SecretListRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getSecretList_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getSecretContent(taf::Int32 ret, const QUAN::ContentListRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getSecretContent_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_postSecret(taf::Int32 ret, const QUAN::PostSecretRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_postSecret_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_postContent(taf::Int32 ret, const QUAN::PostContentRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_postContent_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_postFavor(taf::Int32 ret, const QUAN::PostFavorRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_postFavor_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_postReport(taf::Int32 ret, const QUAN::PostReportRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_postReport_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_cleanTrail(taf::Int32 ret, const QUAN::CleanTrailRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_cleanTrail_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_removeSecret(taf::Int32 ret, const QUAN::RemoveSecretRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_removeSecret_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getPushMsg(taf::Int32 ret, const QUAN::PushMsgRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getPushMsg_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getMsgNum(taf::Int32 ret, const QUAN::GetMsgNumRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getMsgNum_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_addMsg(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_addMsg_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_changeMsgStatus(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_changeMsgStatus_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_feedBack(taf::Int32 ret, const QUAN::FeedBackRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_feedBack_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getUserSingleSecret(taf::Int32 ret, const QUAN::SglSecretRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getUserSingleSecret_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_clearUserCache(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_clearUserCache_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getSystemList(taf::Int32 ret, const QUAN::SystemListRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getSystemList_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_bindMsg(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_bindMsg_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_atMsg(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_atMsg_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_shareSecret(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_shareSecret_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_createCircle(taf::Int32 ret, const QUAN::CreateCircleRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_createCircle_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_searchCircle(taf::Int32 ret, const QUAN::SearchCircleRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_searchCircle_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getCircle(taf::Int32 ret, const QUAN::GetCircleRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getCircle_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_setCircleConcern(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_setCircleConcern_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_auditCircle(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_auditCircle_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_recommCircle(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_recommCircle_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getCircleList(taf::Int32 ret, const QUAN::GetCircleListRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getCircleList_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getSysMsg(taf::Int32 ret, const QUAN::GetSysMsgRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getSysMsg_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_pushSysMsg(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_pushSysMsg_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getNewSysMsg(taf::Int32 ret, const QUAN::GetNewSysMsgRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getNewSysMsg_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_addCircleLocation(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_addCircleLocation_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_modifyCircleLocation(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_modifyCircleLocation_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getSecretById(taf::Int32 ret, const QUAN::GetSecretByIdRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getSecretById_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_pushImMsg(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_pushImMsg_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_createCircleByAdmin(taf::Int32 ret, const QUAN::CreateCircleRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_createCircleByAdmin_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

    };
    /* proxy for client */
    class SecretUiProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        typedef SecretUiPrxCallbackImp<taf::Int32> taf_testCb;
        typedef SecretUiPrxCallbackImp<taf::Int32> taf_auditSecretCb;
        typedef SecretUiPrxCallbackImp<taf::Int32, const QUAN::SecretListRsp&> taf_getAllSecretListCb;
        typedef SecretUiPrxCallbackImp<taf::Int32, const QUAN::SecretListRsp&> taf_getSecretListCb;
        typedef SecretUiPrxCallbackImp<taf::Int32, const QUAN::ContentListRsp&> taf_getSecretContentCb;
        typedef SecretUiPrxCallbackImp<taf::Int32, const QUAN::PostSecretRsp&> taf_postSecretCb;
        typedef SecretUiPrxCallbackImp<taf::Int32, const QUAN::PostContentRsp&> taf_postContentCb;
        typedef SecretUiPrxCallbackImp<taf::Int32, const QUAN::PostFavorRsp&> taf_postFavorCb;
        typedef SecretUiPrxCallbackImp<taf::Int32, const QUAN::PostReportRsp&> taf_postReportCb;
        typedef SecretUiPrxCallbackImp<taf::Int32, const QUAN::CleanTrailRsp&> taf_cleanTrailCb;
        typedef SecretUiPrxCallbackImp<taf::Int32, const QUAN::RemoveSecretRsp&> taf_removeSecretCb;
        typedef SecretUiPrxCallbackImp<taf::Int32, const QUAN::PushMsgRsp&> taf_getPushMsgCb;
        typedef SecretUiPrxCallbackImp<taf::Int32, const QUAN::GetMsgNumRsp&> taf_getMsgNumCb;
        typedef SecretUiPrxCallbackImp<taf::Int32> taf_addMsgCb;
        typedef SecretUiPrxCallbackImp<taf::Int32> taf_changeMsgStatusCb;
        typedef SecretUiPrxCallbackImp<taf::Int32, const QUAN::FeedBackRsp&> taf_feedBackCb;
        typedef SecretUiPrxCallbackImp<taf::Int32, const QUAN::SglSecretRsp&> taf_getUserSingleSecretCb;
        typedef SecretUiPrxCallbackImp<taf::Int32> taf_clearUserCacheCb;
        typedef SecretUiPrxCallbackImp<taf::Int32, const QUAN::SystemListRsp&> taf_getSystemListCb;
        typedef SecretUiPrxCallbackImp<taf::Int32> taf_bindMsgCb;
        typedef SecretUiPrxCallbackImp<taf::Int32> taf_atMsgCb;
        typedef SecretUiPrxCallbackImp<taf::Int32> taf_shareSecretCb;
        typedef SecretUiPrxCallbackImp<taf::Int32, const QUAN::CreateCircleRsp&> taf_createCircleCb;
        typedef SecretUiPrxCallbackImp<taf::Int32, const QUAN::SearchCircleRsp&> taf_searchCircleCb;
        typedef SecretUiPrxCallbackImp<taf::Int32, const QUAN::GetCircleRsp&> taf_getCircleCb;
        typedef SecretUiPrxCallbackImp<taf::Int32> taf_setCircleConcernCb;
        typedef SecretUiPrxCallbackImp<taf::Int32> taf_auditCircleCb;
        typedef SecretUiPrxCallbackImp<taf::Int32> taf_recommCircleCb;
        typedef SecretUiPrxCallbackImp<taf::Int32, const QUAN::GetCircleListRsp&> taf_getCircleListCb;
        typedef SecretUiPrxCallbackImp<taf::Int32, const QUAN::GetSysMsgRsp&> taf_getSysMsgCb;
        typedef SecretUiPrxCallbackImp<taf::Int32> taf_pushSysMsgCb;
        typedef SecretUiPrxCallbackImp<taf::Int32, const QUAN::GetNewSysMsgRsp&> taf_getNewSysMsgCb;
        typedef SecretUiPrxCallbackImp<taf::Int32> taf_addCircleLocationCb;
        typedef SecretUiPrxCallbackImp<taf::Int32> taf_modifyCircleLocationCb;
        typedef SecretUiPrxCallbackImp<taf::Int32, const QUAN::GetSecretByIdRsp&> taf_getSecretByIdCb;
        typedef SecretUiPrxCallbackImp<taf::Int32> taf_pushImMsgCb;
        typedef SecretUiPrxCallbackImp<taf::Int32, const QUAN::CreateCircleRsp&> taf_createCircleByAdminCb;

        taf::Int32 test(const map<string, string> &context = TAF_CONTEXT());
        void async_test(SecretUiPrxCallbackPtr callback,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_testCb> async_test(const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_testCb> cb=new taf_testCb; async_test(cb,context);return cb; }

        taf::Int32 auditSecret(const vector<taf::Int64> & vSId,taf::Int32 iLevel,const map<string, string> &context = TAF_CONTEXT());
        void async_auditSecret(SecretUiPrxCallbackPtr callback,const vector<taf::Int64> & vSId,taf::Int32 iLevel,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_auditSecretCb> async_auditSecret(const vector<taf::Int64> & vSId,taf::Int32 iLevel,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_auditSecretCb> cb=new taf_auditSecretCb; async_auditSecret(cb,vSId,iLevel,context);return cb; }

        taf::Int32 getAllSecretList(const QUAN::SecretListReq & tReq,QUAN::SecretListRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getAllSecretList(SecretUiPrxCallbackPtr callback,const QUAN::SecretListReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getAllSecretListCb> async_getAllSecretList(const QUAN::SecretListReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getAllSecretListCb> cb=new taf_getAllSecretListCb; async_getAllSecretList(cb,tReq,context);return cb; }

        taf::Int32 getSecretList(const QUAN::SecretListReq & tReq,QUAN::SecretListRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getSecretList(SecretUiPrxCallbackPtr callback,const QUAN::SecretListReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getSecretListCb> async_getSecretList(const QUAN::SecretListReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getSecretListCb> cb=new taf_getSecretListCb; async_getSecretList(cb,tReq,context);return cb; }

        taf::Int32 getSecretContent(const QUAN::ContentListReq & tReq,QUAN::ContentListRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getSecretContent(SecretUiPrxCallbackPtr callback,const QUAN::ContentListReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getSecretContentCb> async_getSecretContent(const QUAN::ContentListReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getSecretContentCb> cb=new taf_getSecretContentCb; async_getSecretContent(cb,tReq,context);return cb; }

        taf::Int32 postSecret(const QUAN::PostSecretReq & tReq,QUAN::PostSecretRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_postSecret(SecretUiPrxCallbackPtr callback,const QUAN::PostSecretReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_postSecretCb> async_postSecret(const QUAN::PostSecretReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_postSecretCb> cb=new taf_postSecretCb; async_postSecret(cb,tReq,context);return cb; }

        taf::Int32 postContent(const QUAN::PostContentReq & tReq,QUAN::PostContentRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_postContent(SecretUiPrxCallbackPtr callback,const QUAN::PostContentReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_postContentCb> async_postContent(const QUAN::PostContentReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_postContentCb> cb=new taf_postContentCb; async_postContent(cb,tReq,context);return cb; }

        taf::Int32 postFavor(const QUAN::PostFavorReq & tReq,QUAN::PostFavorRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_postFavor(SecretUiPrxCallbackPtr callback,const QUAN::PostFavorReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_postFavorCb> async_postFavor(const QUAN::PostFavorReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_postFavorCb> cb=new taf_postFavorCb; async_postFavor(cb,tReq,context);return cb; }

        taf::Int32 postReport(const QUAN::PostReportReq & tReq,QUAN::PostReportRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_postReport(SecretUiPrxCallbackPtr callback,const QUAN::PostReportReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_postReportCb> async_postReport(const QUAN::PostReportReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_postReportCb> cb=new taf_postReportCb; async_postReport(cb,tReq,context);return cb; }

        taf::Int32 cleanTrail(const QUAN::CleanTrailReq & tReq,QUAN::CleanTrailRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_cleanTrail(SecretUiPrxCallbackPtr callback,const QUAN::CleanTrailReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_cleanTrailCb> async_cleanTrail(const QUAN::CleanTrailReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_cleanTrailCb> cb=new taf_cleanTrailCb; async_cleanTrail(cb,tReq,context);return cb; }

        taf::Int32 removeSecret(const QUAN::RemoveSecretReq & tReq,QUAN::RemoveSecretRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_removeSecret(SecretUiPrxCallbackPtr callback,const QUAN::RemoveSecretReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_removeSecretCb> async_removeSecret(const QUAN::RemoveSecretReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_removeSecretCb> cb=new taf_removeSecretCb; async_removeSecret(cb,tReq,context);return cb; }

        taf::Int32 getPushMsg(const QUAN::PushMsgReq & tReq,QUAN::PushMsgRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getPushMsg(SecretUiPrxCallbackPtr callback,const QUAN::PushMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getPushMsgCb> async_getPushMsg(const QUAN::PushMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getPushMsgCb> cb=new taf_getPushMsgCb; async_getPushMsg(cb,tReq,context);return cb; }

        taf::Int32 getMsgNum(const QUAN::GetMsgNumReq & tReq,QUAN::GetMsgNumRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getMsgNum(SecretUiPrxCallbackPtr callback,const QUAN::GetMsgNumReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getMsgNumCb> async_getMsgNum(const QUAN::GetMsgNumReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getMsgNumCb> cb=new taf_getMsgNumCb; async_getMsgNum(cb,tReq,context);return cb; }

        taf::Int32 addMsg(const QUAN::AddMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());
        void async_addMsg(SecretUiPrxCallbackPtr callback,const QUAN::AddMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_addMsgCb> async_addMsg(const QUAN::AddMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_addMsgCb> cb=new taf_addMsgCb; async_addMsg(cb,tReq,context);return cb; }

        taf::Int32 changeMsgStatus(const QUAN::ChangeMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());
        void async_changeMsgStatus(SecretUiPrxCallbackPtr callback,const QUAN::ChangeMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_changeMsgStatusCb> async_changeMsgStatus(const QUAN::ChangeMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_changeMsgStatusCb> cb=new taf_changeMsgStatusCb; async_changeMsgStatus(cb,tReq,context);return cb; }

        taf::Int32 feedBack(const QUAN::FeedBackReq & tReq,QUAN::FeedBackRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_feedBack(SecretUiPrxCallbackPtr callback,const QUAN::FeedBackReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_feedBackCb> async_feedBack(const QUAN::FeedBackReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_feedBackCb> cb=new taf_feedBackCb; async_feedBack(cb,tReq,context);return cb; }

        taf::Int32 getUserSingleSecret(const QUAN::SglSecretReq & tReq,QUAN::SglSecretRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getUserSingleSecret(SecretUiPrxCallbackPtr callback,const QUAN::SglSecretReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getUserSingleSecretCb> async_getUserSingleSecret(const QUAN::SglSecretReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getUserSingleSecretCb> cb=new taf_getUserSingleSecretCb; async_getUserSingleSecret(cb,tReq,context);return cb; }

        taf::Int32 clearUserCache(taf::Int64 lUId,const map<string, string> &context = TAF_CONTEXT());
        void async_clearUserCache(SecretUiPrxCallbackPtr callback,taf::Int64 lUId,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_clearUserCacheCb> async_clearUserCache(taf::Int64 lUId,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_clearUserCacheCb> cb=new taf_clearUserCacheCb; async_clearUserCache(cb,lUId,context);return cb; }

        taf::Int32 getSystemList(const QUAN::SystemListReq & tReq,QUAN::SystemListRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getSystemList(SecretUiPrxCallbackPtr callback,const QUAN::SystemListReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getSystemListCb> async_getSystemList(const QUAN::SystemListReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getSystemListCb> cb=new taf_getSystemListCb; async_getSystemList(cb,tReq,context);return cb; }

        taf::Int32 bindMsg(const QUAN::BindMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());
        void async_bindMsg(SecretUiPrxCallbackPtr callback,const QUAN::BindMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_bindMsgCb> async_bindMsg(const QUAN::BindMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_bindMsgCb> cb=new taf_bindMsgCb; async_bindMsg(cb,tReq,context);return cb; }

        taf::Int32 atMsg(const QUAN::AtMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());
        void async_atMsg(SecretUiPrxCallbackPtr callback,const QUAN::AtMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_atMsgCb> async_atMsg(const QUAN::AtMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_atMsgCb> cb=new taf_atMsgCb; async_atMsg(cb,tReq,context);return cb; }

        taf::Int32 shareSecret(taf::Int64 lSId,taf::Int64 lShareId,const map<string, string> &context = TAF_CONTEXT());
        void async_shareSecret(SecretUiPrxCallbackPtr callback,taf::Int64 lSId,taf::Int64 lShareId,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_shareSecretCb> async_shareSecret(taf::Int64 lSId,taf::Int64 lShareId,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_shareSecretCb> cb=new taf_shareSecretCb; async_shareSecret(cb,lSId,lShareId,context);return cb; }

        taf::Int32 createCircle(const QUAN::CreateCircleReq & tReq,QUAN::CreateCircleRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_createCircle(SecretUiPrxCallbackPtr callback,const QUAN::CreateCircleReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_createCircleCb> async_createCircle(const QUAN::CreateCircleReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_createCircleCb> cb=new taf_createCircleCb; async_createCircle(cb,tReq,context);return cb; }

        taf::Int32 searchCircle(const QUAN::SearchCircleReq & tReq,QUAN::SearchCircleRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_searchCircle(SecretUiPrxCallbackPtr callback,const QUAN::SearchCircleReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_searchCircleCb> async_searchCircle(const QUAN::SearchCircleReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_searchCircleCb> cb=new taf_searchCircleCb; async_searchCircle(cb,tReq,context);return cb; }

        taf::Int32 getCircle(const QUAN::GetCircleReq & tReq,QUAN::GetCircleRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getCircle(SecretUiPrxCallbackPtr callback,const QUAN::GetCircleReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getCircleCb> async_getCircle(const QUAN::GetCircleReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getCircleCb> cb=new taf_getCircleCb; async_getCircle(cb,tReq,context);return cb; }

        taf::Int32 setCircleConcern(const QUAN::SetCircleReq & tReq,const map<string, string> &context = TAF_CONTEXT());
        void async_setCircleConcern(SecretUiPrxCallbackPtr callback,const QUAN::SetCircleReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_setCircleConcernCb> async_setCircleConcern(const QUAN::SetCircleReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_setCircleConcernCb> cb=new taf_setCircleConcernCb; async_setCircleConcern(cb,tReq,context);return cb; }

        taf::Int32 auditCircle(taf::Int64 lCircleId,taf::Int32 iAuditState,const std::string & sReason,const map<string, string> &context = TAF_CONTEXT());
        void async_auditCircle(SecretUiPrxCallbackPtr callback,taf::Int64 lCircleId,taf::Int32 iAuditState,const std::string & sReason,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_auditCircleCb> async_auditCircle(taf::Int64 lCircleId,taf::Int32 iAuditState,const std::string & sReason,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_auditCircleCb> cb=new taf_auditCircleCb; async_auditCircle(cb,lCircleId,iAuditState,sReason,context);return cb; }

        taf::Int32 recommCircle(taf::Int64 lCircleId,taf::Int32 iRecommValue,const map<string, string> &context = TAF_CONTEXT());
        void async_recommCircle(SecretUiPrxCallbackPtr callback,taf::Int64 lCircleId,taf::Int32 iRecommValue,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_recommCircleCb> async_recommCircle(taf::Int64 lCircleId,taf::Int32 iRecommValue,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_recommCircleCb> cb=new taf_recommCircleCb; async_recommCircle(cb,lCircleId,iRecommValue,context);return cb; }

        taf::Int32 getCircleList(const QUAN::GetCircleListReq & tReq,QUAN::GetCircleListRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getCircleList(SecretUiPrxCallbackPtr callback,const QUAN::GetCircleListReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getCircleListCb> async_getCircleList(const QUAN::GetCircleListReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getCircleListCb> cb=new taf_getCircleListCb; async_getCircleList(cb,tReq,context);return cb; }

        taf::Int32 getSysMsg(const QUAN::GetSysMsgReq & tReq,QUAN::GetSysMsgRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getSysMsg(SecretUiPrxCallbackPtr callback,const QUAN::GetSysMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getSysMsgCb> async_getSysMsg(const QUAN::GetSysMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getSysMsgCb> cb=new taf_getSysMsgCb; async_getSysMsg(cb,tReq,context);return cb; }

        taf::Int32 pushSysMsg(const QUAN::PushSysMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());
        void async_pushSysMsg(SecretUiPrxCallbackPtr callback,const QUAN::PushSysMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_pushSysMsgCb> async_pushSysMsg(const QUAN::PushSysMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_pushSysMsgCb> cb=new taf_pushSysMsgCb; async_pushSysMsg(cb,tReq,context);return cb; }

        taf::Int32 getNewSysMsg(const QUAN::GetNewSysMsgReq & tReq,QUAN::GetNewSysMsgRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getNewSysMsg(SecretUiPrxCallbackPtr callback,const QUAN::GetNewSysMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getNewSysMsgCb> async_getNewSysMsg(const QUAN::GetNewSysMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getNewSysMsgCb> cb=new taf_getNewSysMsgCb; async_getNewSysMsg(cb,tReq,context);return cb; }

        taf::Int32 addCircleLocation(taf::Int64 lCircleId,const QUAN::CircleLocation & tCircleLocation,const map<string, string> &context = TAF_CONTEXT());
        void async_addCircleLocation(SecretUiPrxCallbackPtr callback,taf::Int64 lCircleId,const QUAN::CircleLocation & tCircleLocation,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_addCircleLocationCb> async_addCircleLocation(taf::Int64 lCircleId,const QUAN::CircleLocation & tCircleLocation,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_addCircleLocationCb> cb=new taf_addCircleLocationCb; async_addCircleLocation(cb,lCircleId,tCircleLocation,context);return cb; }

        taf::Int32 modifyCircleLocation(taf::Int64 lCircleId,taf::Int64 lCircleLocationId,const QUAN::CircleLocation & tCircleLocation,const map<string, string> &context = TAF_CONTEXT());
        void async_modifyCircleLocation(SecretUiPrxCallbackPtr callback,taf::Int64 lCircleId,taf::Int64 lCircleLocationId,const QUAN::CircleLocation & tCircleLocation,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_modifyCircleLocationCb> async_modifyCircleLocation(taf::Int64 lCircleId,taf::Int64 lCircleLocationId,const QUAN::CircleLocation & tCircleLocation,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_modifyCircleLocationCb> cb=new taf_modifyCircleLocationCb; async_modifyCircleLocation(cb,lCircleId,lCircleLocationId,tCircleLocation,context);return cb; }

        taf::Int32 getSecretById(const QUAN::GetSecretByIdReq & tReq,QUAN::GetSecretByIdRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getSecretById(SecretUiPrxCallbackPtr callback,const QUAN::GetSecretByIdReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getSecretByIdCb> async_getSecretById(const QUAN::GetSecretByIdReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getSecretByIdCb> cb=new taf_getSecretByIdCb; async_getSecretById(cb,tReq,context);return cb; }

        taf::Int32 pushImMsg(const QUAN::PushImMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());
        void async_pushImMsg(SecretUiPrxCallbackPtr callback,const QUAN::PushImMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_pushImMsgCb> async_pushImMsg(const QUAN::PushImMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_pushImMsgCb> cb=new taf_pushImMsgCb; async_pushImMsg(cb,tReq,context);return cb; }

        taf::Int32 createCircleByAdmin(const QUAN::CreateCircleReq & tReq,const vector<QUAN::CircleLocation> & vCircleLocation,QUAN::CreateCircleRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_createCircleByAdmin(SecretUiPrxCallbackPtr callback,const QUAN::CreateCircleReq & tReq,const vector<QUAN::CircleLocation> & vCircleLocation,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_createCircleByAdminCb> async_createCircleByAdmin(const QUAN::CreateCircleReq & tReq,const vector<QUAN::CircleLocation> & vCircleLocation,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_createCircleByAdminCb> cb=new taf_createCircleByAdminCb; async_createCircleByAdmin(cb,tReq,vCircleLocation,context);return cb; }

        SecretUiProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<SecretUiProxy> SecretUiPrx;

    /* servant for server */
    class SecretUi : public taf::Servant
    {
    public:
        virtual ~SecretUi(){}
        virtual taf::Int32 test(taf::JceCurrentPtr current) = 0;
        static void async_response_test(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 auditSecret(const vector<taf::Int64> & vSId,taf::Int32 iLevel,taf::JceCurrentPtr current) = 0;
        static void async_response_auditSecret(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 getAllSecretList(const QUAN::SecretListReq & tReq,QUAN::SecretListRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getAllSecretList(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::SecretListRsp &tRsp);

        virtual taf::Int32 getSecretList(const QUAN::SecretListReq & tReq,QUAN::SecretListRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getSecretList(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::SecretListRsp &tRsp);

        virtual taf::Int32 getSecretContent(const QUAN::ContentListReq & tReq,QUAN::ContentListRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getSecretContent(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::ContentListRsp &tRsp);

        virtual taf::Int32 postSecret(const QUAN::PostSecretReq & tReq,QUAN::PostSecretRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_postSecret(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::PostSecretRsp &tRsp);

        virtual taf::Int32 postContent(const QUAN::PostContentReq & tReq,QUAN::PostContentRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_postContent(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::PostContentRsp &tRsp);

        virtual taf::Int32 postFavor(const QUAN::PostFavorReq & tReq,QUAN::PostFavorRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_postFavor(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::PostFavorRsp &tRsp);

        virtual taf::Int32 postReport(const QUAN::PostReportReq & tReq,QUAN::PostReportRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_postReport(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::PostReportRsp &tRsp);

        virtual taf::Int32 cleanTrail(const QUAN::CleanTrailReq & tReq,QUAN::CleanTrailRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_cleanTrail(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::CleanTrailRsp &tRsp);

        virtual taf::Int32 removeSecret(const QUAN::RemoveSecretReq & tReq,QUAN::RemoveSecretRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_removeSecret(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::RemoveSecretRsp &tRsp);

        virtual taf::Int32 getPushMsg(const QUAN::PushMsgReq & tReq,QUAN::PushMsgRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getPushMsg(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::PushMsgRsp &tRsp);

        virtual taf::Int32 getMsgNum(const QUAN::GetMsgNumReq & tReq,QUAN::GetMsgNumRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getMsgNum(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::GetMsgNumRsp &tRsp);

        virtual taf::Int32 addMsg(const QUAN::AddMsgReq & tReq,taf::JceCurrentPtr current) = 0;
        static void async_response_addMsg(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 changeMsgStatus(const QUAN::ChangeMsgReq & tReq,taf::JceCurrentPtr current) = 0;
        static void async_response_changeMsgStatus(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 feedBack(const QUAN::FeedBackReq & tReq,QUAN::FeedBackRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_feedBack(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::FeedBackRsp &tRsp);

        virtual taf::Int32 getUserSingleSecret(const QUAN::SglSecretReq & tReq,QUAN::SglSecretRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getUserSingleSecret(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::SglSecretRsp &tRsp);

        virtual taf::Int32 clearUserCache(taf::Int64 lUId,taf::JceCurrentPtr current) = 0;
        static void async_response_clearUserCache(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 getSystemList(const QUAN::SystemListReq & tReq,QUAN::SystemListRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getSystemList(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::SystemListRsp &tRsp);

        virtual taf::Int32 bindMsg(const QUAN::BindMsgReq & tReq,taf::JceCurrentPtr current) = 0;
        static void async_response_bindMsg(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 atMsg(const QUAN::AtMsgReq & tReq,taf::JceCurrentPtr current) = 0;
        static void async_response_atMsg(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 shareSecret(taf::Int64 lSId,taf::Int64 lShareId,taf::JceCurrentPtr current) = 0;
        static void async_response_shareSecret(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 createCircle(const QUAN::CreateCircleReq & tReq,QUAN::CreateCircleRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_createCircle(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::CreateCircleRsp &tRsp);

        virtual taf::Int32 searchCircle(const QUAN::SearchCircleReq & tReq,QUAN::SearchCircleRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_searchCircle(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::SearchCircleRsp &tRsp);

        virtual taf::Int32 getCircle(const QUAN::GetCircleReq & tReq,QUAN::GetCircleRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getCircle(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::GetCircleRsp &tRsp);

        virtual taf::Int32 setCircleConcern(const QUAN::SetCircleReq & tReq,taf::JceCurrentPtr current) = 0;
        static void async_response_setCircleConcern(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 auditCircle(taf::Int64 lCircleId,taf::Int32 iAuditState,const std::string & sReason,taf::JceCurrentPtr current) = 0;
        static void async_response_auditCircle(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 recommCircle(taf::Int64 lCircleId,taf::Int32 iRecommValue,taf::JceCurrentPtr current) = 0;
        static void async_response_recommCircle(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 getCircleList(const QUAN::GetCircleListReq & tReq,QUAN::GetCircleListRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getCircleList(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::GetCircleListRsp &tRsp);

        virtual taf::Int32 getSysMsg(const QUAN::GetSysMsgReq & tReq,QUAN::GetSysMsgRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getSysMsg(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::GetSysMsgRsp &tRsp);

        virtual taf::Int32 pushSysMsg(const QUAN::PushSysMsgReq & tReq,taf::JceCurrentPtr current) = 0;
        static void async_response_pushSysMsg(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 getNewSysMsg(const QUAN::GetNewSysMsgReq & tReq,QUAN::GetNewSysMsgRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getNewSysMsg(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::GetNewSysMsgRsp &tRsp);

        virtual taf::Int32 addCircleLocation(taf::Int64 lCircleId,const QUAN::CircleLocation & tCircleLocation,taf::JceCurrentPtr current) = 0;
        static void async_response_addCircleLocation(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 modifyCircleLocation(taf::Int64 lCircleId,taf::Int64 lCircleLocationId,const QUAN::CircleLocation & tCircleLocation,taf::JceCurrentPtr current) = 0;
        static void async_response_modifyCircleLocation(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 getSecretById(const QUAN::GetSecretByIdReq & tReq,QUAN::GetSecretByIdRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getSecretById(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::GetSecretByIdRsp &tRsp);

        virtual taf::Int32 pushImMsg(const QUAN::PushImMsgReq & tReq,taf::JceCurrentPtr current) = 0;
        static void async_response_pushImMsg(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 createCircleByAdmin(const QUAN::CreateCircleReq & tReq,const vector<QUAN::CircleLocation> & vCircleLocation,QUAN::CreateCircleRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_createCircleByAdmin(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::CreateCircleRsp &tRsp);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}



#include "SecretUi.hpp"
#endif
