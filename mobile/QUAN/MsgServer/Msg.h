// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.4.3 by WSRD Tencent.
// Generated from `Msg.jce'
// **********************************************************************

#ifndef __MSG_H_
#define __MSG_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "SecretBase.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "servant/TafCallbacks.h"


namespace QUAN
{
    struct PushMsgKey : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.PushMsgKey";
        }
        static string MD5()
        {
            return "c5d29a3a3b5e33926ecd936ff3153e6b";
        }
        PushMsgKey(taf::Int64 lUId)
            :lUId(lUId)
        {
        }
        PushMsgKey()
        :lUId(0)
        {
        }
        void resetDefautlt()
        {
            lUId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lUId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lUId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lUId,"lUId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lUId, false);
            return _os;
        }
    public:
        taf::Int64 lUId;
    };
    inline bool operator==(const PushMsgKey&l, const PushMsgKey&r)
    {
        return l.lUId == r.lUId;
    }
    inline bool operator!=(const PushMsgKey&l, const PushMsgKey&r)
    {
        return !(l == r);
    }

    struct PushMsgValue : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.PushMsgValue";
        }
        static string MD5()
        {
            return "e47b2ff87e29c9760e2260376fd25d71";
        }
        PushMsgValue(taf::Int32 iAppId,taf::Int32 iVersion,taf::Int32 iOnline,const std::string &sToken,const std::string &sOs)
            :iAppId(iAppId),iVersion(iVersion),iOnline(iOnline),sToken(sToken),sOs(sOs)
        {
        }
        PushMsgValue()
        :iAppId(0),iVersion(0),iOnline(0),sToken(""),sOs("")
        {
        }
        void resetDefautlt()
        {
            iAppId = 0;
            iVersion = 0;
            iOnline = 0;
            sToken = "";
            sOs = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iAppId, 0);
            _os.write(iVersion, 1);
            _os.write(iOnline, 2);
            _os.write(sToken, 3);
            _os.write(sOs, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iAppId, 0, false);
            _is.read(iVersion, 1, false);
            _is.read(iOnline, 2, false);
            _is.read(sToken, 3, false);
            _is.read(sOs, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iAppId,"iAppId");
            _ds.display(iVersion,"iVersion");
            _ds.display(iOnline,"iOnline");
            _ds.display(sToken,"sToken");
            _ds.display(sOs,"sOs");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iAppId, true);
            _ds.displaySimple(iVersion, true);
            _ds.displaySimple(iOnline, true);
            _ds.displaySimple(sToken, true);
            _ds.displaySimple(sOs, false);
            return _os;
        }
    public:
        taf::Int32 iAppId;
        taf::Int32 iVersion;
        taf::Int32 iOnline;
        std::string sToken;
        std::string sOs;
    };
    inline bool operator==(const PushMsgValue&l, const PushMsgValue&r)
    {
        return l.iAppId == r.iAppId && l.iVersion == r.iVersion && l.iOnline == r.iOnline && l.sToken == r.sToken && l.sOs == r.sOs;
    }
    inline bool operator!=(const PushMsgValue&l, const PushMsgValue&r)
    {
        return !(l == r);
    }

    struct MsgRemindKey : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.MsgRemindKey";
        }
        static string MD5()
        {
            return "c5d29a3a3b5e33926ecd936ff3153e6b";
        }
        MsgRemindKey(taf::Int64 lUId)
            :lUId(lUId)
        {
        }
        MsgRemindKey()
        :lUId(0)
        {
        }
        void resetDefautlt()
        {
            lUId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lUId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lUId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lUId,"lUId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lUId, false);
            return _os;
        }
    public:
        taf::Int64 lUId;
    };
    inline bool operator==(const MsgRemindKey&l, const MsgRemindKey&r)
    {
        return l.lUId == r.lUId;
    }
    inline bool operator!=(const MsgRemindKey&l, const MsgRemindKey&r)
    {
        return !(l == r);
    }

    struct MsgRemindValue : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.MsgRemindValue";
        }
        static string MD5()
        {
            return "2d6a3a13a99abdff251e45c2adffda62";
        }
        MsgRemindValue(const map<taf::Int64, QUAN::MsgRmd> &mSIds,taf::Int32 iTime)
            :mSIds(mSIds),iTime(iTime)
        {
        }
        MsgRemindValue()
        :iTime(0)
        {
        }
        void resetDefautlt()
        {
            iTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(mSIds, 0);
            _os.write(iTime, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(mSIds, 0, false);
            _is.read(iTime, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(mSIds,"mSIds");
            _ds.display(iTime,"iTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(mSIds, true);
            _ds.displaySimple(iTime, false);
            return _os;
        }
    public:
        map<taf::Int64, QUAN::MsgRmd> mSIds;
        taf::Int32 iTime;
    };
    inline bool operator==(const MsgRemindValue&l, const MsgRemindValue&r)
    {
        return l.mSIds == r.mSIds && l.iTime == r.iTime;
    }
    inline bool operator!=(const MsgRemindValue&l, const MsgRemindValue&r)
    {
        return !(l == r);
    }

    struct SysMsgKey : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.SysMsgKey";
        }
        static string MD5()
        {
            return "c5d29a3a3b5e33926ecd936ff3153e6b";
        }
        SysMsgKey(taf::Int64 lUId)
            :lUId(lUId)
        {
        }
        SysMsgKey()
        :lUId(0)
        {
        }
        void resetDefautlt()
        {
            lUId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lUId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lUId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lUId,"lUId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lUId, false);
            return _os;
        }
    public:
        taf::Int64 lUId;
    };
    inline bool operator==(const SysMsgKey&l, const SysMsgKey&r)
    {
        return l.lUId == r.lUId;
    }
    inline bool operator!=(const SysMsgKey&l, const SysMsgKey&r)
    {
        return !(l == r);
    }

    struct SysMsgValue : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.SysMsgValue";
        }
        static string MD5()
        {
            return "18e5637677390b35a0680d237247b2f2";
        }
        SysMsgValue(const vector<QUAN::SysMsgInfo> &vSysMsgs,taf::Int32 iTime)
            :vSysMsgs(vSysMsgs),iTime(iTime)
        {
        }
        SysMsgValue()
        :iTime(0)
        {
        }
        void resetDefautlt()
        {
            iTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vSysMsgs, 0);
            _os.write(iTime, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vSysMsgs, 0, false);
            _is.read(iTime, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vSysMsgs,"vSysMsgs");
            _ds.display(iTime,"iTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vSysMsgs, true);
            _ds.displaySimple(iTime, false);
            return _os;
        }
    public:
        vector<QUAN::SysMsgInfo> vSysMsgs;
        taf::Int32 iTime;
    };
    inline bool operator==(const SysMsgValue&l, const SysMsgValue&r)
    {
        return l.vSysMsgs == r.vSysMsgs && l.iTime == r.iTime;
    }
    inline bool operator!=(const SysMsgValue&l, const SysMsgValue&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class MsgPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~MsgPrxCallback(){}
        virtual void callback_test(taf::Int32 ret)
        { throw std::runtime_error("callback_test() overloading incorrect."); }
        virtual void callback_test_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_test_exception() overloading incorrect."); }

        virtual void callback_getPushMsg(taf::Int32 ret, const QUAN::PushMsgRsp& tRsp)
        { throw std::runtime_error("callback_getPushMsg() overloading incorrect."); }
        virtual void callback_getPushMsg_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getPushMsg_exception() overloading incorrect."); }

        virtual void callback_getMsgNum(taf::Int32 ret, const QUAN::GetMsgNumRsp& tRsp)
        { throw std::runtime_error("callback_getMsgNum() overloading incorrect."); }
        virtual void callback_getMsgNum_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getMsgNum_exception() overloading incorrect."); }

        virtual void callback_addMsg(taf::Int32 ret)
        { throw std::runtime_error("callback_addMsg() overloading incorrect."); }
        virtual void callback_addMsg_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_addMsg_exception() overloading incorrect."); }

        virtual void callback_changeMsgStatus(taf::Int32 ret)
        { throw std::runtime_error("callback_changeMsgStatus() overloading incorrect."); }
        virtual void callback_changeMsgStatus_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_changeMsgStatus_exception() overloading incorrect."); }

        virtual void callback_bindMsg(taf::Int32 ret)
        { throw std::runtime_error("callback_bindMsg() overloading incorrect."); }
        virtual void callback_bindMsg_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_bindMsg_exception() overloading incorrect."); }

        virtual void callback_atMsg(taf::Int32 ret)
        { throw std::runtime_error("callback_atMsg() overloading incorrect."); }
        virtual void callback_atMsg_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_atMsg_exception() overloading incorrect."); }

        virtual void callback_cleanCache(taf::Int32 ret)
        { throw std::runtime_error("callback_cleanCache() overloading incorrect."); }
        virtual void callback_cleanCache_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_cleanCache_exception() overloading incorrect."); }

        virtual void callback_getSysMsg(taf::Int32 ret, const QUAN::GetSysMsgRsp& tRsp)
        { throw std::runtime_error("callback_getSysMsg() overloading incorrect."); }
        virtual void callback_getSysMsg_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getSysMsg_exception() overloading incorrect."); }

        virtual void callback_pushSysMsg(taf::Int32 ret)
        { throw std::runtime_error("callback_pushSysMsg() overloading incorrect."); }
        virtual void callback_pushSysMsg_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_pushSysMsg_exception() overloading incorrect."); }

        virtual void callback_cleanSysCache(taf::Int32 ret)
        { throw std::runtime_error("callback_cleanSysCache() overloading incorrect."); }
        virtual void callback_cleanSysCache_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_cleanSysCache_exception() overloading incorrect."); }

        virtual void callback_getNewSysMsg(taf::Int32 ret, const QUAN::GetNewSysMsgRsp& tRsp)
        { throw std::runtime_error("callback_getNewSysMsg() overloading incorrect."); }
        virtual void callback_getNewSysMsg_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getNewSysMsg_exception() overloading incorrect."); }

        virtual void callback_pushImMsg(taf::Int32 ret)
        { throw std::runtime_error("callback_pushImMsg() overloading incorrect."); }
        virtual void callback_pushImMsg_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_pushImMsg_exception() overloading incorrect."); }

        virtual void callback_pushBindMsg(taf::Int32 ret)
        { throw std::runtime_error("callback_pushBindMsg() overloading incorrect."); }
        virtual void callback_pushBindMsg_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_pushBindMsg_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<MsgPrxCallback> MsgPrxCallbackPtr;

    /* callback of lambda_async support proxy for client */
    template<typename ...Args>
    class MsgPrxCallbackImp:public MsgPrxCallback,public tafAsync::TafCallback<Args...>
    {
    public:
        virtual void callback_test(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_test_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getPushMsg(taf::Int32 ret, const QUAN::PushMsgRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getPushMsg_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getMsgNum(taf::Int32 ret, const QUAN::GetMsgNumRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getMsgNum_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_addMsg(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_addMsg_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_changeMsgStatus(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_changeMsgStatus_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_bindMsg(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_bindMsg_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_atMsg(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_atMsg_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_cleanCache(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_cleanCache_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getSysMsg(taf::Int32 ret, const QUAN::GetSysMsgRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getSysMsg_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_pushSysMsg(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_pushSysMsg_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_cleanSysCache(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_cleanSysCache_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getNewSysMsg(taf::Int32 ret, const QUAN::GetNewSysMsgRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getNewSysMsg_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_pushImMsg(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_pushImMsg_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_pushBindMsg(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_pushBindMsg_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

    };
    /* proxy for client */
    class MsgProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        typedef MsgPrxCallbackImp<taf::Int32> taf_testCb;
        typedef MsgPrxCallbackImp<taf::Int32, const QUAN::PushMsgRsp&> taf_getPushMsgCb;
        typedef MsgPrxCallbackImp<taf::Int32, const QUAN::GetMsgNumRsp&> taf_getMsgNumCb;
        typedef MsgPrxCallbackImp<taf::Int32> taf_addMsgCb;
        typedef MsgPrxCallbackImp<taf::Int32> taf_changeMsgStatusCb;
        typedef MsgPrxCallbackImp<taf::Int32> taf_bindMsgCb;
        typedef MsgPrxCallbackImp<taf::Int32> taf_atMsgCb;
        typedef MsgPrxCallbackImp<taf::Int32> taf_cleanCacheCb;
        typedef MsgPrxCallbackImp<taf::Int32, const QUAN::GetSysMsgRsp&> taf_getSysMsgCb;
        typedef MsgPrxCallbackImp<taf::Int32> taf_pushSysMsgCb;
        typedef MsgPrxCallbackImp<taf::Int32> taf_cleanSysCacheCb;
        typedef MsgPrxCallbackImp<taf::Int32, const QUAN::GetNewSysMsgRsp&> taf_getNewSysMsgCb;
        typedef MsgPrxCallbackImp<taf::Int32> taf_pushImMsgCb;
        typedef MsgPrxCallbackImp<taf::Int32> taf_pushBindMsgCb;

        taf::Int32 test(const map<string, string> &context = TAF_CONTEXT());
        void async_test(MsgPrxCallbackPtr callback,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_testCb> async_test(const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_testCb> cb=new taf_testCb; async_test(cb,context);return cb; }

        taf::Int32 getPushMsg(const QUAN::PushMsgReq & tReq,QUAN::PushMsgRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getPushMsg(MsgPrxCallbackPtr callback,const QUAN::PushMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getPushMsgCb> async_getPushMsg(const QUAN::PushMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getPushMsgCb> cb=new taf_getPushMsgCb; async_getPushMsg(cb,tReq,context);return cb; }

        taf::Int32 getMsgNum(const QUAN::GetMsgNumReq & tReq,QUAN::GetMsgNumRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getMsgNum(MsgPrxCallbackPtr callback,const QUAN::GetMsgNumReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getMsgNumCb> async_getMsgNum(const QUAN::GetMsgNumReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getMsgNumCb> cb=new taf_getMsgNumCb; async_getMsgNum(cb,tReq,context);return cb; }

        taf::Int32 addMsg(const QUAN::AddMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());
        void async_addMsg(MsgPrxCallbackPtr callback,const QUAN::AddMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_addMsgCb> async_addMsg(const QUAN::AddMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_addMsgCb> cb=new taf_addMsgCb; async_addMsg(cb,tReq,context);return cb; }

        taf::Int32 changeMsgStatus(const QUAN::ChangeMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());
        void async_changeMsgStatus(MsgPrxCallbackPtr callback,const QUAN::ChangeMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_changeMsgStatusCb> async_changeMsgStatus(const QUAN::ChangeMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_changeMsgStatusCb> cb=new taf_changeMsgStatusCb; async_changeMsgStatus(cb,tReq,context);return cb; }

        taf::Int32 bindMsg(const QUAN::BindMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());
        void async_bindMsg(MsgPrxCallbackPtr callback,const QUAN::BindMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_bindMsgCb> async_bindMsg(const QUAN::BindMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_bindMsgCb> cb=new taf_bindMsgCb; async_bindMsg(cb,tReq,context);return cb; }

        taf::Int32 atMsg(const QUAN::AtMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());
        void async_atMsg(MsgPrxCallbackPtr callback,const QUAN::AtMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_atMsgCb> async_atMsg(const QUAN::AtMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_atMsgCb> cb=new taf_atMsgCb; async_atMsg(cb,tReq,context);return cb; }

        taf::Int32 cleanCache(const vector<taf::Int64> & tUserId,const map<string, string> &context = TAF_CONTEXT());
        void async_cleanCache(MsgPrxCallbackPtr callback,const vector<taf::Int64> & tUserId,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_cleanCacheCb> async_cleanCache(const vector<taf::Int64> & tUserId,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_cleanCacheCb> cb=new taf_cleanCacheCb; async_cleanCache(cb,tUserId,context);return cb; }

        taf::Int32 getSysMsg(const QUAN::GetSysMsgReq & tReq,QUAN::GetSysMsgRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getSysMsg(MsgPrxCallbackPtr callback,const QUAN::GetSysMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getSysMsgCb> async_getSysMsg(const QUAN::GetSysMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getSysMsgCb> cb=new taf_getSysMsgCb; async_getSysMsg(cb,tReq,context);return cb; }

        taf::Int32 pushSysMsg(const QUAN::PushSysMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());
        void async_pushSysMsg(MsgPrxCallbackPtr callback,const QUAN::PushSysMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_pushSysMsgCb> async_pushSysMsg(const QUAN::PushSysMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_pushSysMsgCb> cb=new taf_pushSysMsgCb; async_pushSysMsg(cb,tReq,context);return cb; }

        taf::Int32 cleanSysCache(taf::Int64 tUserId,const map<string, string> &context = TAF_CONTEXT());
        void async_cleanSysCache(MsgPrxCallbackPtr callback,taf::Int64 tUserId,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_cleanSysCacheCb> async_cleanSysCache(taf::Int64 tUserId,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_cleanSysCacheCb> cb=new taf_cleanSysCacheCb; async_cleanSysCache(cb,tUserId,context);return cb; }

        taf::Int32 getNewSysMsg(const QUAN::GetNewSysMsgReq & tReq,QUAN::GetNewSysMsgRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getNewSysMsg(MsgPrxCallbackPtr callback,const QUAN::GetNewSysMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getNewSysMsgCb> async_getNewSysMsg(const QUAN::GetNewSysMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getNewSysMsgCb> cb=new taf_getNewSysMsgCb; async_getNewSysMsg(cb,tReq,context);return cb; }

        taf::Int32 pushImMsg(const QUAN::PushImMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());
        void async_pushImMsg(MsgPrxCallbackPtr callback,const QUAN::PushImMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_pushImMsgCb> async_pushImMsg(const QUAN::PushImMsgReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_pushImMsgCb> cb=new taf_pushImMsgCb; async_pushImMsg(cb,tReq,context);return cb; }

        taf::Int32 pushBindMsg(const QUAN::UserId & tUserId,taf::Int32 iType,const std::string & sId,const map<string, string> &context = TAF_CONTEXT());
        void async_pushBindMsg(MsgPrxCallbackPtr callback,const QUAN::UserId & tUserId,taf::Int32 iType,const std::string & sId,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_pushBindMsgCb> async_pushBindMsg(const QUAN::UserId & tUserId,taf::Int32 iType,const std::string & sId,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_pushBindMsgCb> cb=new taf_pushBindMsgCb; async_pushBindMsg(cb,tUserId,iType,sId,context);return cb; }

        MsgProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<MsgProxy> MsgPrx;

    /* servant for server */
    class Msg : public taf::Servant
    {
    public:
        virtual ~Msg(){}
        virtual taf::Int32 test(taf::JceCurrentPtr current) = 0;
        static void async_response_test(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 getPushMsg(const QUAN::PushMsgReq & tReq,QUAN::PushMsgRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getPushMsg(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::PushMsgRsp &tRsp);

        virtual taf::Int32 getMsgNum(const QUAN::GetMsgNumReq & tReq,QUAN::GetMsgNumRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getMsgNum(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::GetMsgNumRsp &tRsp);

        virtual taf::Int32 addMsg(const QUAN::AddMsgReq & tReq,taf::JceCurrentPtr current) = 0;
        static void async_response_addMsg(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 changeMsgStatus(const QUAN::ChangeMsgReq & tReq,taf::JceCurrentPtr current) = 0;
        static void async_response_changeMsgStatus(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 bindMsg(const QUAN::BindMsgReq & tReq,taf::JceCurrentPtr current) = 0;
        static void async_response_bindMsg(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 atMsg(const QUAN::AtMsgReq & tReq,taf::JceCurrentPtr current) = 0;
        static void async_response_atMsg(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 cleanCache(const vector<taf::Int64> & tUserId,taf::JceCurrentPtr current) = 0;
        static void async_response_cleanCache(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 getSysMsg(const QUAN::GetSysMsgReq & tReq,QUAN::GetSysMsgRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getSysMsg(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::GetSysMsgRsp &tRsp);

        virtual taf::Int32 pushSysMsg(const QUAN::PushSysMsgReq & tReq,taf::JceCurrentPtr current) = 0;
        static void async_response_pushSysMsg(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 cleanSysCache(taf::Int64 tUserId,taf::JceCurrentPtr current) = 0;
        static void async_response_cleanSysCache(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 getNewSysMsg(const QUAN::GetNewSysMsgReq & tReq,QUAN::GetNewSysMsgRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getNewSysMsg(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::GetNewSysMsgRsp &tRsp);

        virtual taf::Int32 pushImMsg(const QUAN::PushImMsgReq & tReq,taf::JceCurrentPtr current) = 0;
        static void async_response_pushImMsg(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 pushBindMsg(const QUAN::UserId & tUserId,taf::Int32 iType,const std::string & sId,taf::JceCurrentPtr current) = 0;
        static void async_response_pushBindMsg(taf::JceCurrentPtr current, taf::Int32 _ret);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}

#define QUAN_PushMsgKey_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lUId,b.lUId);

#define QUAN_PushMsgValue_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iAppId,b.iAppId);jce_copy_struct(a.iVersion,b.iVersion);jce_copy_struct(a.iOnline,b.iOnline);jce_copy_struct(a.sToken,b.sToken);jce_copy_struct(a.sOs,b.sOs);

#define QUAN_MsgRemindKey_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lUId,b.lUId);

#define QUAN_MsgRemindValue_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.mSIds,b.mSIds);jce_copy_struct(a.iTime,b.iTime);

#define QUAN_SysMsgKey_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lUId,b.lUId);

#define QUAN_SysMsgValue_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vSysMsgs,b.vSysMsgs);jce_copy_struct(a.iTime,b.iTime);



#include "Msg.hpp"
#endif
