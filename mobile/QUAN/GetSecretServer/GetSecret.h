// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.4.3 by WSRD Tencent.
// Generated from `GetSecret.jce'
// **********************************************************************

#ifndef __GETSECRET_H_
#define __GETSECRET_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "SecretBase.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "servant/TafCallbacks.h"


namespace QUAN
{
    struct SecretListKey : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.SecretListKey";
        }
        static string MD5()
        {
            return "c5d29a3a3b5e33926ecd936ff3153e6b";
        }
        SecretListKey(taf::Int64 lUId)
            :lUId(lUId)
        {
        }
        SecretListKey()
        :lUId(0)
        {
        }
        void resetDefautlt()
        {
            lUId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lUId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lUId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lUId,"lUId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lUId, false);
            return _os;
        }
    public:
        taf::Int64 lUId;
    };
    inline bool operator==(const SecretListKey&l, const SecretListKey&r)
    {
        return l.lUId == r.lUId;
    }
    inline bool operator!=(const SecretListKey&l, const SecretListKey&r)
    {
        return !(l == r);
    }

    struct SecretListValue : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.SecretListValue";
        }
        static string MD5()
        {
            return "488205c5f0426dc63932a388d1a6450a";
        }
        SecretListValue(const vector<taf::Int64> &vSecrets,const vector<taf::Int64> &vAccepts,taf::Int32 iLockCount,taf::Int64 lNextBeginId,taf::Int32 iPullTime,taf::Int32 iAcceptTime)
            :vSecrets(vSecrets),vAccepts(vAccepts),iLockCount(iLockCount),lNextBeginId(lNextBeginId),iPullTime(iPullTime),iAcceptTime(iAcceptTime)
        {
        }
        SecretListValue()
        :iLockCount(0),lNextBeginId(0),iPullTime(0),iAcceptTime(0)
        {
        }
        void resetDefautlt()
        {
            iLockCount = 0;
            lNextBeginId = 0;
            iPullTime = 0;
            iAcceptTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vSecrets, 0);
            _os.write(vAccepts, 1);
            _os.write(iLockCount, 2);
            _os.write(lNextBeginId, 3);
            _os.write(iPullTime, 4);
            _os.write(iAcceptTime, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vSecrets, 0, false);
            _is.read(vAccepts, 1, false);
            _is.read(iLockCount, 2, false);
            _is.read(lNextBeginId, 3, false);
            _is.read(iPullTime, 4, false);
            _is.read(iAcceptTime, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vSecrets,"vSecrets");
            _ds.display(vAccepts,"vAccepts");
            _ds.display(iLockCount,"iLockCount");
            _ds.display(lNextBeginId,"lNextBeginId");
            _ds.display(iPullTime,"iPullTime");
            _ds.display(iAcceptTime,"iAcceptTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vSecrets, true);
            _ds.displaySimple(vAccepts, true);
            _ds.displaySimple(iLockCount, true);
            _ds.displaySimple(lNextBeginId, true);
            _ds.displaySimple(iPullTime, true);
            _ds.displaySimple(iAcceptTime, false);
            return _os;
        }
    public:
        vector<taf::Int64> vSecrets;
        vector<taf::Int64> vAccepts;
        taf::Int32 iLockCount;
        taf::Int64 lNextBeginId;
        taf::Int32 iPullTime;
        taf::Int32 iAcceptTime;
    };
    inline bool operator==(const SecretListValue&l, const SecretListValue&r)
    {
        return l.vSecrets == r.vSecrets && l.vAccepts == r.vAccepts && l.iLockCount == r.iLockCount && l.lNextBeginId == r.lNextBeginId && l.iPullTime == r.iPullTime && l.iAcceptTime == r.iAcceptTime;
    }
    inline bool operator!=(const SecretListValue&l, const SecretListValue&r)
    {
        return !(l == r);
    }

    struct CircleListKey : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.CircleListKey";
        }
        static string MD5()
        {
            return "c5d29a3a3b5e33926ecd936ff3153e6b";
        }
        CircleListKey(taf::Int64 lCircleId)
            :lCircleId(lCircleId)
        {
        }
        CircleListKey()
        :lCircleId(0)
        {
        }
        void resetDefautlt()
        {
            lCircleId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lCircleId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lCircleId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lCircleId,"lCircleId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lCircleId, false);
            return _os;
        }
    public:
        taf::Int64 lCircleId;
    };
    inline bool operator==(const CircleListKey&l, const CircleListKey&r)
    {
        return l.lCircleId == r.lCircleId;
    }
    inline bool operator!=(const CircleListKey&l, const CircleListKey&r)
    {
        return !(l == r);
    }

    struct CircleListValue : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.CircleListValue";
        }
        static string MD5()
        {
            return "99dfcb196c9e99ea934372574238ec97";
        }
        CircleListValue(const vector<taf::Int64> &vSecrets,taf::Int32 iTime)
            :vSecrets(vSecrets),iTime(iTime)
        {
        }
        CircleListValue()
        :iTime(0)
        {
        }
        void resetDefautlt()
        {
            iTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vSecrets, 0);
            _os.write(iTime, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vSecrets, 0, false);
            _is.read(iTime, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vSecrets,"vSecrets");
            _ds.display(iTime,"iTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vSecrets, true);
            _ds.displaySimple(iTime, false);
            return _os;
        }
    public:
        vector<taf::Int64> vSecrets;
        taf::Int32 iTime;
    };
    inline bool operator==(const CircleListValue&l, const CircleListValue&r)
    {
        return l.vSecrets == r.vSecrets && l.iTime == r.iTime;
    }
    inline bool operator!=(const CircleListValue&l, const CircleListValue&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class GetSecretPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~GetSecretPrxCallback(){}
        virtual void callback_test(taf::Int32 ret)
        { throw std::runtime_error("callback_test() overloading incorrect."); }
        virtual void callback_test_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_test_exception() overloading incorrect."); }

        virtual void callback_getSecretList(taf::Int32 ret, const QUAN::SecretListRsp& tRsp)
        { throw std::runtime_error("callback_getSecretList() overloading incorrect."); }
        virtual void callback_getSecretList_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getSecretList_exception() overloading incorrect."); }

        virtual void callback_setUserSecretToCache(taf::Int32 ret)
        { throw std::runtime_error("callback_setUserSecretToCache() overloading incorrect."); }
        virtual void callback_setUserSecretToCache_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_setUserSecretToCache_exception() overloading incorrect."); }

        virtual void callback_getUserSingleSecret(taf::Int32 ret, const QUAN::SglSecretRsp& tRsp)
        { throw std::runtime_error("callback_getUserSingleSecret() overloading incorrect."); }
        virtual void callback_getUserSingleSecret_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getUserSingleSecret_exception() overloading incorrect."); }

        virtual void callback_setUserSecretShare(taf::Int32 ret, const QUAN::ShareSecretRsp& tRsp)
        { throw std::runtime_error("callback_setUserSecretShare() overloading incorrect."); }
        virtual void callback_setUserSecretShare_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_setUserSecretShare_exception() overloading incorrect."); }

        virtual void callback_feedBack(taf::Int32 ret, const QUAN::FeedBackRsp& tRsp)
        { throw std::runtime_error("callback_feedBack() overloading incorrect."); }
        virtual void callback_feedBack_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_feedBack_exception() overloading incorrect."); }

        virtual void callback_getSystemList(taf::Int32 ret, const QUAN::SystemListRsp& tRsp)
        { throw std::runtime_error("callback_getSystemList() overloading incorrect."); }
        virtual void callback_getSystemList_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getSystemList_exception() overloading incorrect."); }

        virtual void callback_getAllSecretList(taf::Int32 ret, const QUAN::SecretListRsp& tRsp)
        { throw std::runtime_error("callback_getAllSecretList() overloading incorrect."); }
        virtual void callback_getAllSecretList_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getAllSecretList_exception() overloading incorrect."); }

        virtual void callback_getCircleList(taf::Int32 ret, const QUAN::GetCircleListRsp& tRsp)
        { throw std::runtime_error("callback_getCircleList() overloading incorrect."); }
        virtual void callback_getCircleList_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getCircleList_exception() overloading incorrect."); }

        virtual void callback_cleanCircleIdCache(taf::Int32 ret)
        { throw std::runtime_error("callback_cleanCircleIdCache() overloading incorrect."); }
        virtual void callback_cleanCircleIdCache_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_cleanCircleIdCache_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<GetSecretPrxCallback> GetSecretPrxCallbackPtr;

    /* callback of lambda_async support proxy for client */
    template<typename ...Args>
    class GetSecretPrxCallbackImp:public GetSecretPrxCallback,public tafAsync::TafCallback<Args...>
    {
    public:
        virtual void callback_test(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_test_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getSecretList(taf::Int32 ret, const QUAN::SecretListRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getSecretList_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_setUserSecretToCache(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_setUserSecretToCache_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getUserSingleSecret(taf::Int32 ret, const QUAN::SglSecretRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getUserSingleSecret_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_setUserSecretShare(taf::Int32 ret, const QUAN::ShareSecretRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_setUserSecretShare_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_feedBack(taf::Int32 ret, const QUAN::FeedBackRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_feedBack_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getSystemList(taf::Int32 ret, const QUAN::SystemListRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getSystemList_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getAllSecretList(taf::Int32 ret, const QUAN::SecretListRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getAllSecretList_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getCircleList(taf::Int32 ret, const QUAN::GetCircleListRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getCircleList_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_cleanCircleIdCache(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_cleanCircleIdCache_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

    };
    /* proxy for client */
    class GetSecretProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        typedef GetSecretPrxCallbackImp<taf::Int32> taf_testCb;
        typedef GetSecretPrxCallbackImp<taf::Int32, const QUAN::SecretListRsp&> taf_getSecretListCb;
        typedef GetSecretPrxCallbackImp<taf::Int32> taf_setUserSecretToCacheCb;
        typedef GetSecretPrxCallbackImp<taf::Int32, const QUAN::SglSecretRsp&> taf_getUserSingleSecretCb;
        typedef GetSecretPrxCallbackImp<taf::Int32, const QUAN::ShareSecretRsp&> taf_setUserSecretShareCb;
        typedef GetSecretPrxCallbackImp<taf::Int32, const QUAN::FeedBackRsp&> taf_feedBackCb;
        typedef GetSecretPrxCallbackImp<taf::Int32, const QUAN::SystemListRsp&> taf_getSystemListCb;
        typedef GetSecretPrxCallbackImp<taf::Int32, const QUAN::SecretListRsp&> taf_getAllSecretListCb;
        typedef GetSecretPrxCallbackImp<taf::Int32, const QUAN::GetCircleListRsp&> taf_getCircleListCb;
        typedef GetSecretPrxCallbackImp<taf::Int32> taf_cleanCircleIdCacheCb;

        taf::Int32 test(taf::Int64 id,const map<string, string> &context = TAF_CONTEXT());
        void async_test(GetSecretPrxCallbackPtr callback,taf::Int64 id,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_testCb> async_test(taf::Int64 id,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_testCb> cb=new taf_testCb; async_test(cb,id,context);return cb; }

        taf::Int32 getSecretList(const QUAN::SecretListReq & tReq,QUAN::SecretListRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getSecretList(GetSecretPrxCallbackPtr callback,const QUAN::SecretListReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getSecretListCb> async_getSecretList(const QUAN::SecretListReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getSecretListCb> cb=new taf_getSecretListCb; async_getSecretList(cb,tReq,context);return cb; }

        taf::Int32 setUserSecretToCache(const QUAN::UserSecretCacheReq & tReq,const map<string, string> &context = TAF_CONTEXT());
        void async_setUserSecretToCache(GetSecretPrxCallbackPtr callback,const QUAN::UserSecretCacheReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_setUserSecretToCacheCb> async_setUserSecretToCache(const QUAN::UserSecretCacheReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_setUserSecretToCacheCb> cb=new taf_setUserSecretToCacheCb; async_setUserSecretToCache(cb,tReq,context);return cb; }

        taf::Int32 getUserSingleSecret(const QUAN::SglSecretReq & tReq,QUAN::SglSecretRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getUserSingleSecret(GetSecretPrxCallbackPtr callback,const QUAN::SglSecretReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getUserSingleSecretCb> async_getUserSingleSecret(const QUAN::SglSecretReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getUserSingleSecretCb> cb=new taf_getUserSingleSecretCb; async_getUserSingleSecret(cb,tReq,context);return cb; }

        taf::Int32 setUserSecretShare(const QUAN::ShareSecretReq & tReq,QUAN::ShareSecretRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_setUserSecretShare(GetSecretPrxCallbackPtr callback,const QUAN::ShareSecretReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_setUserSecretShareCb> async_setUserSecretShare(const QUAN::ShareSecretReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_setUserSecretShareCb> cb=new taf_setUserSecretShareCb; async_setUserSecretShare(cb,tReq,context);return cb; }

        taf::Int32 feedBack(const QUAN::FeedBackReq & tReq,QUAN::FeedBackRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_feedBack(GetSecretPrxCallbackPtr callback,const QUAN::FeedBackReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_feedBackCb> async_feedBack(const QUAN::FeedBackReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_feedBackCb> cb=new taf_feedBackCb; async_feedBack(cb,tReq,context);return cb; }

        taf::Int32 getSystemList(const QUAN::SystemListReq & tReq,QUAN::SystemListRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getSystemList(GetSecretPrxCallbackPtr callback,const QUAN::SystemListReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getSystemListCb> async_getSystemList(const QUAN::SystemListReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getSystemListCb> cb=new taf_getSystemListCb; async_getSystemList(cb,tReq,context);return cb; }

        taf::Int32 getAllSecretList(const QUAN::SecretListReq & tReq,QUAN::SecretListRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getAllSecretList(GetSecretPrxCallbackPtr callback,const QUAN::SecretListReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getAllSecretListCb> async_getAllSecretList(const QUAN::SecretListReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getAllSecretListCb> cb=new taf_getAllSecretListCb; async_getAllSecretList(cb,tReq,context);return cb; }

        taf::Int32 getCircleList(const QUAN::GetCircleListReq & tReq,QUAN::GetCircleListRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getCircleList(GetSecretPrxCallbackPtr callback,const QUAN::GetCircleListReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getCircleListCb> async_getCircleList(const QUAN::GetCircleListReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getCircleListCb> cb=new taf_getCircleListCb; async_getCircleList(cb,tReq,context);return cb; }

        taf::Int32 cleanCircleIdCache(taf::Int64 lCircleId,const map<string, string> &context = TAF_CONTEXT());
        void async_cleanCircleIdCache(GetSecretPrxCallbackPtr callback,taf::Int64 lCircleId,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_cleanCircleIdCacheCb> async_cleanCircleIdCache(taf::Int64 lCircleId,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_cleanCircleIdCacheCb> cb=new taf_cleanCircleIdCacheCb; async_cleanCircleIdCache(cb,lCircleId,context);return cb; }

        GetSecretProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<GetSecretProxy> GetSecretPrx;

    /* servant for server */
    class GetSecret : public taf::Servant
    {
    public:
        virtual ~GetSecret(){}
        virtual taf::Int32 test(taf::Int64 id,taf::JceCurrentPtr current) = 0;
        static void async_response_test(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 getSecretList(const QUAN::SecretListReq & tReq,QUAN::SecretListRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getSecretList(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::SecretListRsp &tRsp);

        virtual taf::Int32 setUserSecretToCache(const QUAN::UserSecretCacheReq & tReq,taf::JceCurrentPtr current) = 0;
        static void async_response_setUserSecretToCache(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 getUserSingleSecret(const QUAN::SglSecretReq & tReq,QUAN::SglSecretRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getUserSingleSecret(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::SglSecretRsp &tRsp);

        virtual taf::Int32 setUserSecretShare(const QUAN::ShareSecretReq & tReq,QUAN::ShareSecretRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_setUserSecretShare(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::ShareSecretRsp &tRsp);

        virtual taf::Int32 feedBack(const QUAN::FeedBackReq & tReq,QUAN::FeedBackRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_feedBack(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::FeedBackRsp &tRsp);

        virtual taf::Int32 getSystemList(const QUAN::SystemListReq & tReq,QUAN::SystemListRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getSystemList(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::SystemListRsp &tRsp);

        virtual taf::Int32 getAllSecretList(const QUAN::SecretListReq & tReq,QUAN::SecretListRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getAllSecretList(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::SecretListRsp &tRsp);

        virtual taf::Int32 getCircleList(const QUAN::GetCircleListReq & tReq,QUAN::GetCircleListRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getCircleList(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::GetCircleListRsp &tRsp);

        virtual taf::Int32 cleanCircleIdCache(taf::Int64 lCircleId,taf::JceCurrentPtr current) = 0;
        static void async_response_cleanCircleIdCache(taf::JceCurrentPtr current, taf::Int32 _ret);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}

#define QUAN_SecretListKey_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lUId,b.lUId);

#define QUAN_SecretListValue_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vSecrets,b.vSecrets);jce_copy_struct(a.vAccepts,b.vAccepts);jce_copy_struct(a.iLockCount,b.iLockCount);jce_copy_struct(a.lNextBeginId,b.lNextBeginId);jce_copy_struct(a.iPullTime,b.iPullTime);jce_copy_struct(a.iAcceptTime,b.iAcceptTime);

#define QUAN_CircleListKey_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lCircleId,b.lCircleId);

#define QUAN_CircleListValue_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vSecrets,b.vSecrets);jce_copy_struct(a.iTime,b.iTime);



#include "GetSecret.hpp"
#endif
