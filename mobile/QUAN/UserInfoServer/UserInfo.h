// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.4.3 by WSRD Tencent.
// Generated from `UserInfo.jce'
// **********************************************************************

#ifndef __USERINFO_H_
#define __USERINFO_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "SecretBase.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "servant/TafCallbacks.h"


namespace QUAN
{
    enum FRDRELAT
    {
        ONE = 0,
        TWO = 1,
        ALL = 3,
    };
    inline string etos(const FRDRELAT & e)
    {
        switch(e)
        {
            case ONE: return "ONE";
            case TWO: return "TWO";
            case ALL: return "ALL";
            default: return "";
        }
    }
    inline int stoe(const string & s, FRDRELAT & e)
    {
        if(s == "ONE")  { e=ONE; return 0;}
        if(s == "TWO")  { e=TWO; return 0;}
        if(s == "ALL")  { e=ALL; return 0;}

        return -1;
    }

    struct FriendsListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.FriendsListReq";
        }
        static string MD5()
        {
            return "d197530328dd0b3f17da06cd9f12a4cb";
        }
        FriendsListReq(const QUAN::UserId &tUserId,taf::Int32 iRelat)
            :tUserId(tUserId),iRelat(iRelat)
        {
        }
        FriendsListReq()
        :iRelat(0)
        {
        }
        void resetDefautlt()
        {
            iRelat = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(iRelat, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(iRelat, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(iRelat,"iRelat");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(iRelat, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        taf::Int32 iRelat;
    };
    inline bool operator==(const FriendsListReq&l, const FriendsListReq&r)
    {
        return l.tUserId == r.tUserId && l.iRelat == r.iRelat;
    }
    inline bool operator!=(const FriendsListReq&l, const FriendsListReq&r)
    {
        return !(l == r);
    }

    struct CacheKey : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.CacheKey";
        }
        static string MD5()
        {
            return "c5d29a3a3b5e33926ecd936ff3153e6b";
        }
        CacheKey(taf::Int64 lId)
            :lId(lId)
        {
        }
        CacheKey()
        :lId(0)
        {
        }
        void resetDefautlt()
        {
            lId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lId,"lId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lId, false);
            return _os;
        }
    public:
        taf::Int64 lId;
    };
    inline bool operator==(const CacheKey&l, const CacheKey&r)
    {
        return l.lId == r.lId;
    }
    inline bool operator!=(const CacheKey&l, const CacheKey&r)
    {
        return !(l == r);
    }

    struct FriendListCacheValue : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.FriendListCacheValue";
        }
        static string MD5()
        {
            return "23b00538775449144c6cdc285363fd8b";
        }
        FriendListCacheValue(const vector<QUAN::FriendsList> &vPostFriends,const vector<QUAN::FriendsList> &vFavorFriends,taf::Int32 iTimespan)
            :vPostFriends(vPostFriends),vFavorFriends(vFavorFriends),iTimespan(iTimespan)
        {
        }
        FriendListCacheValue()
        :iTimespan(-1)
        {
        }
        void resetDefautlt()
        {
            iTimespan = -1;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vPostFriends, 0);
            _os.write(vFavorFriends, 1);
            _os.write(iTimespan, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vPostFriends, 0, false);
            _is.read(vFavorFriends, 1, false);
            _is.read(iTimespan, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vPostFriends,"vPostFriends");
            _ds.display(vFavorFriends,"vFavorFriends");
            _ds.display(iTimespan,"iTimespan");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vPostFriends, true);
            _ds.displaySimple(vFavorFriends, true);
            _ds.displaySimple(iTimespan, false);
            return _os;
        }
    public:
        vector<QUAN::FriendsList> vPostFriends;
        vector<QUAN::FriendsList> vFavorFriends;
        taf::Int32 iTimespan;
    };
    inline bool operator==(const FriendListCacheValue&l, const FriendListCacheValue&r)
    {
        return l.vPostFriends == r.vPostFriends && l.vFavorFriends == r.vFavorFriends && l.iTimespan == r.iTimespan;
    }
    inline bool operator!=(const FriendListCacheValue&l, const FriendListCacheValue&r)
    {
        return !(l == r);
    }

    struct FollowerListCacheValue : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.FollowerListCacheValue";
        }
        static string MD5()
        {
            return "102ec22135ddf8a59764b46d8d351f7a";
        }
        FollowerListCacheValue(const vector<QUAN::FriendsList> &vFollowers,taf::Int32 iTimespan)
            :vFollowers(vFollowers),iTimespan(iTimespan)
        {
        }
        FollowerListCacheValue()
        :iTimespan(-1)
        {
        }
        void resetDefautlt()
        {
            iTimespan = -1;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vFollowers, 0);
            _os.write(iTimespan, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vFollowers, 0, false);
            _is.read(iTimespan, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vFollowers,"vFollowers");
            _ds.display(iTimespan,"iTimespan");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vFollowers, true);
            _ds.displaySimple(iTimespan, false);
            return _os;
        }
    public:
        vector<QUAN::FriendsList> vFollowers;
        taf::Int32 iTimespan;
    };
    inline bool operator==(const FollowerListCacheValue&l, const FollowerListCacheValue&r)
    {
        return l.vFollowers == r.vFollowers && l.iTimespan == r.iTimespan;
    }
    inline bool operator!=(const FollowerListCacheValue&l, const FollowerListCacheValue&r)
    {
        return !(l == r);
    }

    struct UserInfoCacheValue : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.UserInfoCacheValue";
        }
        static string MD5()
        {
            return "8c93d07367bac72d4f4c2892aae9f0e4";
        }
        UserInfoCacheValue(taf::Int32 iPostTime,taf::Int32 iFavorTime,taf::Int32 iVisitTime,taf::Int32 iRegistTime)
            :iPostTime(iPostTime),iFavorTime(iFavorTime),iVisitTime(iVisitTime),iRegistTime(iRegistTime)
        {
        }
        UserInfoCacheValue()
        :iPostTime(-1),iFavorTime(-1),iVisitTime(-1),iRegistTime(-1)
        {
        }
        void resetDefautlt()
        {
            iPostTime = -1;
            iFavorTime = -1;
            iVisitTime = -1;
            iRegistTime = -1;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iPostTime, 0);
            _os.write(iFavorTime, 1);
            _os.write(iVisitTime, 2);
            _os.write(iRegistTime, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iPostTime, 0, false);
            _is.read(iFavorTime, 1, false);
            _is.read(iVisitTime, 2, false);
            _is.read(iRegistTime, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iPostTime,"iPostTime");
            _ds.display(iFavorTime,"iFavorTime");
            _ds.display(iVisitTime,"iVisitTime");
            _ds.display(iRegistTime,"iRegistTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iPostTime, true);
            _ds.displaySimple(iFavorTime, true);
            _ds.displaySimple(iVisitTime, true);
            _ds.displaySimple(iRegistTime, false);
            return _os;
        }
    public:
        taf::Int32 iPostTime;
        taf::Int32 iFavorTime;
        taf::Int32 iVisitTime;
        taf::Int32 iRegistTime;
    };
    inline bool operator==(const UserInfoCacheValue&l, const UserInfoCacheValue&r)
    {
        return l.iPostTime == r.iPostTime && l.iFavorTime == r.iFavorTime && l.iVisitTime == r.iVisitTime && l.iRegistTime == r.iRegistTime;
    }
    inline bool operator!=(const UserInfoCacheValue&l, const UserInfoCacheValue&r)
    {
        return !(l == r);
    }

    struct FriendsListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.FriendsListRsp";
        }
        static string MD5()
        {
            return "00a67620f76fea77c056586a23e81b73";
        }
        FriendsListRsp(const vector<QUAN::FriendsList> &vFriends)
            :vFriends(vFriends)
        {
        }
        FriendsListRsp()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vFriends, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vFriends, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vFriends,"vFriends");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vFriends, false);
            return _os;
        }
    public:
        vector<QUAN::FriendsList> vFriends;
    };
    inline bool operator==(const FriendsListRsp&l, const FriendsListRsp&r)
    {
        return l.vFriends == r.vFriends;
    }
    inline bool operator!=(const FriendsListRsp&l, const FriendsListRsp&r)
    {
        return !(l == r);
    }

    struct UpdatePostTimeReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.UpdatePostTimeReq";
        }
        static string MD5()
        {
            return "b60948316e6b381c4405fcf043850c7c";
        }
        UpdatePostTimeReq(taf::Int64 lId,const vector<taf::Int64> &vFollowerId)
            :lId(lId),vFollowerId(vFollowerId)
        {
        }
        UpdatePostTimeReq()
        :lId(0)
        {
        }
        void resetDefautlt()
        {
            lId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lId, 0);
            _os.write(vFollowerId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lId, 0, false);
            _is.read(vFollowerId, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lId,"lId");
            _ds.display(vFollowerId,"vFollowerId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lId, true);
            _ds.displaySimple(vFollowerId, false);
            return _os;
        }
    public:
        taf::Int64 lId;
        vector<taf::Int64> vFollowerId;
    };
    inline bool operator==(const UpdatePostTimeReq&l, const UpdatePostTimeReq&r)
    {
        return l.lId == r.lId && l.vFollowerId == r.vFollowerId;
    }
    inline bool operator!=(const UpdatePostTimeReq&l, const UpdatePostTimeReq&r)
    {
        return !(l == r);
    }

    struct UpdateFavorTimeReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.UpdateFavorTimeReq";
        }
        static string MD5()
        {
            return "b60948316e6b381c4405fcf043850c7c";
        }
        UpdateFavorTimeReq(taf::Int64 lId,const vector<taf::Int64> &vFollowerId)
            :lId(lId),vFollowerId(vFollowerId)
        {
        }
        UpdateFavorTimeReq()
        :lId(0)
        {
        }
        void resetDefautlt()
        {
            lId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lId, 0);
            _os.write(vFollowerId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lId, 0, false);
            _is.read(vFollowerId, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lId,"lId");
            _ds.display(vFollowerId,"vFollowerId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lId, true);
            _ds.displaySimple(vFollowerId, false);
            return _os;
        }
    public:
        taf::Int64 lId;
        vector<taf::Int64> vFollowerId;
    };
    inline bool operator==(const UpdateFavorTimeReq&l, const UpdateFavorTimeReq&r)
    {
        return l.lId == r.lId && l.vFollowerId == r.vFollowerId;
    }
    inline bool operator!=(const UpdateFavorTimeReq&l, const UpdateFavorTimeReq&r)
    {
        return !(l == r);
    }

    struct GetActiveFriendsReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.GetActiveFriendsReq";
        }
        static string MD5()
        {
            return "ddf0c6ce496e440ea4c71434ff05ccb4";
        }
        GetActiveFriendsReq(taf::Int64 lId,taf::Bool bLoadFromDb)
            :lId(lId),bLoadFromDb(bLoadFromDb)
        {
        }
        GetActiveFriendsReq()
        :lId(0),bLoadFromDb(false)
        {
        }
        void resetDefautlt()
        {
            lId = 0;
            bLoadFromDb = false;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lId, 0);
            _os.write(bLoadFromDb, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lId, 0, false);
            _is.read(bLoadFromDb, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lId,"lId");
            _ds.display(bLoadFromDb,"bLoadFromDb");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lId, true);
            _ds.displaySimple(bLoadFromDb, false);
            return _os;
        }
    public:
        taf::Int64 lId;
        taf::Bool bLoadFromDb;
    };
    inline bool operator==(const GetActiveFriendsReq&l, const GetActiveFriendsReq&r)
    {
        return l.lId == r.lId && l.bLoadFromDb == r.bLoadFromDb;
    }
    inline bool operator!=(const GetActiveFriendsReq&l, const GetActiveFriendsReq&r)
    {
        return !(l == r);
    }

    struct GetActiveFriendsRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.GetActiveFriendsRsp";
        }
        static string MD5()
        {
            return "23b00538775449144c6cdc285363fd8b";
        }
        GetActiveFriendsRsp(const vector<QUAN::FriendsList> &vPostFriends,const vector<QUAN::FriendsList> &vFavorFriends,taf::Int32 iRegistTime)
            :vPostFriends(vPostFriends),vFavorFriends(vFavorFriends),iRegistTime(iRegistTime)
        {
        }
        GetActiveFriendsRsp()
        :iRegistTime(0)
        {
        }
        void resetDefautlt()
        {
            iRegistTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vPostFriends, 0);
            _os.write(vFavorFriends, 1);
            _os.write(iRegistTime, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vPostFriends, 0, false);
            _is.read(vFavorFriends, 1, false);
            _is.read(iRegistTime, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vPostFriends,"vPostFriends");
            _ds.display(vFavorFriends,"vFavorFriends");
            _ds.display(iRegistTime,"iRegistTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vPostFriends, true);
            _ds.displaySimple(vFavorFriends, true);
            _ds.displaySimple(iRegistTime, false);
            return _os;
        }
    public:
        vector<QUAN::FriendsList> vPostFriends;
        vector<QUAN::FriendsList> vFavorFriends;
        taf::Int32 iRegistTime;
    };
    inline bool operator==(const GetActiveFriendsRsp&l, const GetActiveFriendsRsp&r)
    {
        return l.vPostFriends == r.vPostFriends && l.vFavorFriends == r.vFavorFriends && l.iRegistTime == r.iRegistTime;
    }
    inline bool operator!=(const GetActiveFriendsRsp&l, const GetActiveFriendsRsp&r)
    {
        return !(l == r);
    }

    struct GetActiveFollowersReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.GetActiveFollowersReq";
        }
        static string MD5()
        {
            return "c5d29a3a3b5e33926ecd936ff3153e6b";
        }
        GetActiveFollowersReq(taf::Int64 lId)
            :lId(lId)
        {
        }
        GetActiveFollowersReq()
        :lId(0)
        {
        }
        void resetDefautlt()
        {
            lId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lId,"lId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lId, false);
            return _os;
        }
    public:
        taf::Int64 lId;
    };
    inline bool operator==(const GetActiveFollowersReq&l, const GetActiveFollowersReq&r)
    {
        return l.lId == r.lId;
    }
    inline bool operator!=(const GetActiveFollowersReq&l, const GetActiveFollowersReq&r)
    {
        return !(l == r);
    }

    struct GetActiveFollowersRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.GetActiveFollowersRsp";
        }
        static string MD5()
        {
            return "00a67620f76fea77c056586a23e81b73";
        }
        GetActiveFollowersRsp(const vector<QUAN::FriendsList> &vFollowers)
            :vFollowers(vFollowers)
        {
        }
        GetActiveFollowersRsp()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vFollowers, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vFollowers, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vFollowers,"vFollowers");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vFollowers, false);
            return _os;
        }
    public:
        vector<QUAN::FriendsList> vFollowers;
    };
    inline bool operator==(const GetActiveFollowersRsp&l, const GetActiveFollowersRsp&r)
    {
        return l.vFollowers == r.vFollowers;
    }
    inline bool operator!=(const GetActiveFollowersRsp&l, const GetActiveFollowersRsp&r)
    {
        return !(l == r);
    }

    struct SetActiveReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.SetActiveReq";
        }
        static string MD5()
        {
            return "c5d29a3a3b5e33926ecd936ff3153e6b";
        }
        SetActiveReq(taf::Int64 lId)
            :lId(lId)
        {
        }
        SetActiveReq()
        :lId(0)
        {
        }
        void resetDefautlt()
        {
            lId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lId,"lId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lId, false);
            return _os;
        }
    public:
        taf::Int64 lId;
    };
    inline bool operator==(const SetActiveReq&l, const SetActiveReq&r)
    {
        return l.lId == r.lId;
    }
    inline bool operator!=(const SetActiveReq&l, const SetActiveReq&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class UserInfoPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~UserInfoPrxCallback(){}
        virtual void callback_postUserEnroll(taf::Int32 ret, const QUAN::UserEnrollRsp& tRsp)
        { throw std::runtime_error("callback_postUserEnroll() overloading incorrect."); }
        virtual void callback_postUserEnroll_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_postUserEnroll_exception() overloading incorrect."); }

        virtual void callback_postUserLogin(taf::Int32 ret, const QUAN::UserLoginRsp& tRsp)
        { throw std::runtime_error("callback_postUserLogin() overloading incorrect."); }
        virtual void callback_postUserLogin_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_postUserLogin_exception() overloading incorrect."); }

        virtual void callback_postAddressList(taf::Int32 ret, const QUAN::PostAddressListRsp& tRsp)
        { throw std::runtime_error("callback_postAddressList() overloading incorrect."); }
        virtual void callback_postAddressList_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_postAddressList_exception() overloading incorrect."); }

        virtual void callback_getFriendsList(taf::Int32 ret, const QUAN::FriendsListRsp& tRsp)
        { throw std::runtime_error("callback_getFriendsList() overloading incorrect."); }
        virtual void callback_getFriendsList_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getFriendsList_exception() overloading incorrect."); }

        virtual void callback_verifyToken(taf::Int32 ret, taf::Int64 lUId)
        { throw std::runtime_error("callback_verifyToken() overloading incorrect."); }
        virtual void callback_verifyToken_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_verifyToken_exception() overloading incorrect."); }

        virtual void callback_updatePostTime(taf::Int32 ret)
        { throw std::runtime_error("callback_updatePostTime() overloading incorrect."); }
        virtual void callback_updatePostTime_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_updatePostTime_exception() overloading incorrect."); }

        virtual void callback_updateFavorTime(taf::Int32 ret)
        { throw std::runtime_error("callback_updateFavorTime() overloading incorrect."); }
        virtual void callback_updateFavorTime_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_updateFavorTime_exception() overloading incorrect."); }

        virtual void callback_getActiveFriends(taf::Int32 ret, const QUAN::GetActiveFriendsRsp& tRsp)
        { throw std::runtime_error("callback_getActiveFriends() overloading incorrect."); }
        virtual void callback_getActiveFriends_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getActiveFriends_exception() overloading incorrect."); }

        virtual void callback_getActiveFollowers(taf::Int32 ret, const QUAN::GetActiveFollowersRsp& tRsp)
        { throw std::runtime_error("callback_getActiveFollowers() overloading incorrect."); }
        virtual void callback_getActiveFollowers_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getActiveFollowers_exception() overloading incorrect."); }

        virtual void callback_setActive(taf::Int32 ret)
        { throw std::runtime_error("callback_setActive() overloading incorrect."); }
        virtual void callback_setActive_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_setActive_exception() overloading incorrect."); }

        virtual void callback_clearUserCache(taf::Int32 ret)
        { throw std::runtime_error("callback_clearUserCache() overloading incorrect."); }
        virtual void callback_clearUserCache_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_clearUserCache_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<UserInfoPrxCallback> UserInfoPrxCallbackPtr;

    /* callback of lambda_async support proxy for client */
    template<typename ...Args>
    class UserInfoPrxCallbackImp:public UserInfoPrxCallback,public tafAsync::TafCallback<Args...>
    {
    public:
        virtual void callback_postUserEnroll(taf::Int32 ret, const QUAN::UserEnrollRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_postUserEnroll_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_postUserLogin(taf::Int32 ret, const QUAN::UserLoginRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_postUserLogin_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_postAddressList(taf::Int32 ret, const QUAN::PostAddressListRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_postAddressList_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getFriendsList(taf::Int32 ret, const QUAN::FriendsListRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getFriendsList_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_verifyToken(taf::Int32 ret, taf::Int64 lUId)
        { tafAsync::TafCallback<Args...>::doCalls(ret,lUId);}
        virtual void callback_verifyToken_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_updatePostTime(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_updatePostTime_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_updateFavorTime(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_updateFavorTime_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getActiveFriends(taf::Int32 ret, const QUAN::GetActiveFriendsRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getActiveFriends_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getActiveFollowers(taf::Int32 ret, const QUAN::GetActiveFollowersRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getActiveFollowers_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_setActive(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_setActive_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_clearUserCache(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_clearUserCache_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

    };
    /* proxy for client */
    class UserInfoProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        typedef UserInfoPrxCallbackImp<taf::Int32, const QUAN::UserEnrollRsp&> taf_postUserEnrollCb;
        typedef UserInfoPrxCallbackImp<taf::Int32, const QUAN::UserLoginRsp&> taf_postUserLoginCb;
        typedef UserInfoPrxCallbackImp<taf::Int32, const QUAN::PostAddressListRsp&> taf_postAddressListCb;
        typedef UserInfoPrxCallbackImp<taf::Int32, const QUAN::FriendsListRsp&> taf_getFriendsListCb;
        typedef UserInfoPrxCallbackImp<taf::Int32, taf::Int64> taf_verifyTokenCb;
        typedef UserInfoPrxCallbackImp<taf::Int32> taf_updatePostTimeCb;
        typedef UserInfoPrxCallbackImp<taf::Int32> taf_updateFavorTimeCb;
        typedef UserInfoPrxCallbackImp<taf::Int32, const QUAN::GetActiveFriendsRsp&> taf_getActiveFriendsCb;
        typedef UserInfoPrxCallbackImp<taf::Int32, const QUAN::GetActiveFollowersRsp&> taf_getActiveFollowersCb;
        typedef UserInfoPrxCallbackImp<taf::Int32> taf_setActiveCb;
        typedef UserInfoPrxCallbackImp<taf::Int32> taf_clearUserCacheCb;

        taf::Int32 postUserEnroll(const QUAN::UserEnrollReq & tReq,QUAN::UserEnrollRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_postUserEnroll(UserInfoPrxCallbackPtr callback,const QUAN::UserEnrollReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_postUserEnrollCb> async_postUserEnroll(const QUAN::UserEnrollReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_postUserEnrollCb> cb=new taf_postUserEnrollCb; async_postUserEnroll(cb,tReq,context);return cb; }

        taf::Int32 postUserLogin(const QUAN::UserLoginReq & tReq,QUAN::UserLoginRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_postUserLogin(UserInfoPrxCallbackPtr callback,const QUAN::UserLoginReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_postUserLoginCb> async_postUserLogin(const QUAN::UserLoginReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_postUserLoginCb> cb=new taf_postUserLoginCb; async_postUserLogin(cb,tReq,context);return cb; }

        taf::Int32 postAddressList(const QUAN::PostAddressListReq & tReq,QUAN::PostAddressListRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_postAddressList(UserInfoPrxCallbackPtr callback,const QUAN::PostAddressListReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_postAddressListCb> async_postAddressList(const QUAN::PostAddressListReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_postAddressListCb> cb=new taf_postAddressListCb; async_postAddressList(cb,tReq,context);return cb; }

        taf::Int32 getFriendsList(const QUAN::FriendsListReq & tReq,QUAN::FriendsListRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getFriendsList(UserInfoPrxCallbackPtr callback,const QUAN::FriendsListReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getFriendsListCb> async_getFriendsList(const QUAN::FriendsListReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getFriendsListCb> cb=new taf_getFriendsListCb; async_getFriendsList(cb,tReq,context);return cb; }

        taf::Int32 verifyToken(const QUAN::UserId & tId,taf::Int64 &lUId,const map<string, string> &context = TAF_CONTEXT());
        void async_verifyToken(UserInfoPrxCallbackPtr callback,const QUAN::UserId & tId,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_verifyTokenCb> async_verifyToken(const QUAN::UserId & tId,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_verifyTokenCb> cb=new taf_verifyTokenCb; async_verifyToken(cb,tId,context);return cb; }

        taf::Int32 updatePostTime(const QUAN::UpdatePostTimeReq & tReq,const map<string, string> &context = TAF_CONTEXT());
        void async_updatePostTime(UserInfoPrxCallbackPtr callback,const QUAN::UpdatePostTimeReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_updatePostTimeCb> async_updatePostTime(const QUAN::UpdatePostTimeReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_updatePostTimeCb> cb=new taf_updatePostTimeCb; async_updatePostTime(cb,tReq,context);return cb; }

        taf::Int32 updateFavorTime(const QUAN::UpdateFavorTimeReq & tReq,const map<string, string> &context = TAF_CONTEXT());
        void async_updateFavorTime(UserInfoPrxCallbackPtr callback,const QUAN::UpdateFavorTimeReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_updateFavorTimeCb> async_updateFavorTime(const QUAN::UpdateFavorTimeReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_updateFavorTimeCb> cb=new taf_updateFavorTimeCb; async_updateFavorTime(cb,tReq,context);return cb; }

        taf::Int32 getActiveFriends(const QUAN::GetActiveFriendsReq & tReq,QUAN::GetActiveFriendsRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getActiveFriends(UserInfoPrxCallbackPtr callback,const QUAN::GetActiveFriendsReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getActiveFriendsCb> async_getActiveFriends(const QUAN::GetActiveFriendsReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getActiveFriendsCb> cb=new taf_getActiveFriendsCb; async_getActiveFriends(cb,tReq,context);return cb; }

        taf::Int32 getActiveFollowers(const QUAN::GetActiveFollowersReq & tReq,QUAN::GetActiveFollowersRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getActiveFollowers(UserInfoPrxCallbackPtr callback,const QUAN::GetActiveFollowersReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getActiveFollowersCb> async_getActiveFollowers(const QUAN::GetActiveFollowersReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getActiveFollowersCb> cb=new taf_getActiveFollowersCb; async_getActiveFollowers(cb,tReq,context);return cb; }

        taf::Int32 setActive(const QUAN::SetActiveReq & tReq,const map<string, string> &context = TAF_CONTEXT());
        void async_setActive(UserInfoPrxCallbackPtr callback,const QUAN::SetActiveReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_setActiveCb> async_setActive(const QUAN::SetActiveReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_setActiveCb> cb=new taf_setActiveCb; async_setActive(cb,tReq,context);return cb; }

        taf::Int32 clearUserCache(taf::Int64 lUId,const map<string, string> &context = TAF_CONTEXT());
        void async_clearUserCache(UserInfoPrxCallbackPtr callback,taf::Int64 lUId,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_clearUserCacheCb> async_clearUserCache(taf::Int64 lUId,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_clearUserCacheCb> cb=new taf_clearUserCacheCb; async_clearUserCache(cb,lUId,context);return cb; }

        UserInfoProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<UserInfoProxy> UserInfoPrx;

    /* servant for server */
    class UserInfo : public taf::Servant
    {
    public:
        virtual ~UserInfo(){}
        virtual taf::Int32 postUserEnroll(const QUAN::UserEnrollReq & tReq,QUAN::UserEnrollRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_postUserEnroll(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::UserEnrollRsp &tRsp);

        virtual taf::Int32 postUserLogin(const QUAN::UserLoginReq & tReq,QUAN::UserLoginRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_postUserLogin(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::UserLoginRsp &tRsp);

        virtual taf::Int32 postAddressList(const QUAN::PostAddressListReq & tReq,QUAN::PostAddressListRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_postAddressList(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::PostAddressListRsp &tRsp);

        virtual taf::Int32 getFriendsList(const QUAN::FriendsListReq & tReq,QUAN::FriendsListRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getFriendsList(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::FriendsListRsp &tRsp);

        virtual taf::Int32 verifyToken(const QUAN::UserId & tId,taf::Int64 &lUId,taf::JceCurrentPtr current) = 0;
        static void async_response_verifyToken(taf::JceCurrentPtr current, taf::Int32 _ret, taf::Int64 lUId);

        virtual taf::Int32 updatePostTime(const QUAN::UpdatePostTimeReq & tReq,taf::JceCurrentPtr current) = 0;
        static void async_response_updatePostTime(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 updateFavorTime(const QUAN::UpdateFavorTimeReq & tReq,taf::JceCurrentPtr current) = 0;
        static void async_response_updateFavorTime(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 getActiveFriends(const QUAN::GetActiveFriendsReq & tReq,QUAN::GetActiveFriendsRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getActiveFriends(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::GetActiveFriendsRsp &tRsp);

        virtual taf::Int32 getActiveFollowers(const QUAN::GetActiveFollowersReq & tReq,QUAN::GetActiveFollowersRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getActiveFollowers(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::GetActiveFollowersRsp &tRsp);

        virtual taf::Int32 setActive(const QUAN::SetActiveReq & tReq,taf::JceCurrentPtr current) = 0;
        static void async_response_setActive(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 clearUserCache(taf::Int64 lUId,taf::JceCurrentPtr current) = 0;
        static void async_response_clearUserCache(taf::JceCurrentPtr current, taf::Int32 _ret);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}

#define QUAN_FriendsListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.iRelat,b.iRelat);

#define QUAN_CacheKey_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lId,b.lId);

#define QUAN_FriendListCacheValue_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vPostFriends,b.vPostFriends);jce_copy_struct(a.vFavorFriends,b.vFavorFriends);jce_copy_struct(a.iTimespan,b.iTimespan);

#define QUAN_FollowerListCacheValue_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vFollowers,b.vFollowers);jce_copy_struct(a.iTimespan,b.iTimespan);

#define QUAN_UserInfoCacheValue_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iPostTime,b.iPostTime);jce_copy_struct(a.iFavorTime,b.iFavorTime);jce_copy_struct(a.iVisitTime,b.iVisitTime);jce_copy_struct(a.iRegistTime,b.iRegistTime);

#define QUAN_FriendsListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vFriends,b.vFriends);

#define QUAN_UpdatePostTimeReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lId,b.lId);jce_copy_struct(a.vFollowerId,b.vFollowerId);

#define QUAN_UpdateFavorTimeReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lId,b.lId);jce_copy_struct(a.vFollowerId,b.vFollowerId);

#define QUAN_GetActiveFriendsReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lId,b.lId);jce_copy_struct(a.bLoadFromDb,b.bLoadFromDb);

#define QUAN_GetActiveFriendsRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vPostFriends,b.vPostFriends);jce_copy_struct(a.vFavorFriends,b.vFavorFriends);jce_copy_struct(a.iRegistTime,b.iRegistTime);

#define QUAN_GetActiveFollowersReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lId,b.lId);

#define QUAN_GetActiveFollowersRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vFollowers,b.vFollowers);

#define QUAN_SetActiveReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lId,b.lId);



#include "UserInfo.hpp"
#endif
