#include "SecretBase.jce"

module QUAN
{

    struct SecretListKey
    {
        0 optional long lUId;            // 用户ID
    };

    struct IdNum
    {
        0 optional long    lId;         // ID
        1 optional int     iNum;        // 计数
    };

    struct SIdRd
    {
        0 optional long    lSId;         // 帖子ID
        1 optional bool    isRead;       // 是否已读
    };

    struct SecretRelatMap
    {
        // 帖子Id
        // 发帖者ID
        0 optional map<long, IdNum>  mSId;    
        1 optional int iTime;                           // 上次更新hashmap时间
    };

    struct ContentRelatMap
    {
        // 评论ID
        // 帖子Id
        0 optional map<long, IdNum>  mCId;   
        1 optional int iTime;                           // 上次更新hashmap时间
    };

    struct SecretListValue
    {
        0 optional vector<SecretInfo> vSecrets;
        1 optional vector<SecretInfo> vAccepts;          // 用户自己的帖子列表
        2 optional SecretRelatMap     tFavorScrts;       // 点赞帖子关系
        3 optional ContentRelatMap    tFavorCnts;        // 点赞评论关系
        4 optional SecretRelatMap     tRemoveScrts;      // 移除关系
        5 optional long lNextBeginId;
        6 optional int iTime;                           // 上次更新hashmap时间
        7 optional int iAcceptTime;                     // 上次更新hashmap时间
    };

    struct ContentListKey
    {
        0 optional long lSId;       // 帖子ID
    };

    struct ContentListValue
    {
        0 optional vector<ContentInfo> vContents;
        1 optional int iFavorNum;
        2 optional int iCmtNum;
        3 optional int iTime;       //上次更新hashmap时间
    };

    interface Secret
    {
        int test(long lId);

        /**
        * 获取秘密列表
        * @param tReq      
        * @param tRsp
        * @return int     0成功，-1失败  
        */ 
        int getSecretList(SecretListReq tReq, out SecretListRsp tRsp);

        /**
        * 获取内容列表
        * @param tReq      
        * @param tRsp
        * @return int     0成功，-1失败  
        */ 
        int getSecretContent(ContentListReq tReq, out ContentListRsp tRsp);

        /**
        * 发表秘密
        * @param tReq      
        * @param tRsp
        * @return int     0成功，-1失败  
        */ 
        int postSecret(PostSecretReq tReq, out PostSecretRsp tRsp);

        /**
        * 发表评论
        * @param tReq      
        * @param tRsp
        * @return int     0成功，-1失败  
        */ 
        int postContent(PostContentReq tReq, out PostContentRsp tRsp);

        /**
        * 点赞
        * @param tReq      
        * @param tRsp
        * @return int     0成功，-1失败  
        */ 
        int postFavor(PostFavorReq tReq, out PostFavorRsp tRsp);

        /**
        * 举报
        * @param tReq      
        * @param tRsp
        * @return int     0成功，-1失败  
        */ 
        int postReport(PostReportReq tReq, out PostReportRsp tRsp);

        /**
        * 清除痕迹
        * @param tReq      
        * @param tRsp
        * @return int     0成功，-1失败  
        */ 
        int cleanTrail(CleanTrailReq tReq, out CleanTrailRsp tRsp);

        /**
        * 移除帖子
        * @param tReq      
        * @param tRsp
        * @return int     0成功，-1失败  
        */ 
        int removeSecret(RemoveSecretReq tReq, out RemoveSecretRsp tRsp);

        /**
        * 点赞关系
        * @param tReq      
        * @param tRsp
        * @return int     0成功，-1失败  
        */ 
        int getUserFavorRelat(long lUId, out SecretRelatMap tFavorScrts);
        /**
        * 移除关系
        * @param tReq      
        * @param tRsp
        * @return int     0成功，-1失败  
        */ 
        int getUserRemoveRelat(long lUId, out SecretRelatMap tRemoveScrts);

        /**
        * 批量获取用户帖子
        * @param tReq      
        * @param tRsp
        * @return int     0成功，-1失败  
        */ 
        int getUserBatchSecrets(long lUId, map<long,MsgRmd> mSIds, out vector<SecretInfo> vSecrets);

        /**
        * 根据帖子ID取帖子内容
        * @param tReq      
        * @param tRsp
        * @return int     0成功，-1失败  
        */ 
        int getUserSingleSecret(SglSecretReq tReq, out SglSecretRsp tRsp);

        /**
        * 一键分享记录
        * @param tReq      
        * @param tRsp
        * @return int     0成功，-1失败  
        */ 
        int setUserSecretShare(ShareSecretReq tReq, out ShareSecretRsp tRsp);

        /**
        * 发送帖子到用户收帖箱  
        * @param tReq      
        * @param tRsp
        * @return int     0成功，-1失败  
        */ 
        int setUserSecretToCache(UserSecretCacheReq tReq);

        /**
        * 反馈
        * @param tReq      
        * @param tRsp
        * @return int     0成功，-1失败  
        */ 
        int feedBack(FeedBackReq tReq, out FeedBackRsp tRsp);
    };

}; 
