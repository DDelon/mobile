// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.4.3 by WSRD Tencent.
// Generated from `SecretBase.jce'
// **********************************************************************

#ifndef __SECRETBASE_H_
#define __SECRETBASE_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "servant/TafCallbacks.h"


namespace QUAN
{
    enum GetType
    {
        GET_SECRET_ALL = 0,
        GET_SECRET_FRIENDS = 1,
    };
    inline string etos(const GetType & e)
    {
        switch(e)
        {
            case GET_SECRET_ALL: return "GET_SECRET_ALL";
            case GET_SECRET_FRIENDS: return "GET_SECRET_FRIENDS";
            default: return "";
        }
    }
    inline int stoe(const string & s, GetType & e)
    {
        if(s == "GET_SECRET_ALL")  { e=GET_SECRET_ALL; return 0;}
        if(s == "GET_SECRET_FRIENDS")  { e=GET_SECRET_FRIENDS; return 0;}

        return -1;
    }

    enum SType
    {
        FRIEND = 0,
        FFRIEND = 1,
        RECMD = 2,
        SYS = 3,
        ME = 4,
        GUIDE = 5,
        CRCLCK = 7,
        CIRCLE = 8,
        NONE = 6,
    };
    inline string etos(const SType & e)
    {
        switch(e)
        {
            case FRIEND: return "FRIEND";
            case FFRIEND: return "FFRIEND";
            case RECMD: return "RECMD";
            case SYS: return "SYS";
            case ME: return "ME";
            case GUIDE: return "GUIDE";
            case CRCLCK: return "CRCLCK";
            case CIRCLE: return "CIRCLE";
            case NONE: return "NONE";
            default: return "";
        }
    }
    inline int stoe(const string & s, SType & e)
    {
        if(s == "FRIEND")  { e=FRIEND; return 0;}
        if(s == "FFRIEND")  { e=FFRIEND; return 0;}
        if(s == "RECMD")  { e=RECMD; return 0;}
        if(s == "SYS")  { e=SYS; return 0;}
        if(s == "ME")  { e=ME; return 0;}
        if(s == "GUIDE")  { e=GUIDE; return 0;}
        if(s == "CRCLCK")  { e=CRCLCK; return 0;}
        if(s == "CIRCLE")  { e=CIRCLE; return 0;}
        if(s == "NONE")  { e=NONE; return 0;}

        return -1;
    }

    enum IdType
    {
        SECRET = 0,
        CONTENT = 1,
    };
    inline string etos(const IdType & e)
    {
        switch(e)
        {
            case SECRET: return "SECRET";
            case CONTENT: return "CONTENT";
            default: return "";
        }
    }
    inline int stoe(const string & s, IdType & e)
    {
        if(s == "SECRET")  { e=SECRET; return 0;}
        if(s == "CONTENT")  { e=CONTENT; return 0;}

        return -1;
    }

    enum FavorType
    {
        FAVORY = 0,
        FAVORN = 1,
        REPORTY = 2,
        REPORTN = 3,
        REMOVEY = 4,
        REMOVEN = 5,
        CLEANY = 6,
        CLEANN = 7,
    };
    inline string etos(const FavorType & e)
    {
        switch(e)
        {
            case FAVORY: return "FAVORY";
            case FAVORN: return "FAVORN";
            case REPORTY: return "REPORTY";
            case REPORTN: return "REPORTN";
            case REMOVEY: return "REMOVEY";
            case REMOVEN: return "REMOVEN";
            case CLEANY: return "CLEANY";
            case CLEANN: return "CLEANN";
            default: return "";
        }
    }
    inline int stoe(const string & s, FavorType & e)
    {
        if(s == "FAVORY")  { e=FAVORY; return 0;}
        if(s == "FAVORN")  { e=FAVORN; return 0;}
        if(s == "REPORTY")  { e=REPORTY; return 0;}
        if(s == "REPORTN")  { e=REPORTN; return 0;}
        if(s == "REMOVEY")  { e=REMOVEY; return 0;}
        if(s == "REMOVEN")  { e=REMOVEN; return 0;}
        if(s == "CLEANY")  { e=CLEANY; return 0;}
        if(s == "CLEANN")  { e=CLEANN; return 0;}

        return -1;
    }

    enum UserCacheType
    {
        USER_FAVORY = 0,
        USER_FAVORN = 1,
        USER_REMOVEY = 2,
        USER_POST = 3,
        USER_CONTENT = 4,
        USER_CLEAN = 5,
        USER_REMOVEY_CONT = 6,
    };
    inline string etos(const UserCacheType & e)
    {
        switch(e)
        {
            case USER_FAVORY: return "USER_FAVORY";
            case USER_FAVORN: return "USER_FAVORN";
            case USER_REMOVEY: return "USER_REMOVEY";
            case USER_POST: return "USER_POST";
            case USER_CONTENT: return "USER_CONTENT";
            case USER_CLEAN: return "USER_CLEAN";
            case USER_REMOVEY_CONT: return "USER_REMOVEY_CONT";
            default: return "";
        }
    }
    inline int stoe(const string & s, UserCacheType & e)
    {
        if(s == "USER_FAVORY")  { e=USER_FAVORY; return 0;}
        if(s == "USER_FAVORN")  { e=USER_FAVORN; return 0;}
        if(s == "USER_REMOVEY")  { e=USER_REMOVEY; return 0;}
        if(s == "USER_POST")  { e=USER_POST; return 0;}
        if(s == "USER_CONTENT")  { e=USER_CONTENT; return 0;}
        if(s == "USER_CLEAN")  { e=USER_CLEAN; return 0;}
        if(s == "USER_REMOVEY_CONT")  { e=USER_REMOVEY_CONT; return 0;}

        return -1;
    }

    enum RtnStat
    {
        SUCCESS = 0,
        FAILURE = -1,
        TIMEOUT = 1,
    };
    inline string etos(const RtnStat & e)
    {
        switch(e)
        {
            case SUCCESS: return "SUCCESS";
            case FAILURE: return "FAILURE";
            case TIMEOUT: return "TIMEOUT";
            default: return "";
        }
    }
    inline int stoe(const string & s, RtnStat & e)
    {
        if(s == "SUCCESS")  { e=SUCCESS; return 0;}
        if(s == "FAILURE")  { e=FAILURE; return 0;}
        if(s == "TIMEOUT")  { e=TIMEOUT; return 0;}

        return -1;
    }

    enum NotifyType
    {
        AT_CMT = 0,
        AT_MSG = 1,
        AT_FVR = 2,
    };
    inline string etos(const NotifyType & e)
    {
        switch(e)
        {
            case AT_CMT: return "AT_CMT";
            case AT_MSG: return "AT_MSG";
            case AT_FVR: return "AT_FVR";
            default: return "";
        }
    }
    inline int stoe(const string & s, NotifyType & e)
    {
        if(s == "AT_CMT")  { e=AT_CMT; return 0;}
        if(s == "AT_MSG")  { e=AT_MSG; return 0;}
        if(s == "AT_FVR")  { e=AT_FVR; return 0;}

        return -1;
    }

    enum MSGOP
    {
        CONT = 0,
        FAVOR = 1,
        CONT_FAVOR = 2,
        CLEAN_MSG = 4,
        FRD_RECMD = 5,
    };
    inline string etos(const MSGOP & e)
    {
        switch(e)
        {
            case CONT: return "CONT";
            case FAVOR: return "FAVOR";
            case CONT_FAVOR: return "CONT_FAVOR";
            case CLEAN_MSG: return "CLEAN_MSG";
            case FRD_RECMD: return "FRD_RECMD";
            default: return "";
        }
    }
    inline int stoe(const string & s, MSGOP & e)
    {
        if(s == "CONT")  { e=CONT; return 0;}
        if(s == "FAVOR")  { e=FAVOR; return 0;}
        if(s == "CONT_FAVOR")  { e=CONT_FAVOR; return 0;}
        if(s == "CLEAN_MSG")  { e=CLEAN_MSG; return 0;}
        if(s == "FRD_RECMD")  { e=FRD_RECMD; return 0;}

        return -1;
    }

    enum MSGSTAT
    {
        NOTRD = 0,
        READED = 1,
    };
    inline string etos(const MSGSTAT & e)
    {
        switch(e)
        {
            case NOTRD: return "NOTRD";
            case READED: return "READED";
            default: return "";
        }
    }
    inline int stoe(const string & s, MSGSTAT & e)
    {
        if(s == "NOTRD")  { e=NOTRD; return 0;}
        if(s == "READED")  { e=READED; return 0;}

        return -1;
    }

    enum BINDTYPE
    {
        MSG_BIND = 0,
        MSG_UNBIND = 1,
    };
    inline string etos(const BINDTYPE & e)
    {
        switch(e)
        {
            case MSG_BIND: return "MSG_BIND";
            case MSG_UNBIND: return "MSG_UNBIND";
            default: return "";
        }
    }
    inline int stoe(const string & s, BINDTYPE & e)
    {
        if(s == "MSG_BIND")  { e=MSG_BIND; return 0;}
        if(s == "MSG_UNBIND")  { e=MSG_UNBIND; return 0;}

        return -1;
    }

    enum ELocaitionType
    {
        ECommunity = 3,
        EOffice = 2,
        EShcool = 1,
    };
    inline string etos(const ELocaitionType & e)
    {
        switch(e)
        {
            case ECommunity: return "ECommunity";
            case EOffice: return "EOffice";
            case EShcool: return "EShcool";
            default: return "";
        }
    }
    inline int stoe(const string & s, ELocaitionType & e)
    {
        if(s == "ECommunity")  { e=ECommunity; return 0;}
        if(s == "EOffice")  { e=EOffice; return 0;}
        if(s == "EShcool")  { e=EShcool; return 0;}

        return -1;
    }

    enum ECircleType
    {
        ENone = 0,
        ENearBy = 1,
        EConcern = 2,
        EAccessable = 4,
        ERecomm = 8,
        ENearByAll = 16,
    };
    inline string etos(const ECircleType & e)
    {
        switch(e)
        {
            case ENone: return "ENone";
            case ENearBy: return "ENearBy";
            case EConcern: return "EConcern";
            case EAccessable: return "EAccessable";
            case ERecomm: return "ERecomm";
            case ENearByAll: return "ENearByAll";
            default: return "";
        }
    }
    inline int stoe(const string & s, ECircleType & e)
    {
        if(s == "ENone")  { e=ENone; return 0;}
        if(s == "ENearBy")  { e=ENearBy; return 0;}
        if(s == "EConcern")  { e=EConcern; return 0;}
        if(s == "EAccessable")  { e=EAccessable; return 0;}
        if(s == "ERecomm")  { e=ERecomm; return 0;}
        if(s == "ENearByAll")  { e=ENearByAll; return 0;}

        return -1;
    }

    struct UserId : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.UserId";
        }
        static string MD5()
        {
            return "99490a1dd6680f62c10095faff44f8a6";
        }
        UserId(const std::string &sUA,const vector<taf::Char> &vGuid,taf::Int64 lUId,const std::string &sToken,taf::Int32 iAppId)
            :sUA(sUA),vGuid(vGuid),lUId(lUId),sToken(sToken),iAppId(iAppId)
        {
        }
        UserId()
        :sUA(""),lUId(0),sToken(""),iAppId(0)
        {
        }
        void resetDefautlt()
        {
            sUA = "";
            lUId = 0;
            sToken = "";
            iAppId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sUA, 0);
            _os.write(vGuid, 1);
            _os.write(lUId, 2);
            _os.write(sToken, 3);
            _os.write(iAppId, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sUA, 0, false);
            _is.read(vGuid, 1, false);
            _is.read(lUId, 2, false);
            _is.read(sToken, 3, false);
            _is.read(iAppId, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sUA,"sUA");
            _ds.display(vGuid,"vGuid");
            _ds.display(lUId,"lUId");
            _ds.display(sToken,"sToken");
            _ds.display(iAppId,"iAppId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sUA, true);
            _ds.displaySimple(vGuid, true);
            _ds.displaySimple(lUId, true);
            _ds.displaySimple(sToken, true);
            _ds.displaySimple(iAppId, false);
            return _os;
        }
    public:
        std::string sUA;
        vector<taf::Char> vGuid;
        taf::Int64 lUId;
        std::string sToken;
        taf::Int32 iAppId;
    };
    inline bool operator==(const UserId&l, const UserId&r)
    {
        return l.sUA == r.sUA && l.vGuid == r.vGuid && l.lUId == r.lUId && l.sToken == r.sToken && l.iAppId == r.iAppId;
    }
    inline bool operator!=(const UserId&l, const UserId&r)
    {
        return !(l == r);
    }

    struct IdRange : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.IdRange";
        }
        static string MD5()
        {
            return "a0f7f1c70b82271b1f084e61faf77494";
        }
        IdRange(taf::Int64 lBeginId,taf::Int64 lEndId)
            :lBeginId(lBeginId),lEndId(lEndId)
        {
        }
        IdRange()
        :lBeginId(0),lEndId(0)
        {
        }
        void resetDefautlt()
        {
            lBeginId = 0;
            lEndId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lBeginId, 0);
            _os.write(lEndId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lBeginId, 0, false);
            _is.read(lEndId, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lBeginId,"lBeginId");
            _ds.display(lEndId,"lEndId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lBeginId, true);
            _ds.displaySimple(lEndId, false);
            return _os;
        }
    public:
        taf::Int64 lBeginId;
        taf::Int64 lEndId;
    };
    inline bool operator==(const IdRange&l, const IdRange&r)
    {
        return l.lBeginId == r.lBeginId && l.lEndId == r.lEndId;
    }
    inline bool operator!=(const IdRange&l, const IdRange&r)
    {
        return !(l == r);
    }
    inline bool operator<(const IdRange&l, const IdRange&r)
    {
        if(l.lBeginId != r.lBeginId)  return (l.lBeginId < r.lBeginId);
        return false;
    }
    inline bool operator<=(const IdRange&l, const IdRange&r)
    {
        return !(r < l);
    }
    inline bool operator>(const IdRange&l, const IdRange&r)
    {
        return r < l;
    }
    inline bool operator>=(const IdRange&l, const IdRange&r)
    {
        return !(l < r);
    }

    struct AddressPair : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.AddressPair";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        AddressPair(const std::string &sName,const std::string &sPhone)
            :sName(sName),sPhone(sPhone)
        {
        }
        AddressPair()
        :sName(""),sPhone("")
        {
        }
        void resetDefautlt()
        {
            sName = "";
            sPhone = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sName, 0);
            _os.write(sPhone, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sName, 0, false);
            _is.read(sPhone, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sName,"sName");
            _ds.display(sPhone,"sPhone");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sName, true);
            _ds.displaySimple(sPhone, false);
            return _os;
        }
    public:
        std::string sName;
        std::string sPhone;
    };
    inline bool operator==(const AddressPair&l, const AddressPair&r)
    {
        return l.sName == r.sName && l.sPhone == r.sPhone;
    }
    inline bool operator!=(const AddressPair&l, const AddressPair&r)
    {
        return !(l == r);
    }

    struct AddressLists : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.AddressLists";
        }
        static string MD5()
        {
            return "7ef1ece8645568bfd4d4350a28446b29";
        }
        AddressLists(const vector<QUAN::AddressPair> &vAddressLists)
            :vAddressLists(vAddressLists)
        {
        }
        AddressLists()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vAddressLists, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vAddressLists, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vAddressLists,"vAddressLists");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vAddressLists, false);
            return _os;
        }
    public:
        vector<QUAN::AddressPair> vAddressLists;
    };
    inline bool operator==(const AddressLists&l, const AddressLists&r)
    {
        return l.vAddressLists == r.vAddressLists;
    }
    inline bool operator!=(const AddressLists&l, const AddressLists&r)
    {
        return !(l == r);
    }

    struct FriendsList : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.FriendsList";
        }
        static string MD5()
        {
            return "30853d491657732e3ce21e7054b66b97";
        }
        FriendsList(taf::Int64 lUId,taf::Int32 iRelat,taf::Int32 iTimespan)
            :lUId(lUId),iRelat(iRelat),iTimespan(iTimespan)
        {
        }
        FriendsList()
        :lUId(0),iRelat(0),iTimespan(-1)
        {
        }
        void resetDefautlt()
        {
            lUId = 0;
            iRelat = 0;
            iTimespan = -1;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lUId, 0);
            _os.write(iRelat, 1);
            _os.write(iTimespan, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lUId, 0, false);
            _is.read(iRelat, 1, false);
            _is.read(iTimespan, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lUId,"lUId");
            _ds.display(iRelat,"iRelat");
            _ds.display(iTimespan,"iTimespan");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lUId, true);
            _ds.displaySimple(iRelat, true);
            _ds.displaySimple(iTimespan, false);
            return _os;
        }
    public:
        taf::Int64 lUId;
        taf::Int32 iRelat;
        taf::Int32 iTimespan;
    };
    inline bool operator==(const FriendsList&l, const FriendsList&r)
    {
        return l.lUId == r.lUId && l.iRelat == r.iRelat && l.iTimespan == r.iTimespan;
    }
    inline bool operator!=(const FriendsList&l, const FriendsList&r)
    {
        return !(l == r);
    }
    inline bool operator<(const FriendsList&l, const FriendsList&r)
    {
        if(l.iTimespan != r.iTimespan)  return (l.iTimespan < r.iTimespan);
        return false;
    }
    inline bool operator<=(const FriendsList&l, const FriendsList&r)
    {
        return !(r < l);
    }
    inline bool operator>(const FriendsList&l, const FriendsList&r)
    {
        return r < l;
    }
    inline bool operator>=(const FriendsList&l, const FriendsList&r)
    {
        return !(l < r);
    }

    struct UserEnrollReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.UserEnrollReq";
        }
        static string MD5()
        {
            return "0c1d945735360d4e3752e1b2d448ba0c";
        }
        UserEnrollReq(const std::string &sPhone,const std::string &sVfyCode,const std::string &sPwd)
            :sPhone(sPhone),sVfyCode(sVfyCode),sPwd(sPwd)
        {
        }
        UserEnrollReq()
        :sPhone(""),sVfyCode(""),sPwd("")
        {
        }
        void resetDefautlt()
        {
            sPhone = "";
            sVfyCode = "";
            sPwd = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sPhone, 0);
            _os.write(sVfyCode, 1);
            _os.write(sPwd, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sPhone, 0, false);
            _is.read(sVfyCode, 1, false);
            _is.read(sPwd, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sPhone,"sPhone");
            _ds.display(sVfyCode,"sVfyCode");
            _ds.display(sPwd,"sPwd");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sPhone, true);
            _ds.displaySimple(sVfyCode, true);
            _ds.displaySimple(sPwd, false);
            return _os;
        }
    public:
        std::string sPhone;
        std::string sVfyCode;
        std::string sPwd;
    };
    inline bool operator==(const UserEnrollReq&l, const UserEnrollReq&r)
    {
        return l.sPhone == r.sPhone && l.sVfyCode == r.sVfyCode && l.sPwd == r.sPwd;
    }
    inline bool operator!=(const UserEnrollReq&l, const UserEnrollReq&r)
    {
        return !(l == r);
    }

    struct UserEnrollRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.UserEnrollRsp";
        }
        static string MD5()
        {
            return "826a77c071331ee1bed2561795327308";
        }
        UserEnrollRsp(const QUAN::UserId &tUserId)
            :tUserId(tUserId)
        {
        }
        UserEnrollRsp()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
    };
    inline bool operator==(const UserEnrollRsp&l, const UserEnrollRsp&r)
    {
        return l.tUserId == r.tUserId;
    }
    inline bool operator!=(const UserEnrollRsp&l, const UserEnrollRsp&r)
    {
        return !(l == r);
    }

    struct UserLoginReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.UserLoginReq";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        UserLoginReq(const std::string &sPhone,const std::string &sPwd)
            :sPhone(sPhone),sPwd(sPwd)
        {
        }
        UserLoginReq()
        :sPhone(""),sPwd("")
        {
        }
        void resetDefautlt()
        {
            sPhone = "";
            sPwd = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sPhone, 0);
            _os.write(sPwd, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sPhone, 0, false);
            _is.read(sPwd, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sPhone,"sPhone");
            _ds.display(sPwd,"sPwd");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sPhone, true);
            _ds.displaySimple(sPwd, false);
            return _os;
        }
    public:
        std::string sPhone;
        std::string sPwd;
    };
    inline bool operator==(const UserLoginReq&l, const UserLoginReq&r)
    {
        return l.sPhone == r.sPhone && l.sPwd == r.sPwd;
    }
    inline bool operator!=(const UserLoginReq&l, const UserLoginReq&r)
    {
        return !(l == r);
    }

    struct UserLoginRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.UserLoginRsp";
        }
        static string MD5()
        {
            return "826a77c071331ee1bed2561795327308";
        }
        UserLoginRsp(const QUAN::UserId &tUserId)
            :tUserId(tUserId)
        {
        }
        UserLoginRsp()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
    };
    inline bool operator==(const UserLoginRsp&l, const UserLoginRsp&r)
    {
        return l.tUserId == r.tUserId;
    }
    inline bool operator!=(const UserLoginRsp&l, const UserLoginRsp&r)
    {
        return !(l == r);
    }

    struct PostAddressListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.PostAddressListReq";
        }
        static string MD5()
        {
            return "5a5c38161afa808776415bc81a392954";
        }
        PostAddressListReq(const QUAN::UserId &tUserId,const vector<taf::Char> &vAddressLists)
            :tUserId(tUserId),vAddressLists(vAddressLists)
        {
        }
        PostAddressListReq()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(vAddressLists, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(vAddressLists, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(vAddressLists,"vAddressLists");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(vAddressLists, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        vector<taf::Char> vAddressLists;
    };
    inline bool operator==(const PostAddressListReq&l, const PostAddressListReq&r)
    {
        return l.tUserId == r.tUserId && l.vAddressLists == r.vAddressLists;
    }
    inline bool operator!=(const PostAddressListReq&l, const PostAddressListReq&r)
    {
        return !(l == r);
    }

    struct PostAddressListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.PostAddressListRsp";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        PostAddressListRsp(taf::Int32 iStatus)
            :iStatus(iStatus)
        {
        }
        PostAddressListRsp()
        :iStatus(0)
        {
        }
        void resetDefautlt()
        {
            iStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iStatus, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iStatus, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iStatus,"iStatus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iStatus, false);
            return _os;
        }
    public:
        taf::Int32 iStatus;
    };
    inline bool operator==(const PostAddressListRsp&l, const PostAddressListRsp&r)
    {
        return l.iStatus == r.iStatus;
    }
    inline bool operator!=(const PostAddressListRsp&l, const PostAddressListRsp&r)
    {
        return !(l == r);
    }

    struct SecretInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.SecretInfo";
        }
        static string MD5()
        {
            return "55b501b5750a70d1f3de660b80bdfaf4";
        }
        SecretInfo(taf::Int64 lSId,taf::Int64 lUId,taf::Int32 iColorId,const std::string &sBitUrl,const std::string &sContent,taf::Int32 iType,const std::string &sLocal,taf::Int32 iFavorNum,taf::Int32 iCmtNum,taf::Bool isFavor,taf::Bool isRead,taf::Int32 isRemove,taf::Int32 iNotRead,taf::Int32 iNtfyType,taf::Int32 iReportNum,taf::Int64 lShareId,taf::Int64 lCircleId)
            :lSId(lSId),lUId(lUId),iColorId(iColorId),sBitUrl(sBitUrl),sContent(sContent),iType(iType),sLocal(sLocal),iFavorNum(iFavorNum),iCmtNum(iCmtNum),isFavor(isFavor),isRead(isRead),isRemove(isRemove),iNotRead(iNotRead),iNtfyType(iNtfyType),iReportNum(iReportNum),lShareId(lShareId),lCircleId(lCircleId)
        {
        }
        SecretInfo()
        :lSId(0),lUId(0),iColorId(0),sBitUrl(""),sContent(""),iType(0),sLocal(""),iFavorNum(0),iCmtNum(0),isFavor(false),isRead(true),isRemove(0),iNotRead(0),iNtfyType(0),iReportNum(0),lShareId(0),lCircleId(0)
        {
        }
        void resetDefautlt()
        {
            lSId = 0;
            lUId = 0;
            iColorId = 0;
            sBitUrl = "";
            sContent = "";
            iType = 0;
            sLocal = "";
            iFavorNum = 0;
            iCmtNum = 0;
            isFavor = false;
            isRead = true;
            isRemove = 0;
            iNotRead = 0;
            iNtfyType = 0;
            iReportNum = 0;
            lShareId = 0;
            lCircleId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lSId, 0);
            _os.write(lUId, 1);
            _os.write(iColorId, 2);
            _os.write(sBitUrl, 3);
            _os.write(sContent, 4);
            _os.write(iType, 5);
            _os.write(sLocal, 6);
            _os.write(iFavorNum, 7);
            _os.write(iCmtNum, 8);
            _os.write(isFavor, 9);
            _os.write(isRead, 10);
            _os.write(isRemove, 11);
            _os.write(iNotRead, 12);
            _os.write(iNtfyType, 13);
            _os.write(iReportNum, 14);
            _os.write(lShareId, 15);
            _os.write(lCircleId, 16);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lSId, 0, false);
            _is.read(lUId, 1, false);
            _is.read(iColorId, 2, false);
            _is.read(sBitUrl, 3, false);
            _is.read(sContent, 4, false);
            _is.read(iType, 5, false);
            _is.read(sLocal, 6, false);
            _is.read(iFavorNum, 7, false);
            _is.read(iCmtNum, 8, false);
            _is.read(isFavor, 9, false);
            _is.read(isRead, 10, false);
            _is.read(isRemove, 11, false);
            _is.read(iNotRead, 12, false);
            _is.read(iNtfyType, 13, false);
            _is.read(iReportNum, 14, false);
            _is.read(lShareId, 15, false);
            _is.read(lCircleId, 16, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lSId,"lSId");
            _ds.display(lUId,"lUId");
            _ds.display(iColorId,"iColorId");
            _ds.display(sBitUrl,"sBitUrl");
            _ds.display(sContent,"sContent");
            _ds.display(iType,"iType");
            _ds.display(sLocal,"sLocal");
            _ds.display(iFavorNum,"iFavorNum");
            _ds.display(iCmtNum,"iCmtNum");
            _ds.display(isFavor,"isFavor");
            _ds.display(isRead,"isRead");
            _ds.display(isRemove,"isRemove");
            _ds.display(iNotRead,"iNotRead");
            _ds.display(iNtfyType,"iNtfyType");
            _ds.display(iReportNum,"iReportNum");
            _ds.display(lShareId,"lShareId");
            _ds.display(lCircleId,"lCircleId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lSId, true);
            _ds.displaySimple(lUId, true);
            _ds.displaySimple(iColorId, true);
            _ds.displaySimple(sBitUrl, true);
            _ds.displaySimple(sContent, true);
            _ds.displaySimple(iType, true);
            _ds.displaySimple(sLocal, true);
            _ds.displaySimple(iFavorNum, true);
            _ds.displaySimple(iCmtNum, true);
            _ds.displaySimple(isFavor, true);
            _ds.displaySimple(isRead, true);
            _ds.displaySimple(isRemove, true);
            _ds.displaySimple(iNotRead, true);
            _ds.displaySimple(iNtfyType, true);
            _ds.displaySimple(iReportNum, true);
            _ds.displaySimple(lShareId, true);
            _ds.displaySimple(lCircleId, false);
            return _os;
        }
    public:
        taf::Int64 lSId;
        taf::Int64 lUId;
        taf::Int32 iColorId;
        std::string sBitUrl;
        std::string sContent;
        taf::Int32 iType;
        std::string sLocal;
        taf::Int32 iFavorNum;
        taf::Int32 iCmtNum;
        taf::Bool isFavor;
        taf::Bool isRead;
        taf::Int32 isRemove;
        taf::Int32 iNotRead;
        taf::Int32 iNtfyType;
        taf::Int32 iReportNum;
        taf::Int64 lShareId;
        taf::Int64 lCircleId;
    };
    inline bool operator==(const SecretInfo&l, const SecretInfo&r)
    {
        return l.lSId == r.lSId && l.lUId == r.lUId && l.iColorId == r.iColorId && l.sBitUrl == r.sBitUrl && l.sContent == r.sContent && l.iType == r.iType && l.sLocal == r.sLocal && l.iFavorNum == r.iFavorNum && l.iCmtNum == r.iCmtNum && l.isFavor == r.isFavor && l.isRead == r.isRead && l.isRemove == r.isRemove && l.iNotRead == r.iNotRead && l.iNtfyType == r.iNtfyType && l.iReportNum == r.iReportNum && l.lShareId == r.lShareId && l.lCircleId == r.lCircleId;
    }
    inline bool operator!=(const SecretInfo&l, const SecretInfo&r)
    {
        return !(l == r);
    }
    inline bool operator<(const SecretInfo&l, const SecretInfo&r)
    {
        if(l.lSId != r.lSId)  return (l.lSId < r.lSId);
        return false;
    }
    inline bool operator<=(const SecretInfo&l, const SecretInfo&r)
    {
        return !(r < l);
    }
    inline bool operator>(const SecretInfo&l, const SecretInfo&r)
    {
        return r < l;
    }
    inline bool operator>=(const SecretInfo&l, const SecretInfo&r)
    {
        return !(l < r);
    }

    struct ContentInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.ContentInfo";
        }
        static string MD5()
        {
            return "b925a532dcb47276a3750ef33db24b42";
        }
        ContentInfo(taf::Int64 lCId,taf::Int64 lSId,taf::Int64 lUId,taf::Bool isFirst,const std::string &Time,const std::string &sContent,taf::Int32 iFavorNum,taf::Bool isFavor,taf::Int32 iPortrait,taf::Bool bIsMe,taf::Int32 iFloor,taf::Int32 isRemove)
            :lCId(lCId),lSId(lSId),lUId(lUId),isFirst(isFirst),Time(Time),sContent(sContent),iFavorNum(iFavorNum),isFavor(isFavor),iPortrait(iPortrait),bIsMe(bIsMe),iFloor(iFloor),isRemove(isRemove)
        {
        }
        ContentInfo()
        :lCId(0),lSId(0),lUId(0),isFirst(false),Time(""),sContent(""),iFavorNum(0),isFavor(false),iPortrait(0),bIsMe(false),iFloor(0),isRemove(0)
        {
        }
        void resetDefautlt()
        {
            lCId = 0;
            lSId = 0;
            lUId = 0;
            isFirst = false;
            Time = "";
            sContent = "";
            iFavorNum = 0;
            isFavor = false;
            iPortrait = 0;
            bIsMe = false;
            iFloor = 0;
            isRemove = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lCId, 0);
            _os.write(lSId, 1);
            _os.write(lUId, 2);
            _os.write(isFirst, 3);
            _os.write(Time, 4);
            _os.write(sContent, 5);
            _os.write(iFavorNum, 6);
            _os.write(isFavor, 7);
            _os.write(iPortrait, 8);
            _os.write(bIsMe, 9);
            _os.write(iFloor, 10);
            _os.write(isRemove, 11);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lCId, 0, false);
            _is.read(lSId, 1, false);
            _is.read(lUId, 2, false);
            _is.read(isFirst, 3, false);
            _is.read(Time, 4, false);
            _is.read(sContent, 5, false);
            _is.read(iFavorNum, 6, false);
            _is.read(isFavor, 7, false);
            _is.read(iPortrait, 8, false);
            _is.read(bIsMe, 9, false);
            _is.read(iFloor, 10, false);
            _is.read(isRemove, 11, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lCId,"lCId");
            _ds.display(lSId,"lSId");
            _ds.display(lUId,"lUId");
            _ds.display(isFirst,"isFirst");
            _ds.display(Time,"Time");
            _ds.display(sContent,"sContent");
            _ds.display(iFavorNum,"iFavorNum");
            _ds.display(isFavor,"isFavor");
            _ds.display(iPortrait,"iPortrait");
            _ds.display(bIsMe,"bIsMe");
            _ds.display(iFloor,"iFloor");
            _ds.display(isRemove,"isRemove");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lCId, true);
            _ds.displaySimple(lSId, true);
            _ds.displaySimple(lUId, true);
            _ds.displaySimple(isFirst, true);
            _ds.displaySimple(Time, true);
            _ds.displaySimple(sContent, true);
            _ds.displaySimple(iFavorNum, true);
            _ds.displaySimple(isFavor, true);
            _ds.displaySimple(iPortrait, true);
            _ds.displaySimple(bIsMe, true);
            _ds.displaySimple(iFloor, true);
            _ds.displaySimple(isRemove, false);
            return _os;
        }
    public:
        taf::Int64 lCId;
        taf::Int64 lSId;
        taf::Int64 lUId;
        taf::Bool isFirst;
        std::string Time;
        std::string sContent;
        taf::Int32 iFavorNum;
        taf::Bool isFavor;
        taf::Int32 iPortrait;
        taf::Bool bIsMe;
        taf::Int32 iFloor;
        taf::Int32 isRemove;
    };
    inline bool operator==(const ContentInfo&l, const ContentInfo&r)
    {
        return l.lCId == r.lCId && l.lSId == r.lSId && l.lUId == r.lUId && l.isFirst == r.isFirst && l.Time == r.Time && l.sContent == r.sContent && l.iFavorNum == r.iFavorNum && l.isFavor == r.isFavor && l.iPortrait == r.iPortrait && l.bIsMe == r.bIsMe && l.iFloor == r.iFloor && l.isRemove == r.isRemove;
    }
    inline bool operator!=(const ContentInfo&l, const ContentInfo&r)
    {
        return !(l == r);
    }
    inline bool operator<(const ContentInfo&l, const ContentInfo&r)
    {
        if(l.lCId != r.lCId)  return (l.lCId < r.lCId);
        return false;
    }
    inline bool operator<=(const ContentInfo&l, const ContentInfo&r)
    {
        return !(r < l);
    }
    inline bool operator>(const ContentInfo&l, const ContentInfo&r)
    {
        return r < l;
    }
    inline bool operator>=(const ContentInfo&l, const ContentInfo&r)
    {
        return !(l < r);
    }

    struct SecretListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.SecretListReq";
        }
        static string MD5()
        {
            return "836e75233afdea9a411f639d69b8600b";
        }
        SecretListReq(const QUAN::UserId &tUserId,const QUAN::IdRange &tRange,taf::Int32 iCount,taf::Int32 iType,const std::string &sCoord)
            :tUserId(tUserId),tRange(tRange),iCount(iCount),iType(iType),sCoord(sCoord)
        {
        }
        SecretListReq()
        :iCount(0),iType(0),sCoord("")
        {
        }
        void resetDefautlt()
        {
            iCount = 0;
            iType = 0;
            sCoord = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(tRange, 1);
            _os.write(iCount, 2);
            _os.write(iType, 3);
            _os.write(sCoord, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(tRange, 1, false);
            _is.read(iCount, 2, false);
            _is.read(iType, 3, false);
            _is.read(sCoord, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(tRange,"tRange");
            _ds.display(iCount,"iCount");
            _ds.display(iType,"iType");
            _ds.display(sCoord,"sCoord");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(tRange, true);
            _ds.displaySimple(iCount, true);
            _ds.displaySimple(iType, true);
            _ds.displaySimple(sCoord, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        QUAN::IdRange tRange;
        taf::Int32 iCount;
        taf::Int32 iType;
        std::string sCoord;
    };
    inline bool operator==(const SecretListReq&l, const SecretListReq&r)
    {
        return l.tUserId == r.tUserId && l.tRange == r.tRange && l.iCount == r.iCount && l.iType == r.iType && l.sCoord == r.sCoord;
    }
    inline bool operator!=(const SecretListReq&l, const SecretListReq&r)
    {
        return !(l == r);
    }

    struct SecretListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.SecretListRsp";
        }
        static string MD5()
        {
            return "9bd6a478c0757d1fb49d46b03d9dacb0";
        }
        SecretListRsp(taf::Int32 iStatus,taf::Int64 lNextBeginId,taf::Int32 iLockCount,const vector<QUAN::SecretInfo> &vSecrets,taf::Int32 iFriends)
            :iStatus(iStatus),lNextBeginId(lNextBeginId),iLockCount(iLockCount),vSecrets(vSecrets),iFriends(iFriends)
        {
        }
        SecretListRsp()
        :iStatus(0),lNextBeginId(0),iLockCount(0),iFriends(0)
        {
        }
        void resetDefautlt()
        {
            iStatus = 0;
            lNextBeginId = 0;
            iLockCount = 0;
            iFriends = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iStatus, 0);
            _os.write(lNextBeginId, 1);
            _os.write(iLockCount, 2);
            _os.write(vSecrets, 3);
            _os.write(iFriends, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iStatus, 0, false);
            _is.read(lNextBeginId, 1, false);
            _is.read(iLockCount, 2, false);
            _is.read(vSecrets, 3, false);
            _is.read(iFriends, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iStatus,"iStatus");
            _ds.display(lNextBeginId,"lNextBeginId");
            _ds.display(iLockCount,"iLockCount");
            _ds.display(vSecrets,"vSecrets");
            _ds.display(iFriends,"iFriends");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iStatus, true);
            _ds.displaySimple(lNextBeginId, true);
            _ds.displaySimple(iLockCount, true);
            _ds.displaySimple(vSecrets, true);
            _ds.displaySimple(iFriends, false);
            return _os;
        }
    public:
        taf::Int32 iStatus;
        taf::Int64 lNextBeginId;
        taf::Int32 iLockCount;
        vector<QUAN::SecretInfo> vSecrets;
        taf::Int32 iFriends;
    };
    inline bool operator==(const SecretListRsp&l, const SecretListRsp&r)
    {
        return l.iStatus == r.iStatus && l.lNextBeginId == r.lNextBeginId && l.iLockCount == r.iLockCount && l.vSecrets == r.vSecrets && l.iFriends == r.iFriends;
    }
    inline bool operator!=(const SecretListRsp&l, const SecretListRsp&r)
    {
        return !(l == r);
    }

    struct ContentListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.ContentListReq";
        }
        static string MD5()
        {
            return "4cfe559e69352f3901791796ab2106c4";
        }
        ContentListReq(const QUAN::UserId &tUserId,taf::Int64 lFirstId,taf::Int64 lSId)
            :tUserId(tUserId),lFirstId(lFirstId),lSId(lSId)
        {
        }
        ContentListReq()
        :lFirstId(0),lSId(0)
        {
        }
        void resetDefautlt()
        {
            lFirstId = 0;
            lSId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(lFirstId, 1);
            _os.write(lSId, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(lFirstId, 1, false);
            _is.read(lSId, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(lFirstId,"lFirstId");
            _ds.display(lSId,"lSId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(lFirstId, true);
            _ds.displaySimple(lSId, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        taf::Int64 lFirstId;
        taf::Int64 lSId;
    };
    inline bool operator==(const ContentListReq&l, const ContentListReq&r)
    {
        return l.tUserId == r.tUserId && l.lFirstId == r.lFirstId && l.lSId == r.lSId;
    }
    inline bool operator!=(const ContentListReq&l, const ContentListReq&r)
    {
        return !(l == r);
    }

    struct ContentListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.ContentListRsp";
        }
        static string MD5()
        {
            return "64dc7012d4853843e7a741ac1bf86555";
        }
        ContentListRsp(taf::Int32 iStatus,taf::Int32 iFavorNum,taf::Int32 iCmtNum,const vector<QUAN::ContentInfo> &vContents,const QUAN::SecretInfo &tSecret)
            :iStatus(iStatus),iFavorNum(iFavorNum),iCmtNum(iCmtNum),vContents(vContents),tSecret(tSecret)
        {
        }
        ContentListRsp()
        :iStatus(0),iFavorNum(0),iCmtNum(0)
        {
        }
        void resetDefautlt()
        {
            iStatus = 0;
            iFavorNum = 0;
            iCmtNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iStatus, 0);
            _os.write(iFavorNum, 1);
            _os.write(iCmtNum, 2);
            _os.write(vContents, 3);
            _os.write(tSecret, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iStatus, 0, false);
            _is.read(iFavorNum, 1, false);
            _is.read(iCmtNum, 2, false);
            _is.read(vContents, 3, false);
            _is.read(tSecret, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iStatus,"iStatus");
            _ds.display(iFavorNum,"iFavorNum");
            _ds.display(iCmtNum,"iCmtNum");
            _ds.display(vContents,"vContents");
            _ds.display(tSecret,"tSecret");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iStatus, true);
            _ds.displaySimple(iFavorNum, true);
            _ds.displaySimple(iCmtNum, true);
            _ds.displaySimple(vContents, true);
            _ds.displaySimple(tSecret, false);
            return _os;
        }
    public:
        taf::Int32 iStatus;
        taf::Int32 iFavorNum;
        taf::Int32 iCmtNum;
        vector<QUAN::ContentInfo> vContents;
        QUAN::SecretInfo tSecret;
    };
    inline bool operator==(const ContentListRsp&l, const ContentListRsp&r)
    {
        return l.iStatus == r.iStatus && l.iFavorNum == r.iFavorNum && l.iCmtNum == r.iCmtNum && l.vContents == r.vContents && l.tSecret == r.tSecret;
    }
    inline bool operator!=(const ContentListRsp&l, const ContentListRsp&r)
    {
        return !(l == r);
    }

    struct PostSecretReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.PostSecretReq";
        }
        static string MD5()
        {
            return "36c2ea5132c3584af0d15da8f67b06f1";
        }
        PostSecretReq(const QUAN::UserId &tUserId,const std::string &sBitUrl,taf::Int32 iColorId,const std::string &sContent,const std::string &sLocal,const std::string &sCoord,const std::string &sUuid,taf::Int64 lCircleId)
            :tUserId(tUserId),sBitUrl(sBitUrl),iColorId(iColorId),sContent(sContent),sLocal(sLocal),sCoord(sCoord),sUuid(sUuid),lCircleId(lCircleId)
        {
        }
        PostSecretReq()
        :sBitUrl(""),iColorId(0),sContent(""),sLocal(""),sCoord(""),sUuid(""),lCircleId(0)
        {
        }
        void resetDefautlt()
        {
            sBitUrl = "";
            iColorId = 0;
            sContent = "";
            sLocal = "";
            sCoord = "";
            sUuid = "";
            lCircleId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(sBitUrl, 1);
            _os.write(iColorId, 2);
            _os.write(sContent, 3);
            _os.write(sLocal, 4);
            _os.write(sCoord, 5);
            _os.write(sUuid, 6);
            _os.write(lCircleId, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(sBitUrl, 1, false);
            _is.read(iColorId, 2, false);
            _is.read(sContent, 3, false);
            _is.read(sLocal, 4, false);
            _is.read(sCoord, 5, false);
            _is.read(sUuid, 6, false);
            _is.read(lCircleId, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(sBitUrl,"sBitUrl");
            _ds.display(iColorId,"iColorId");
            _ds.display(sContent,"sContent");
            _ds.display(sLocal,"sLocal");
            _ds.display(sCoord,"sCoord");
            _ds.display(sUuid,"sUuid");
            _ds.display(lCircleId,"lCircleId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(sBitUrl, true);
            _ds.displaySimple(iColorId, true);
            _ds.displaySimple(sContent, true);
            _ds.displaySimple(sLocal, true);
            _ds.displaySimple(sCoord, true);
            _ds.displaySimple(sUuid, true);
            _ds.displaySimple(lCircleId, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        std::string sBitUrl;
        taf::Int32 iColorId;
        std::string sContent;
        std::string sLocal;
        std::string sCoord;
        std::string sUuid;
        taf::Int64 lCircleId;
    };
    inline bool operator==(const PostSecretReq&l, const PostSecretReq&r)
    {
        return l.tUserId == r.tUserId && l.sBitUrl == r.sBitUrl && l.iColorId == r.iColorId && l.sContent == r.sContent && l.sLocal == r.sLocal && l.sCoord == r.sCoord && l.sUuid == r.sUuid && l.lCircleId == r.lCircleId;
    }
    inline bool operator!=(const PostSecretReq&l, const PostSecretReq&r)
    {
        return !(l == r);
    }

    struct PostSecretRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.PostSecretRsp";
        }
        static string MD5()
        {
            return "309782aed2f570cb74841a7d410ade2f";
        }
        PostSecretRsp(taf::Int32 iStatus,taf::Int64 lSId)
            :iStatus(iStatus),lSId(lSId)
        {
        }
        PostSecretRsp()
        :iStatus(0),lSId(0)
        {
        }
        void resetDefautlt()
        {
            iStatus = 0;
            lSId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iStatus, 0);
            _os.write(lSId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iStatus, 0, false);
            _is.read(lSId, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iStatus,"iStatus");
            _ds.display(lSId,"lSId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iStatus, true);
            _ds.displaySimple(lSId, false);
            return _os;
        }
    public:
        taf::Int32 iStatus;
        taf::Int64 lSId;
    };
    inline bool operator==(const PostSecretRsp&l, const PostSecretRsp&r)
    {
        return l.iStatus == r.iStatus && l.lSId == r.lSId;
    }
    inline bool operator!=(const PostSecretRsp&l, const PostSecretRsp&r)
    {
        return !(l == r);
    }

    struct PostContentReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.PostContentReq";
        }
        static string MD5()
        {
            return "ea1632415851bd728bc661749bb368c2";
        }
        PostContentReq(const QUAN::UserId &tUserId,taf::Int64 lSId,taf::Int64 lFirstId,const std::string &sContent,const std::string &sUuid)
            :tUserId(tUserId),lSId(lSId),lFirstId(lFirstId),sContent(sContent),sUuid(sUuid)
        {
        }
        PostContentReq()
        :lSId(0),lFirstId(0),sContent(""),sUuid("")
        {
        }
        void resetDefautlt()
        {
            lSId = 0;
            lFirstId = 0;
            sContent = "";
            sUuid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(lSId, 1);
            _os.write(lFirstId, 2);
            _os.write(sContent, 3);
            _os.write(sUuid, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(lSId, 1, false);
            _is.read(lFirstId, 2, false);
            _is.read(sContent, 3, false);
            _is.read(sUuid, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(lSId,"lSId");
            _ds.display(lFirstId,"lFirstId");
            _ds.display(sContent,"sContent");
            _ds.display(sUuid,"sUuid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(lSId, true);
            _ds.displaySimple(lFirstId, true);
            _ds.displaySimple(sContent, true);
            _ds.displaySimple(sUuid, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        taf::Int64 lSId;
        taf::Int64 lFirstId;
        std::string sContent;
        std::string sUuid;
    };
    inline bool operator==(const PostContentReq&l, const PostContentReq&r)
    {
        return l.tUserId == r.tUserId && l.lSId == r.lSId && l.lFirstId == r.lFirstId && l.sContent == r.sContent && l.sUuid == r.sUuid;
    }
    inline bool operator!=(const PostContentReq&l, const PostContentReq&r)
    {
        return !(l == r);
    }

    struct PostContentRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.PostContentRsp";
        }
        static string MD5()
        {
            return "5e806e17345524e87c5358717aafab45";
        }
        PostContentRsp(taf::Int32 iStatus,const QUAN::ContentInfo &tContent)
            :iStatus(iStatus),tContent(tContent)
        {
        }
        PostContentRsp()
        :iStatus(0)
        {
        }
        void resetDefautlt()
        {
            iStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iStatus, 0);
            _os.write(tContent, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iStatus, 0, false);
            _is.read(tContent, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iStatus,"iStatus");
            _ds.display(tContent,"tContent");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iStatus, true);
            _ds.displaySimple(tContent, false);
            return _os;
        }
    public:
        taf::Int32 iStatus;
        QUAN::ContentInfo tContent;
    };
    inline bool operator==(const PostContentRsp&l, const PostContentRsp&r)
    {
        return l.iStatus == r.iStatus && l.tContent == r.tContent;
    }
    inline bool operator!=(const PostContentRsp&l, const PostContentRsp&r)
    {
        return !(l == r);
    }

    struct PostFavorReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.PostFavorReq";
        }
        static string MD5()
        {
            return "a9a543923a52e0d8eda98e72f5b324b5";
        }
        PostFavorReq(const QUAN::UserId &tUserId,taf::Int64 lId,taf::Int64 lSId,taf::Int32 iType,taf::Int32 iOp,taf::Int64 lFavoredId)
            :tUserId(tUserId),lId(lId),lSId(lSId),iType(iType),iOp(iOp),lFavoredId(lFavoredId)
        {
        }
        PostFavorReq()
        :lId(0),lSId(0),iType(0),iOp(0),lFavoredId(0)
        {
        }
        void resetDefautlt()
        {
            lId = 0;
            lSId = 0;
            iType = 0;
            iOp = 0;
            lFavoredId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(lId, 1);
            _os.write(lSId, 2);
            _os.write(iType, 3);
            _os.write(iOp, 4);
            _os.write(lFavoredId, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(lId, 1, false);
            _is.read(lSId, 2, false);
            _is.read(iType, 3, false);
            _is.read(iOp, 4, false);
            _is.read(lFavoredId, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(lId,"lId");
            _ds.display(lSId,"lSId");
            _ds.display(iType,"iType");
            _ds.display(iOp,"iOp");
            _ds.display(lFavoredId,"lFavoredId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(lId, true);
            _ds.displaySimple(lSId, true);
            _ds.displaySimple(iType, true);
            _ds.displaySimple(iOp, true);
            _ds.displaySimple(lFavoredId, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        taf::Int64 lId;
        taf::Int64 lSId;
        taf::Int32 iType;
        taf::Int32 iOp;
        taf::Int64 lFavoredId;
    };
    inline bool operator==(const PostFavorReq&l, const PostFavorReq&r)
    {
        return l.tUserId == r.tUserId && l.lId == r.lId && l.lSId == r.lSId && l.iType == r.iType && l.iOp == r.iOp && l.lFavoredId == r.lFavoredId;
    }
    inline bool operator!=(const PostFavorReq&l, const PostFavorReq&r)
    {
        return !(l == r);
    }

    struct PostFavorRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.PostFavorRsp";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        PostFavorRsp(taf::Int32 iStatus)
            :iStatus(iStatus)
        {
        }
        PostFavorRsp()
        :iStatus(0)
        {
        }
        void resetDefautlt()
        {
            iStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iStatus, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iStatus, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iStatus,"iStatus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iStatus, false);
            return _os;
        }
    public:
        taf::Int32 iStatus;
    };
    inline bool operator==(const PostFavorRsp&l, const PostFavorRsp&r)
    {
        return l.iStatus == r.iStatus;
    }
    inline bool operator!=(const PostFavorRsp&l, const PostFavorRsp&r)
    {
        return !(l == r);
    }

    struct PostReportReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.PostReportReq";
        }
        static string MD5()
        {
            return "537049dc7d999758223e525fa69adfb7";
        }
        PostReportReq(const QUAN::UserId &tUserId,taf::Int64 lSId,taf::Int32 iType,taf::Int64 lReportedId)
            :tUserId(tUserId),lSId(lSId),iType(iType),lReportedId(lReportedId)
        {
        }
        PostReportReq()
        :lSId(0),iType(0),lReportedId(0)
        {
        }
        void resetDefautlt()
        {
            lSId = 0;
            iType = 0;
            lReportedId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(lSId, 1);
            _os.write(iType, 2);
            _os.write(lReportedId, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(lSId, 1, false);
            _is.read(iType, 2, false);
            _is.read(lReportedId, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(lSId,"lSId");
            _ds.display(iType,"iType");
            _ds.display(lReportedId,"lReportedId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(lSId, true);
            _ds.displaySimple(iType, true);
            _ds.displaySimple(lReportedId, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        taf::Int64 lSId;
        taf::Int32 iType;
        taf::Int64 lReportedId;
    };
    inline bool operator==(const PostReportReq&l, const PostReportReq&r)
    {
        return l.tUserId == r.tUserId && l.lSId == r.lSId && l.iType == r.iType && l.lReportedId == r.lReportedId;
    }
    inline bool operator!=(const PostReportReq&l, const PostReportReq&r)
    {
        return !(l == r);
    }

    struct PostReportRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.PostReportRsp";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        PostReportRsp(taf::Int32 iStatus)
            :iStatus(iStatus)
        {
        }
        PostReportRsp()
        :iStatus(0)
        {
        }
        void resetDefautlt()
        {
            iStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iStatus, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iStatus, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iStatus,"iStatus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iStatus, false);
            return _os;
        }
    public:
        taf::Int32 iStatus;
    };
    inline bool operator==(const PostReportRsp&l, const PostReportRsp&r)
    {
        return l.iStatus == r.iStatus;
    }
    inline bool operator!=(const PostReportRsp&l, const PostReportRsp&r)
    {
        return !(l == r);
    }

    struct CleanTrailReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.CleanTrailReq";
        }
        static string MD5()
        {
            return "4cfe559e69352f3901791796ab2106c4";
        }
        CleanTrailReq(const QUAN::UserId &tUserId,taf::Int64 lSId,taf::Int64 lCId)
            :tUserId(tUserId),lSId(lSId),lCId(lCId)
        {
        }
        CleanTrailReq()
        :lSId(0),lCId(0)
        {
        }
        void resetDefautlt()
        {
            lSId = 0;
            lCId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(lSId, 1);
            _os.write(lCId, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(lSId, 1, false);
            _is.read(lCId, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(lSId,"lSId");
            _ds.display(lCId,"lCId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(lSId, true);
            _ds.displaySimple(lCId, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        taf::Int64 lSId;
        taf::Int64 lCId;
    };
    inline bool operator==(const CleanTrailReq&l, const CleanTrailReq&r)
    {
        return l.tUserId == r.tUserId && l.lSId == r.lSId && l.lCId == r.lCId;
    }
    inline bool operator!=(const CleanTrailReq&l, const CleanTrailReq&r)
    {
        return !(l == r);
    }

    struct CleanTrailRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.CleanTrailRsp";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        CleanTrailRsp(taf::Int32 iStatus)
            :iStatus(iStatus)
        {
        }
        CleanTrailRsp()
        :iStatus(0)
        {
        }
        void resetDefautlt()
        {
            iStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iStatus, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iStatus, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iStatus,"iStatus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iStatus, false);
            return _os;
        }
    public:
        taf::Int32 iStatus;
    };
    inline bool operator==(const CleanTrailRsp&l, const CleanTrailRsp&r)
    {
        return l.iStatus == r.iStatus;
    }
    inline bool operator!=(const CleanTrailRsp&l, const CleanTrailRsp&r)
    {
        return !(l == r);
    }

    struct RemoveSecretReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.RemoveSecretReq";
        }
        static string MD5()
        {
            return "4cfe559e69352f3901791796ab2106c4";
        }
        RemoveSecretReq(const QUAN::UserId &tUserId,taf::Int64 lUId,taf::Int64 lSId)
            :tUserId(tUserId),lUId(lUId),lSId(lSId)
        {
        }
        RemoveSecretReq()
        :lUId(0),lSId(0)
        {
        }
        void resetDefautlt()
        {
            lUId = 0;
            lSId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(lUId, 1);
            _os.write(lSId, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(lUId, 1, false);
            _is.read(lSId, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(lUId,"lUId");
            _ds.display(lSId,"lSId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(lUId, true);
            _ds.displaySimple(lSId, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        taf::Int64 lUId;
        taf::Int64 lSId;
    };
    inline bool operator==(const RemoveSecretReq&l, const RemoveSecretReq&r)
    {
        return l.tUserId == r.tUserId && l.lUId == r.lUId && l.lSId == r.lSId;
    }
    inline bool operator!=(const RemoveSecretReq&l, const RemoveSecretReq&r)
    {
        return !(l == r);
    }

    struct RemoveSecretRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.RemoveSecretRsp";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        RemoveSecretRsp(taf::Int32 iStatus)
            :iStatus(iStatus)
        {
        }
        RemoveSecretRsp()
        :iStatus(0)
        {
        }
        void resetDefautlt()
        {
            iStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iStatus, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iStatus, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iStatus,"iStatus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iStatus, false);
            return _os;
        }
    public:
        taf::Int32 iStatus;
    };
    inline bool operator==(const RemoveSecretRsp&l, const RemoveSecretRsp&r)
    {
        return l.iStatus == r.iStatus;
    }
    inline bool operator!=(const RemoveSecretRsp&l, const RemoveSecretRsp&r)
    {
        return !(l == r);
    }

    struct SglSecretReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.SglSecretReq";
        }
        static string MD5()
        {
            return "e23264499c756c82c0092a1100de4d80";
        }
        SglSecretReq(taf::Int64 lSId,const QUAN::UserId &tUserId)
            :lSId(lSId),tUserId(tUserId)
        {
        }
        SglSecretReq()
        :lSId(0)
        {
        }
        void resetDefautlt()
        {
            lSId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lSId, 0);
            _os.write(tUserId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lSId, 0, false);
            _is.read(tUserId, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lSId,"lSId");
            _ds.display(tUserId,"tUserId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lSId, true);
            _ds.displaySimple(tUserId, false);
            return _os;
        }
    public:
        taf::Int64 lSId;
        QUAN::UserId tUserId;
    };
    inline bool operator==(const SglSecretReq&l, const SglSecretReq&r)
    {
        return l.lSId == r.lSId && l.tUserId == r.tUserId;
    }
    inline bool operator!=(const SglSecretReq&l, const SglSecretReq&r)
    {
        return !(l == r);
    }

    struct SglSecretRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.SglSecretRsp";
        }
        static string MD5()
        {
            return "a969f23e8fa0e3f441b6d88e4ce3d3e5";
        }
        SglSecretRsp(taf::Int32 iStatus,const QUAN::SecretInfo &tSecret,const vector<QUAN::ContentInfo> &vContents)
            :iStatus(iStatus),tSecret(tSecret),vContents(vContents)
        {
        }
        SglSecretRsp()
        :iStatus(0)
        {
        }
        void resetDefautlt()
        {
            iStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iStatus, 0);
            _os.write(tSecret, 1);
            _os.write(vContents, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iStatus, 0, false);
            _is.read(tSecret, 1, false);
            _is.read(vContents, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iStatus,"iStatus");
            _ds.display(tSecret,"tSecret");
            _ds.display(vContents,"vContents");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iStatus, true);
            _ds.displaySimple(tSecret, true);
            _ds.displaySimple(vContents, false);
            return _os;
        }
    public:
        taf::Int32 iStatus;
        QUAN::SecretInfo tSecret;
        vector<QUAN::ContentInfo> vContents;
    };
    inline bool operator==(const SglSecretRsp&l, const SglSecretRsp&r)
    {
        return l.iStatus == r.iStatus && l.tSecret == r.tSecret && l.vContents == r.vContents;
    }
    inline bool operator!=(const SglSecretRsp&l, const SglSecretRsp&r)
    {
        return !(l == r);
    }

    struct ShareSecretReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.ShareSecretReq";
        }
        static string MD5()
        {
            return "e23264499c756c82c0092a1100de4d80";
        }
        ShareSecretReq(taf::Int64 lSId,const QUAN::UserId &tUserId)
            :lSId(lSId),tUserId(tUserId)
        {
        }
        ShareSecretReq()
        :lSId(0)
        {
        }
        void resetDefautlt()
        {
            lSId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lSId, 0);
            _os.write(tUserId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lSId, 0, false);
            _is.read(tUserId, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lSId,"lSId");
            _ds.display(tUserId,"tUserId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lSId, true);
            _ds.displaySimple(tUserId, false);
            return _os;
        }
    public:
        taf::Int64 lSId;
        QUAN::UserId tUserId;
    };
    inline bool operator==(const ShareSecretReq&l, const ShareSecretReq&r)
    {
        return l.lSId == r.lSId && l.tUserId == r.tUserId;
    }
    inline bool operator!=(const ShareSecretReq&l, const ShareSecretReq&r)
    {
        return !(l == r);
    }

    struct ShareSecretRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.ShareSecretRsp";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        ShareSecretRsp(taf::Int32 iStatus)
            :iStatus(iStatus)
        {
        }
        ShareSecretRsp()
        :iStatus(0)
        {
        }
        void resetDefautlt()
        {
            iStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iStatus, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iStatus, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iStatus,"iStatus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iStatus, false);
            return _os;
        }
    public:
        taf::Int32 iStatus;
    };
    inline bool operator==(const ShareSecretRsp&l, const ShareSecretRsp&r)
    {
        return l.iStatus == r.iStatus;
    }
    inline bool operator!=(const ShareSecretRsp&l, const ShareSecretRsp&r)
    {
        return !(l == r);
    }

    struct UserSecretCacheReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.UserSecretCacheReq";
        }
        static string MD5()
        {
            return "a78eb4a9d4ee86231893ceb515a1df17";
        }
        UserSecretCacheReq(const QUAN::PostSecretReq &tPostReq,taf::Int64 lSId,const vector<QUAN::FriendsList> &vUIds,taf::Int32 iType,taf::Int64 lUId)
            :tPostReq(tPostReq),lSId(lSId),vUIds(vUIds),iType(iType),lUId(lUId)
        {
        }
        UserSecretCacheReq()
        :lSId(0),iType(0),lUId(0)
        {
        }
        void resetDefautlt()
        {
            lSId = 0;
            iType = 0;
            lUId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tPostReq, 0);
            _os.write(lSId, 1);
            _os.write(vUIds, 2);
            _os.write(iType, 3);
            _os.write(lUId, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tPostReq, 0, false);
            _is.read(lSId, 1, false);
            _is.read(vUIds, 2, false);
            _is.read(iType, 3, false);
            _is.read(lUId, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tPostReq,"tPostReq");
            _ds.display(lSId,"lSId");
            _ds.display(vUIds,"vUIds");
            _ds.display(iType,"iType");
            _ds.display(lUId,"lUId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tPostReq, true);
            _ds.displaySimple(lSId, true);
            _ds.displaySimple(vUIds, true);
            _ds.displaySimple(iType, true);
            _ds.displaySimple(lUId, false);
            return _os;
        }
    public:
        QUAN::PostSecretReq tPostReq;
        taf::Int64 lSId;
        vector<QUAN::FriendsList> vUIds;
        taf::Int32 iType;
        taf::Int64 lUId;
    };
    inline bool operator==(const UserSecretCacheReq&l, const UserSecretCacheReq&r)
    {
        return l.tPostReq == r.tPostReq && l.lSId == r.lSId && l.vUIds == r.vUIds && l.iType == r.iType && l.lUId == r.lUId;
    }
    inline bool operator!=(const UserSecretCacheReq&l, const UserSecretCacheReq&r)
    {
        return !(l == r);
    }

    struct FeedBackReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.FeedBackReq";
        }
        static string MD5()
        {
            return "c8a89a6198d94a63ca6c7fe01211c39d";
        }
        FeedBackReq(const QUAN::UserId &tUserId,const std::string &sContent,const std::string &sPlatform,const std::string &sSystem,const std::string &sVersion)
            :tUserId(tUserId),sContent(sContent),sPlatform(sPlatform),sSystem(sSystem),sVersion(sVersion)
        {
        }
        FeedBackReq()
        :sContent(""),sPlatform(""),sSystem(""),sVersion("")
        {
        }
        void resetDefautlt()
        {
            sContent = "";
            sPlatform = "";
            sSystem = "";
            sVersion = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(sContent, 1);
            _os.write(sPlatform, 2);
            _os.write(sSystem, 3);
            _os.write(sVersion, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(sContent, 1, false);
            _is.read(sPlatform, 2, false);
            _is.read(sSystem, 3, false);
            _is.read(sVersion, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(sContent,"sContent");
            _ds.display(sPlatform,"sPlatform");
            _ds.display(sSystem,"sSystem");
            _ds.display(sVersion,"sVersion");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(sContent, true);
            _ds.displaySimple(sPlatform, true);
            _ds.displaySimple(sSystem, true);
            _ds.displaySimple(sVersion, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        std::string sContent;
        std::string sPlatform;
        std::string sSystem;
        std::string sVersion;
    };
    inline bool operator==(const FeedBackReq&l, const FeedBackReq&r)
    {
        return l.tUserId == r.tUserId && l.sContent == r.sContent && l.sPlatform == r.sPlatform && l.sSystem == r.sSystem && l.sVersion == r.sVersion;
    }
    inline bool operator!=(const FeedBackReq&l, const FeedBackReq&r)
    {
        return !(l == r);
    }

    struct FeedBackRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.FeedBackRsp";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        FeedBackRsp(taf::Int32 iStatus)
            :iStatus(iStatus)
        {
        }
        FeedBackRsp()
        :iStatus(0)
        {
        }
        void resetDefautlt()
        {
            iStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iStatus, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iStatus, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iStatus,"iStatus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iStatus, false);
            return _os;
        }
    public:
        taf::Int32 iStatus;
    };
    inline bool operator==(const FeedBackRsp&l, const FeedBackRsp&r)
    {
        return l.iStatus == r.iStatus;
    }
    inline bool operator!=(const FeedBackRsp&l, const FeedBackRsp&r)
    {
        return !(l == r);
    }

    struct RemoveContentReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.RemoveContentReq";
        }
        static string MD5()
        {
            return "4cfe559e69352f3901791796ab2106c4";
        }
        RemoveContentReq(const QUAN::UserId &tUserId,taf::Int64 lSId,taf::Int64 lCId)
            :tUserId(tUserId),lSId(lSId),lCId(lCId)
        {
        }
        RemoveContentReq()
        :lSId(0),lCId(0)
        {
        }
        void resetDefautlt()
        {
            lSId = 0;
            lCId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(lSId, 1);
            _os.write(lCId, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(lSId, 1, false);
            _is.read(lCId, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(lSId,"lSId");
            _ds.display(lCId,"lCId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(lSId, true);
            _ds.displaySimple(lCId, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        taf::Int64 lSId;
        taf::Int64 lCId;
    };
    inline bool operator==(const RemoveContentReq&l, const RemoveContentReq&r)
    {
        return l.tUserId == r.tUserId && l.lSId == r.lSId && l.lCId == r.lCId;
    }
    inline bool operator!=(const RemoveContentReq&l, const RemoveContentReq&r)
    {
        return !(l == r);
    }

    struct RemoveContentRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.RemoveContentRsp";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        RemoveContentRsp(taf::Int32 iStatus)
            :iStatus(iStatus)
        {
        }
        RemoveContentRsp()
        :iStatus(0)
        {
        }
        void resetDefautlt()
        {
            iStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iStatus, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iStatus, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iStatus,"iStatus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iStatus, false);
            return _os;
        }
    public:
        taf::Int32 iStatus;
    };
    inline bool operator==(const RemoveContentRsp&l, const RemoveContentRsp&r)
    {
        return l.iStatus == r.iStatus;
    }
    inline bool operator!=(const RemoveContentRsp&l, const RemoveContentRsp&r)
    {
        return !(l == r);
    }

    struct SystemListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.SystemListReq";
        }
        static string MD5()
        {
            return "826a77c071331ee1bed2561795327308";
        }
        SystemListReq(const QUAN::UserId &tUserId)
            :tUserId(tUserId)
        {
        }
        SystemListReq()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
    };
    inline bool operator==(const SystemListReq&l, const SystemListReq&r)
    {
        return l.tUserId == r.tUserId;
    }
    inline bool operator!=(const SystemListReq&l, const SystemListReq&r)
    {
        return !(l == r);
    }

    struct SystemListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.SystemListRsp";
        }
        static string MD5()
        {
            return "52e5cf46046aab7ac4d9b967e5778886";
        }
        SystemListRsp(taf::Int32 iStatus,const vector<QUAN::SecretInfo> &vSystems)
            :iStatus(iStatus),vSystems(vSystems)
        {
        }
        SystemListRsp()
        :iStatus(0)
        {
        }
        void resetDefautlt()
        {
            iStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iStatus, 0);
            _os.write(vSystems, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iStatus, 0, false);
            _is.read(vSystems, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iStatus,"iStatus");
            _ds.display(vSystems,"vSystems");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iStatus, true);
            _ds.displaySimple(vSystems, false);
            return _os;
        }
    public:
        taf::Int32 iStatus;
        vector<QUAN::SecretInfo> vSystems;
    };
    inline bool operator==(const SystemListRsp&l, const SystemListRsp&r)
    {
        return l.iStatus == r.iStatus && l.vSystems == r.vSystems;
    }
    inline bool operator!=(const SystemListRsp&l, const SystemListRsp&r)
    {
        return !(l == r);
    }

    struct PushMsgReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.PushMsgReq";
        }
        static string MD5()
        {
            return "7041d0c43be14e53f8e584434b349fdf";
        }
        PushMsgReq(const QUAN::UserId &tUserId,const QUAN::IdRange &tRange,taf::Int32 iCount,const std::string &sCoord)
            :tUserId(tUserId),tRange(tRange),iCount(iCount),sCoord(sCoord)
        {
        }
        PushMsgReq()
        :iCount(0),sCoord("")
        {
        }
        void resetDefautlt()
        {
            iCount = 0;
            sCoord = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(tRange, 1);
            _os.write(iCount, 2);
            _os.write(sCoord, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(tRange, 1, false);
            _is.read(iCount, 2, false);
            _is.read(sCoord, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(tRange,"tRange");
            _ds.display(iCount,"iCount");
            _ds.display(sCoord,"sCoord");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(tRange, true);
            _ds.displaySimple(iCount, true);
            _ds.displaySimple(sCoord, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        QUAN::IdRange tRange;
        taf::Int32 iCount;
        std::string sCoord;
    };
    inline bool operator==(const PushMsgReq&l, const PushMsgReq&r)
    {
        return l.tUserId == r.tUserId && l.tRange == r.tRange && l.iCount == r.iCount && l.sCoord == r.sCoord;
    }
    inline bool operator!=(const PushMsgReq&l, const PushMsgReq&r)
    {
        return !(l == r);
    }

    struct PushMsgRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.PushMsgRsp";
        }
        static string MD5()
        {
            return "2c7a1ef605f38349f3c2c3d045dbfbb9";
        }
        PushMsgRsp(taf::Int64 lNextBeginId,const vector<QUAN::SecretInfo> &vSecrets,taf::Int32 iStatus)
            :lNextBeginId(lNextBeginId),vSecrets(vSecrets),iStatus(iStatus)
        {
        }
        PushMsgRsp()
        :lNextBeginId(0),iStatus(0)
        {
        }
        void resetDefautlt()
        {
            lNextBeginId = 0;
            iStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lNextBeginId, 0);
            _os.write(vSecrets, 1);
            _os.write(iStatus, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lNextBeginId, 0, false);
            _is.read(vSecrets, 1, false);
            _is.read(iStatus, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lNextBeginId,"lNextBeginId");
            _ds.display(vSecrets,"vSecrets");
            _ds.display(iStatus,"iStatus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lNextBeginId, true);
            _ds.displaySimple(vSecrets, true);
            _ds.displaySimple(iStatus, false);
            return _os;
        }
    public:
        taf::Int64 lNextBeginId;
        vector<QUAN::SecretInfo> vSecrets;
        taf::Int32 iStatus;
    };
    inline bool operator==(const PushMsgRsp&l, const PushMsgRsp&r)
    {
        return l.lNextBeginId == r.lNextBeginId && l.vSecrets == r.vSecrets && l.iStatus == r.iStatus;
    }
    inline bool operator!=(const PushMsgRsp&l, const PushMsgRsp&r)
    {
        return !(l == r);
    }

    struct GetMsgNumReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.GetMsgNumReq";
        }
        static string MD5()
        {
            return "826a77c071331ee1bed2561795327308";
        }
        GetMsgNumReq(const QUAN::UserId &tUserId)
            :tUserId(tUserId)
        {
        }
        GetMsgNumReq()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
    };
    inline bool operator==(const GetMsgNumReq&l, const GetMsgNumReq&r)
    {
        return l.tUserId == r.tUserId;
    }
    inline bool operator!=(const GetMsgNumReq&l, const GetMsgNumReq&r)
    {
        return !(l == r);
    }

    struct GetMsgNumRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.GetMsgNumRsp";
        }
        static string MD5()
        {
            return "feec12de7b13d3c49a37abb722ac4db4";
        }
        GetMsgNumRsp(taf::Int32 iCount,taf::Int32 iStatus)
            :iCount(iCount),iStatus(iStatus)
        {
        }
        GetMsgNumRsp()
        :iCount(0),iStatus(0)
        {
        }
        void resetDefautlt()
        {
            iCount = 0;
            iStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iCount, 0);
            _os.write(iStatus, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iCount, 0, false);
            _is.read(iStatus, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iCount,"iCount");
            _ds.display(iStatus,"iStatus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iCount, true);
            _ds.displaySimple(iStatus, false);
            return _os;
        }
    public:
        taf::Int32 iCount;
        taf::Int32 iStatus;
    };
    inline bool operator==(const GetMsgNumRsp&l, const GetMsgNumRsp&r)
    {
        return l.iCount == r.iCount && l.iStatus == r.iStatus;
    }
    inline bool operator!=(const GetMsgNumRsp&l, const GetMsgNumRsp&r)
    {
        return !(l == r);
    }

    struct MsgRmd : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.MsgRmd";
        }
        static string MD5()
        {
            return "f31bea63268df3afb87a92c47e4dcc35";
        }
        MsgRmd(taf::Int32 iOp,taf::Bool isRead)
            :iOp(iOp),isRead(isRead)
        {
        }
        MsgRmd()
        :iOp(0),isRead(true)
        {
        }
        void resetDefautlt()
        {
            iOp = 0;
            isRead = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iOp, 0);
            _os.write(isRead, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iOp, 0, false);
            _is.read(isRead, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iOp,"iOp");
            _ds.display(isRead,"isRead");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iOp, true);
            _ds.displaySimple(isRead, false);
            return _os;
        }
    public:
        taf::Int32 iOp;
        taf::Bool isRead;
    };
    inline bool operator==(const MsgRmd&l, const MsgRmd&r)
    {
        return l.iOp == r.iOp && l.isRead == r.isRead;
    }
    inline bool operator!=(const MsgRmd&l, const MsgRmd&r)
    {
        return !(l == r);
    }

    struct AddMsgReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.AddMsgReq";
        }
        static string MD5()
        {
            return "386bbb13cc64bb5de6002415e3202366";
        }
        AddMsgReq(const QUAN::UserId &tUserId,taf::Int64 lSId,taf::Int64 lFirstId,taf::Int32 iOp,const vector<taf::Int64> &vUserIds)
            :tUserId(tUserId),lSId(lSId),lFirstId(lFirstId),iOp(iOp),vUserIds(vUserIds)
        {
        }
        AddMsgReq()
        :lSId(0),lFirstId(0),iOp(0)
        {
        }
        void resetDefautlt()
        {
            lSId = 0;
            lFirstId = 0;
            iOp = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(lSId, 1);
            _os.write(lFirstId, 2);
            _os.write(iOp, 3);
            _os.write(vUserIds, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(lSId, 1, false);
            _is.read(lFirstId, 2, false);
            _is.read(iOp, 3, false);
            _is.read(vUserIds, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(lSId,"lSId");
            _ds.display(lFirstId,"lFirstId");
            _ds.display(iOp,"iOp");
            _ds.display(vUserIds,"vUserIds");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(lSId, true);
            _ds.displaySimple(lFirstId, true);
            _ds.displaySimple(iOp, true);
            _ds.displaySimple(vUserIds, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        taf::Int64 lSId;
        taf::Int64 lFirstId;
        taf::Int32 iOp;
        vector<taf::Int64> vUserIds;
    };
    inline bool operator==(const AddMsgReq&l, const AddMsgReq&r)
    {
        return l.tUserId == r.tUserId && l.lSId == r.lSId && l.lFirstId == r.lFirstId && l.iOp == r.iOp && l.vUserIds == r.vUserIds;
    }
    inline bool operator!=(const AddMsgReq&l, const AddMsgReq&r)
    {
        return !(l == r);
    }

    struct ChangeMsgReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.ChangeMsgReq";
        }
        static string MD5()
        {
            return "a9fbc766cb794700f94435767e94e042";
        }
        ChangeMsgReq(const QUAN::UserId &tUserId,taf::Int64 lSId,taf::Int32 iOp,taf::Int64 lFirstId,taf::Int64 iType)
            :tUserId(tUserId),lSId(lSId),iOp(iOp),lFirstId(lFirstId),iType(iType)
        {
        }
        ChangeMsgReq()
        :lSId(0),iOp(0),lFirstId(0),iType(0)
        {
        }
        void resetDefautlt()
        {
            lSId = 0;
            iOp = 0;
            lFirstId = 0;
            iType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(lSId, 1);
            _os.write(iOp, 2);
            _os.write(lFirstId, 3);
            _os.write(iType, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(lSId, 1, false);
            _is.read(iOp, 2, false);
            _is.read(lFirstId, 3, false);
            _is.read(iType, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(lSId,"lSId");
            _ds.display(iOp,"iOp");
            _ds.display(lFirstId,"lFirstId");
            _ds.display(iType,"iType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(lSId, true);
            _ds.displaySimple(iOp, true);
            _ds.displaySimple(lFirstId, true);
            _ds.displaySimple(iType, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        taf::Int64 lSId;
        taf::Int32 iOp;
        taf::Int64 lFirstId;
        taf::Int64 iType;
    };
    inline bool operator==(const ChangeMsgReq&l, const ChangeMsgReq&r)
    {
        return l.tUserId == r.tUserId && l.lSId == r.lSId && l.iOp == r.iOp && l.lFirstId == r.lFirstId && l.iType == r.iType;
    }
    inline bool operator!=(const ChangeMsgReq&l, const ChangeMsgReq&r)
    {
        return !(l == r);
    }

    struct BindMsgReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.BindMsgReq";
        }
        static string MD5()
        {
            return "7e34be824826971e843e861d90ea70fd";
        }
        BindMsgReq(const QUAN::UserId &tUserId,const std::string &sId,taf::Int32 iType,const std::string &channelid)
            :tUserId(tUserId),sId(sId),iType(iType),channelid(channelid)
        {
        }
        BindMsgReq()
        :sId(""),iType(0),channelid("")
        {
        }
        void resetDefautlt()
        {
            sId = "";
            iType = 0;
            channelid = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(sId, 1);
            _os.write(iType, 2);
            _os.write(channelid, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(sId, 1, false);
            _is.read(iType, 2, false);
            _is.read(channelid, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(sId,"sId");
            _ds.display(iType,"iType");
            _ds.display(channelid,"channelid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(sId, true);
            _ds.displaySimple(iType, true);
            _ds.displaySimple(channelid, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        std::string sId;
        taf::Int32 iType;
        std::string channelid;
    };
    inline bool operator==(const BindMsgReq&l, const BindMsgReq&r)
    {
        return l.tUserId == r.tUserId && l.sId == r.sId && l.iType == r.iType && l.channelid == r.channelid;
    }
    inline bool operator!=(const BindMsgReq&l, const BindMsgReq&r)
    {
        return !(l == r);
    }

    struct AtMsgReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.AtMsgReq";
        }
        static string MD5()
        {
            return "a87550af4dc30d320379efb3d4a2f42f";
        }
        AtMsgReq(const QUAN::UserId &tUserId,taf::Int64 lSId,const vector<taf::Int64> &vUserIds,const vector<std::string> &vPhones)
            :tUserId(tUserId),lSId(lSId),vUserIds(vUserIds),vPhones(vPhones)
        {
        }
        AtMsgReq()
        :lSId(0)
        {
        }
        void resetDefautlt()
        {
            lSId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(lSId, 1);
            _os.write(vUserIds, 2);
            _os.write(vPhones, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(lSId, 1, false);
            _is.read(vUserIds, 2, false);
            _is.read(vPhones, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(lSId,"lSId");
            _ds.display(vUserIds,"vUserIds");
            _ds.display(vPhones,"vPhones");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(lSId, true);
            _ds.displaySimple(vUserIds, true);
            _ds.displaySimple(vPhones, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        taf::Int64 lSId;
        vector<taf::Int64> vUserIds;
        vector<std::string> vPhones;
    };
    inline bool operator==(const AtMsgReq&l, const AtMsgReq&r)
    {
        return l.tUserId == r.tUserId && l.lSId == r.lSId && l.vUserIds == r.vUserIds && l.vPhones == r.vPhones;
    }
    inline bool operator!=(const AtMsgReq&l, const AtMsgReq&r)
    {
        return !(l == r);
    }

    struct CircleInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.CircleInfo";
        }
        static string MD5()
        {
            return "0f5ce3e63bb829e2ba0d1b524c173366";
        }
        CircleInfo(taf::Int64 lCircleId,taf::Int64 lCircleType,const std::string &sName,taf::Int32 iLastPostTime,taf::Int32 iLocationType,const std::string &sLocation,const std::string &sCoord,taf::Int64 lSecretCount,taf::Int64 lConcernCount,taf::Bool bAuditState,taf::Int32 iDistance,const std::string &sCity,taf::Int32 iLockNum)
            :lCircleId(lCircleId),lCircleType(lCircleType),sName(sName),iLastPostTime(iLastPostTime),iLocationType(iLocationType),sLocation(sLocation),sCoord(sCoord),lSecretCount(lSecretCount),lConcernCount(lConcernCount),bAuditState(bAuditState),iDistance(iDistance),sCity(sCity),iLockNum(iLockNum)
        {
        }
        CircleInfo()
        :lCircleId(0),lCircleType(0),sName(""),iLastPostTime(0),iLocationType(0),sLocation(""),sCoord(""),lSecretCount(0),lConcernCount(0),bAuditState(false),iDistance(-1),sCity(""),iLockNum(0)
        {
        }
        void resetDefautlt()
        {
            lCircleId = 0;
            lCircleType = 0;
            sName = "";
            iLastPostTime = 0;
            iLocationType = 0;
            sLocation = "";
            sCoord = "";
            lSecretCount = 0;
            lConcernCount = 0;
            bAuditState = false;
            iDistance = -1;
            sCity = "";
            iLockNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lCircleId, 0);
            _os.write(lCircleType, 1);
            _os.write(sName, 2);
            _os.write(iLastPostTime, 3);
            _os.write(iLocationType, 4);
            _os.write(sLocation, 5);
            _os.write(sCoord, 6);
            _os.write(lSecretCount, 7);
            _os.write(lConcernCount, 8);
            _os.write(bAuditState, 9);
            _os.write(iDistance, 10);
            _os.write(sCity, 11);
            _os.write(iLockNum, 12);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lCircleId, 0, false);
            _is.read(lCircleType, 1, false);
            _is.read(sName, 2, false);
            _is.read(iLastPostTime, 3, false);
            _is.read(iLocationType, 4, false);
            _is.read(sLocation, 5, false);
            _is.read(sCoord, 6, false);
            _is.read(lSecretCount, 7, false);
            _is.read(lConcernCount, 8, false);
            _is.read(bAuditState, 9, false);
            _is.read(iDistance, 10, false);
            _is.read(sCity, 11, false);
            _is.read(iLockNum, 12, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lCircleId,"lCircleId");
            _ds.display(lCircleType,"lCircleType");
            _ds.display(sName,"sName");
            _ds.display(iLastPostTime,"iLastPostTime");
            _ds.display(iLocationType,"iLocationType");
            _ds.display(sLocation,"sLocation");
            _ds.display(sCoord,"sCoord");
            _ds.display(lSecretCount,"lSecretCount");
            _ds.display(lConcernCount,"lConcernCount");
            _ds.display(bAuditState,"bAuditState");
            _ds.display(iDistance,"iDistance");
            _ds.display(sCity,"sCity");
            _ds.display(iLockNum,"iLockNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lCircleId, true);
            _ds.displaySimple(lCircleType, true);
            _ds.displaySimple(sName, true);
            _ds.displaySimple(iLastPostTime, true);
            _ds.displaySimple(iLocationType, true);
            _ds.displaySimple(sLocation, true);
            _ds.displaySimple(sCoord, true);
            _ds.displaySimple(lSecretCount, true);
            _ds.displaySimple(lConcernCount, true);
            _ds.displaySimple(bAuditState, true);
            _ds.displaySimple(iDistance, true);
            _ds.displaySimple(sCity, true);
            _ds.displaySimple(iLockNum, false);
            return _os;
        }
    public:
        taf::Int64 lCircleId;
        taf::Int64 lCircleType;
        std::string sName;
        taf::Int32 iLastPostTime;
        taf::Int32 iLocationType;
        std::string sLocation;
        std::string sCoord;
        taf::Int64 lSecretCount;
        taf::Int64 lConcernCount;
        taf::Bool bAuditState;
        taf::Int32 iDistance;
        std::string sCity;
        taf::Int32 iLockNum;
    };
    inline bool operator==(const CircleInfo&l, const CircleInfo&r)
    {
        return l.lCircleId == r.lCircleId && l.lCircleType == r.lCircleType && l.sName == r.sName && l.iLastPostTime == r.iLastPostTime && l.iLocationType == r.iLocationType && l.sLocation == r.sLocation && l.sCoord == r.sCoord && l.lSecretCount == r.lSecretCount && l.lConcernCount == r.lConcernCount && l.bAuditState == r.bAuditState && l.iDistance == r.iDistance && l.sCity == r.sCity && l.iLockNum == r.iLockNum;
    }
    inline bool operator!=(const CircleInfo&l, const CircleInfo&r)
    {
        return !(l == r);
    }

    struct CircleGroup : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.CircleGroup";
        }
        static string MD5()
        {
            return "d692fd4096f1eebe972938f28ce34c18";
        }
        CircleGroup(const std::string &sTitle,const std::string &sCity,const std::string &sDistance,const vector<QUAN::CircleInfo> &vCircleInfo)
            :sTitle(sTitle),sCity(sCity),sDistance(sDistance),vCircleInfo(vCircleInfo)
        {
        }
        CircleGroup()
        :sTitle(""),sCity(""),sDistance("")
        {
        }
        void resetDefautlt()
        {
            sTitle = "";
            sCity = "";
            sDistance = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sTitle, 0);
            _os.write(sCity, 1);
            _os.write(sDistance, 2);
            _os.write(vCircleInfo, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sTitle, 0, false);
            _is.read(sCity, 1, false);
            _is.read(sDistance, 2, false);
            _is.read(vCircleInfo, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sTitle,"sTitle");
            _ds.display(sCity,"sCity");
            _ds.display(sDistance,"sDistance");
            _ds.display(vCircleInfo,"vCircleInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sTitle, true);
            _ds.displaySimple(sCity, true);
            _ds.displaySimple(sDistance, true);
            _ds.displaySimple(vCircleInfo, false);
            return _os;
        }
    public:
        std::string sTitle;
        std::string sCity;
        std::string sDistance;
        vector<QUAN::CircleInfo> vCircleInfo;
    };
    inline bool operator==(const CircleGroup&l, const CircleGroup&r)
    {
        return l.sTitle == r.sTitle && l.sCity == r.sCity && l.sDistance == r.sDistance && l.vCircleInfo == r.vCircleInfo;
    }
    inline bool operator!=(const CircleGroup&l, const CircleGroup&r)
    {
        return !(l == r);
    }

    struct CreateCircleReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.CreateCircleReq";
        }
        static string MD5()
        {
            return "208887207f3afe4e0bbf8bd1527ea26b";
        }
        CreateCircleReq(const QUAN::UserId &tUserId,const std::string &sName,const std::string &sCity,taf::Int32 iLocationType,const std::string &sLocation,const std::string &sCoord)
            :tUserId(tUserId),sName(sName),sCity(sCity),iLocationType(iLocationType),sLocation(sLocation),sCoord(sCoord)
        {
        }
        CreateCircleReq()
        :sName(""),sCity(""),iLocationType(0),sLocation(""),sCoord("")
        {
        }
        void resetDefautlt()
        {
            sName = "";
            sCity = "";
            iLocationType = 0;
            sLocation = "";
            sCoord = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(sName, 1);
            _os.write(sCity, 2);
            _os.write(iLocationType, 3);
            _os.write(sLocation, 4);
            _os.write(sCoord, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(sName, 1, false);
            _is.read(sCity, 2, false);
            _is.read(iLocationType, 3, false);
            _is.read(sLocation, 4, false);
            _is.read(sCoord, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(sName,"sName");
            _ds.display(sCity,"sCity");
            _ds.display(iLocationType,"iLocationType");
            _ds.display(sLocation,"sLocation");
            _ds.display(sCoord,"sCoord");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(sName, true);
            _ds.displaySimple(sCity, true);
            _ds.displaySimple(iLocationType, true);
            _ds.displaySimple(sLocation, true);
            _ds.displaySimple(sCoord, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        std::string sName;
        std::string sCity;
        taf::Int32 iLocationType;
        std::string sLocation;
        std::string sCoord;
    };
    inline bool operator==(const CreateCircleReq&l, const CreateCircleReq&r)
    {
        return l.tUserId == r.tUserId && l.sName == r.sName && l.sCity == r.sCity && l.iLocationType == r.iLocationType && l.sLocation == r.sLocation && l.sCoord == r.sCoord;
    }
    inline bool operator!=(const CreateCircleReq&l, const CreateCircleReq&r)
    {
        return !(l == r);
    }

    struct CreateCircleRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.CreateCircleRsp";
        }
        static string MD5()
        {
            return "387cce08d2b422994cc5471f5f2b01c6";
        }
        CreateCircleRsp(const QUAN::CircleInfo &tCircleInfo)
            :tCircleInfo(tCircleInfo)
        {
        }
        CreateCircleRsp()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tCircleInfo, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tCircleInfo, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tCircleInfo,"tCircleInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tCircleInfo, false);
            return _os;
        }
    public:
        QUAN::CircleInfo tCircleInfo;
    };
    inline bool operator==(const CreateCircleRsp&l, const CreateCircleRsp&r)
    {
        return l.tCircleInfo == r.tCircleInfo;
    }
    inline bool operator!=(const CreateCircleRsp&l, const CreateCircleRsp&r)
    {
        return !(l == r);
    }

    struct SearchCircleReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.SearchCircleReq";
        }
        static string MD5()
        {
            return "45511b4985b63f6abf5d4e79d1bc58a5";
        }
        SearchCircleReq(const QUAN::UserId &tUserId,const std::string &sCond,const std::string &sCoord)
            :tUserId(tUserId),sCond(sCond),sCoord(sCoord)
        {
        }
        SearchCircleReq()
        :sCond(""),sCoord("")
        {
        }
        void resetDefautlt()
        {
            sCond = "";
            sCoord = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(sCond, 1);
            _os.write(sCoord, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(sCond, 1, false);
            _is.read(sCoord, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(sCond,"sCond");
            _ds.display(sCoord,"sCoord");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(sCond, true);
            _ds.displaySimple(sCoord, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        std::string sCond;
        std::string sCoord;
    };
    inline bool operator==(const SearchCircleReq&l, const SearchCircleReq&r)
    {
        return l.tUserId == r.tUserId && l.sCond == r.sCond && l.sCoord == r.sCoord;
    }
    inline bool operator!=(const SearchCircleReq&l, const SearchCircleReq&r)
    {
        return !(l == r);
    }

    struct SearchCircleRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.SearchCircleRsp";
        }
        static string MD5()
        {
            return "c1e762723d9a13018ebd922b5a323373";
        }
        SearchCircleRsp(const vector<QUAN::CircleGroup> &vCircleGroup)
            :vCircleGroup(vCircleGroup)
        {
        }
        SearchCircleRsp()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vCircleGroup, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vCircleGroup, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vCircleGroup,"vCircleGroup");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vCircleGroup, false);
            return _os;
        }
    public:
        vector<QUAN::CircleGroup> vCircleGroup;
    };
    inline bool operator==(const SearchCircleRsp&l, const SearchCircleRsp&r)
    {
        return l.vCircleGroup == r.vCircleGroup;
    }
    inline bool operator!=(const SearchCircleRsp&l, const SearchCircleRsp&r)
    {
        return !(l == r);
    }

    struct GetCircleReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.GetCircleReq";
        }
        static string MD5()
        {
            return "6b0946e6d963c8f066fd9dc172e80702";
        }
        GetCircleReq(const QUAN::UserId &tUserId,taf::Int32 lCircleType,const std::string &sCoord)
            :tUserId(tUserId),lCircleType(lCircleType),sCoord(sCoord)
        {
        }
        GetCircleReq()
        :lCircleType(0),sCoord("")
        {
        }
        void resetDefautlt()
        {
            lCircleType = 0;
            sCoord = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(lCircleType, 1);
            _os.write(sCoord, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(lCircleType, 1, false);
            _is.read(sCoord, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(lCircleType,"lCircleType");
            _ds.display(sCoord,"sCoord");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(lCircleType, true);
            _ds.displaySimple(sCoord, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        taf::Int32 lCircleType;
        std::string sCoord;
    };
    inline bool operator==(const GetCircleReq&l, const GetCircleReq&r)
    {
        return l.tUserId == r.tUserId && l.lCircleType == r.lCircleType && l.sCoord == r.sCoord;
    }
    inline bool operator!=(const GetCircleReq&l, const GetCircleReq&r)
    {
        return !(l == r);
    }

    struct GetCircleRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.GetCircleRsp";
        }
        static string MD5()
        {
            return "c1e762723d9a13018ebd922b5a323373";
        }
        GetCircleRsp(const vector<QUAN::CircleGroup> &vCircleGroup)
            :vCircleGroup(vCircleGroup)
        {
        }
        GetCircleRsp()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vCircleGroup, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vCircleGroup, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vCircleGroup,"vCircleGroup");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vCircleGroup, false);
            return _os;
        }
    public:
        vector<QUAN::CircleGroup> vCircleGroup;
    };
    inline bool operator==(const GetCircleRsp&l, const GetCircleRsp&r)
    {
        return l.vCircleGroup == r.vCircleGroup;
    }
    inline bool operator!=(const GetCircleRsp&l, const GetCircleRsp&r)
    {
        return !(l == r);
    }

    struct SetCircleReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.SetCircleReq";
        }
        static string MD5()
        {
            return "ff4032971ae40f48e08909b7e89d4f59";
        }
        SetCircleReq(const QUAN::UserId &tUserId,taf::Int64 lCircleId,taf::Bool bIsConcern)
            :tUserId(tUserId),lCircleId(lCircleId),bIsConcern(bIsConcern)
        {
        }
        SetCircleReq()
        :lCircleId(0),bIsConcern(true)
        {
        }
        void resetDefautlt()
        {
            lCircleId = 0;
            bIsConcern = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(lCircleId, 1);
            _os.write(bIsConcern, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(lCircleId, 1, false);
            _is.read(bIsConcern, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(lCircleId,"lCircleId");
            _ds.display(bIsConcern,"bIsConcern");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(lCircleId, true);
            _ds.displaySimple(bIsConcern, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        taf::Int64 lCircleId;
        taf::Bool bIsConcern;
    };
    inline bool operator==(const SetCircleReq&l, const SetCircleReq&r)
    {
        return l.tUserId == r.tUserId && l.lCircleId == r.lCircleId && l.bIsConcern == r.bIsConcern;
    }
    inline bool operator!=(const SetCircleReq&l, const SetCircleReq&r)
    {
        return !(l == r);
    }

    struct GetCircleListReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.GetCircleListReq";
        }
        static string MD5()
        {
            return "65ac9304be11bc1d0de244896e9e7329";
        }
        GetCircleListReq(const QUAN::UserId &tUserId,const QUAN::IdRange &tRange,taf::Int32 iCount,taf::Int64 lCircleId,const std::string &sCoord,taf::Int32 iType)
            :tUserId(tUserId),tRange(tRange),iCount(iCount),lCircleId(lCircleId),sCoord(sCoord),iType(iType)
        {
        }
        GetCircleListReq()
        :iCount(0),lCircleId(0),sCoord(""),iType(0)
        {
        }
        void resetDefautlt()
        {
            iCount = 0;
            lCircleId = 0;
            sCoord = "";
            iType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(tRange, 1);
            _os.write(iCount, 2);
            _os.write(lCircleId, 3);
            _os.write(sCoord, 4);
            _os.write(iType, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(tRange, 1, false);
            _is.read(iCount, 2, false);
            _is.read(lCircleId, 3, false);
            _is.read(sCoord, 4, false);
            _is.read(iType, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(tRange,"tRange");
            _ds.display(iCount,"iCount");
            _ds.display(lCircleId,"lCircleId");
            _ds.display(sCoord,"sCoord");
            _ds.display(iType,"iType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(tRange, true);
            _ds.displaySimple(iCount, true);
            _ds.displaySimple(lCircleId, true);
            _ds.displaySimple(sCoord, true);
            _ds.displaySimple(iType, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        QUAN::IdRange tRange;
        taf::Int32 iCount;
        taf::Int64 lCircleId;
        std::string sCoord;
        taf::Int32 iType;
    };
    inline bool operator==(const GetCircleListReq&l, const GetCircleListReq&r)
    {
        return l.tUserId == r.tUserId && l.tRange == r.tRange && l.iCount == r.iCount && l.lCircleId == r.lCircleId && l.sCoord == r.sCoord && l.iType == r.iType;
    }
    inline bool operator!=(const GetCircleListReq&l, const GetCircleListReq&r)
    {
        return !(l == r);
    }

    struct GetCircleListRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.GetCircleListRsp";
        }
        static string MD5()
        {
            return "270996f082e87ff5c10215f58f0e71bb";
        }
        GetCircleListRsp(taf::Int32 iStatus,taf::Int64 lNextBeginId,const vector<QUAN::SecretInfo> &vSecrets,const QUAN::CircleInfo &tCircleInfo,taf::Int32 iFriends)
            :iStatus(iStatus),lNextBeginId(lNextBeginId),vSecrets(vSecrets),tCircleInfo(tCircleInfo),iFriends(iFriends)
        {
        }
        GetCircleListRsp()
        :iStatus(0),lNextBeginId(0),iFriends(0)
        {
        }
        void resetDefautlt()
        {
            iStatus = 0;
            lNextBeginId = 0;
            iFriends = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iStatus, 0);
            _os.write(lNextBeginId, 1);
            _os.write(vSecrets, 2);
            _os.write(tCircleInfo, 3);
            _os.write(iFriends, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iStatus, 0, false);
            _is.read(lNextBeginId, 1, false);
            _is.read(vSecrets, 2, false);
            _is.read(tCircleInfo, 3, false);
            _is.read(iFriends, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iStatus,"iStatus");
            _ds.display(lNextBeginId,"lNextBeginId");
            _ds.display(vSecrets,"vSecrets");
            _ds.display(tCircleInfo,"tCircleInfo");
            _ds.display(iFriends,"iFriends");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iStatus, true);
            _ds.displaySimple(lNextBeginId, true);
            _ds.displaySimple(vSecrets, true);
            _ds.displaySimple(tCircleInfo, true);
            _ds.displaySimple(iFriends, false);
            return _os;
        }
    public:
        taf::Int32 iStatus;
        taf::Int64 lNextBeginId;
        vector<QUAN::SecretInfo> vSecrets;
        QUAN::CircleInfo tCircleInfo;
        taf::Int32 iFriends;
    };
    inline bool operator==(const GetCircleListRsp&l, const GetCircleListRsp&r)
    {
        return l.iStatus == r.iStatus && l.lNextBeginId == r.lNextBeginId && l.vSecrets == r.vSecrets && l.tCircleInfo == r.tCircleInfo && l.iFriends == r.iFriends;
    }
    inline bool operator!=(const GetCircleListRsp&l, const GetCircleListRsp&r)
    {
        return !(l == r);
    }

    struct SysMsgInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.SysMsgInfo";
        }
        static string MD5()
        {
            return "a54fd49f7d2627714faa028d92451bc4";
        }
        SysMsgInfo(taf::Int64 lId,const std::string &sContent,const std::string &sTime,taf::Bool bIsRead,taf::Int64 lCircleId,taf::Bool bIsPass)
            :lId(lId),sContent(sContent),sTime(sTime),bIsRead(bIsRead),lCircleId(lCircleId),bIsPass(bIsPass)
        {
        }
        SysMsgInfo()
        :lId(0),sContent(""),sTime(""),bIsRead(true),lCircleId(0),bIsPass(true)
        {
        }
        void resetDefautlt()
        {
            lId = 0;
            sContent = "";
            sTime = "";
            bIsRead = true;
            lCircleId = 0;
            bIsPass = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lId, 0);
            _os.write(sContent, 1);
            _os.write(sTime, 2);
            _os.write(bIsRead, 3);
            _os.write(lCircleId, 4);
            _os.write(bIsPass, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lId, 0, false);
            _is.read(sContent, 1, false);
            _is.read(sTime, 2, false);
            _is.read(bIsRead, 3, false);
            _is.read(lCircleId, 4, false);
            _is.read(bIsPass, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lId,"lId");
            _ds.display(sContent,"sContent");
            _ds.display(sTime,"sTime");
            _ds.display(bIsRead,"bIsRead");
            _ds.display(lCircleId,"lCircleId");
            _ds.display(bIsPass,"bIsPass");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lId, true);
            _ds.displaySimple(sContent, true);
            _ds.displaySimple(sTime, true);
            _ds.displaySimple(bIsRead, true);
            _ds.displaySimple(lCircleId, true);
            _ds.displaySimple(bIsPass, false);
            return _os;
        }
    public:
        taf::Int64 lId;
        std::string sContent;
        std::string sTime;
        taf::Bool bIsRead;
        taf::Int64 lCircleId;
        taf::Bool bIsPass;
    };
    inline bool operator==(const SysMsgInfo&l, const SysMsgInfo&r)
    {
        return l.lId == r.lId && l.sContent == r.sContent && l.sTime == r.sTime && l.bIsRead == r.bIsRead && l.lCircleId == r.lCircleId && l.bIsPass == r.bIsPass;
    }
    inline bool operator!=(const SysMsgInfo&l, const SysMsgInfo&r)
    {
        return !(l == r);
    }

    struct GetSysMsgReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.GetSysMsgReq";
        }
        static string MD5()
        {
            return "826a77c071331ee1bed2561795327308";
        }
        GetSysMsgReq(const QUAN::UserId &tUserId)
            :tUserId(tUserId)
        {
        }
        GetSysMsgReq()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
    };
    inline bool operator==(const GetSysMsgReq&l, const GetSysMsgReq&r)
    {
        return l.tUserId == r.tUserId;
    }
    inline bool operator!=(const GetSysMsgReq&l, const GetSysMsgReq&r)
    {
        return !(l == r);
    }

    struct GetSysMsgRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.GetSysMsgRsp";
        }
        static string MD5()
        {
            return "9a78a50304fd6cdd7e63739bfb164f95";
        }
        GetSysMsgRsp(const vector<QUAN::SysMsgInfo> &vSysMsgInfo)
            :vSysMsgInfo(vSysMsgInfo)
        {
        }
        GetSysMsgRsp()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vSysMsgInfo, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vSysMsgInfo, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vSysMsgInfo,"vSysMsgInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vSysMsgInfo, false);
            return _os;
        }
    public:
        vector<QUAN::SysMsgInfo> vSysMsgInfo;
    };
    inline bool operator==(const GetSysMsgRsp&l, const GetSysMsgRsp&r)
    {
        return l.vSysMsgInfo == r.vSysMsgInfo;
    }
    inline bool operator!=(const GetSysMsgRsp&l, const GetSysMsgRsp&r)
    {
        return !(l == r);
    }

    struct PushSysMsgReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.PushSysMsgReq";
        }
        static string MD5()
        {
            return "8b6a8317510f8cbea56c5a6172b86848";
        }
        PushSysMsgReq(const QUAN::UserId &tUserId,const QUAN::SysMsgInfo &tSysMsgInfo)
            :tUserId(tUserId),tSysMsgInfo(tSysMsgInfo)
        {
        }
        PushSysMsgReq()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(tSysMsgInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(tSysMsgInfo, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(tSysMsgInfo,"tSysMsgInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(tSysMsgInfo, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        QUAN::SysMsgInfo tSysMsgInfo;
    };
    inline bool operator==(const PushSysMsgReq&l, const PushSysMsgReq&r)
    {
        return l.tUserId == r.tUserId && l.tSysMsgInfo == r.tSysMsgInfo;
    }
    inline bool operator!=(const PushSysMsgReq&l, const PushSysMsgReq&r)
    {
        return !(l == r);
    }

    struct PushSysMsgRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.PushSysMsgRsp";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        PushSysMsgRsp(taf::Int32 iStatus)
            :iStatus(iStatus)
        {
        }
        PushSysMsgRsp()
        :iStatus(0)
        {
        }
        void resetDefautlt()
        {
            iStatus = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iStatus, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iStatus, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iStatus,"iStatus");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iStatus, false);
            return _os;
        }
    public:
        taf::Int32 iStatus;
    };
    inline bool operator==(const PushSysMsgRsp&l, const PushSysMsgRsp&r)
    {
        return l.iStatus == r.iStatus;
    }
    inline bool operator!=(const PushSysMsgRsp&l, const PushSysMsgRsp&r)
    {
        return !(l == r);
    }

    struct GetNewSysMsgReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.GetNewSysMsgReq";
        }
        static string MD5()
        {
            return "826a77c071331ee1bed2561795327308";
        }
        GetNewSysMsgReq(const QUAN::UserId &tUserId)
            :tUserId(tUserId)
        {
        }
        GetNewSysMsgReq()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
    };
    inline bool operator==(const GetNewSysMsgReq&l, const GetNewSysMsgReq&r)
    {
        return l.tUserId == r.tUserId;
    }
    inline bool operator!=(const GetNewSysMsgReq&l, const GetNewSysMsgReq&r)
    {
        return !(l == r);
    }

    struct GetNewSysMsgRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.GetNewSysMsgRsp";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        GetNewSysMsgRsp(taf::Int32 iCount)
            :iCount(iCount)
        {
        }
        GetNewSysMsgRsp()
        :iCount(0)
        {
        }
        void resetDefautlt()
        {
            iCount = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iCount, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iCount, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iCount,"iCount");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iCount, false);
            return _os;
        }
    public:
        taf::Int32 iCount;
    };
    inline bool operator==(const GetNewSysMsgRsp&l, const GetNewSysMsgRsp&r)
    {
        return l.iCount == r.iCount;
    }
    inline bool operator!=(const GetNewSysMsgRsp&l, const GetNewSysMsgRsp&r)
    {
        return !(l == r);
    }

    struct CircleLocation : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.CircleLocation";
        }
        static string MD5()
        {
            return "871b38a8482e7c173465e15140096742";
        }
        CircleLocation(taf::Double dLat,taf::Double dLon,const std::string &sCity,const std::string &sLocation,taf::Int32 iRadius)
            :dLat(dLat),dLon(dLon),sCity(sCity),sLocation(sLocation),iRadius(iRadius)
        {
        }
        CircleLocation()
        :dLat(0),dLon(0),sCity(""),sLocation(""),iRadius(0)
        {
        }
        void resetDefautlt()
        {
            dLat = 0;
            dLon = 0;
            sCity = "";
            sLocation = "";
            iRadius = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(dLat, 0);
            _os.write(dLon, 1);
            _os.write(sCity, 2);
            _os.write(sLocation, 3);
            _os.write(iRadius, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(dLat, 0, false);
            _is.read(dLon, 1, false);
            _is.read(sCity, 2, false);
            _is.read(sLocation, 3, false);
            _is.read(iRadius, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(dLat,"dLat");
            _ds.display(dLon,"dLon");
            _ds.display(sCity,"sCity");
            _ds.display(sLocation,"sLocation");
            _ds.display(iRadius,"iRadius");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(dLat, true);
            _ds.displaySimple(dLon, true);
            _ds.displaySimple(sCity, true);
            _ds.displaySimple(sLocation, true);
            _ds.displaySimple(iRadius, false);
            return _os;
        }
    public:
        taf::Double dLat;
        taf::Double dLon;
        std::string sCity;
        std::string sLocation;
        taf::Int32 iRadius;
    };
    inline bool operator==(const CircleLocation&l, const CircleLocation&r)
    {
        return l.dLat == r.dLat && l.dLon == r.dLon && l.sCity == r.sCity && l.sLocation == r.sLocation && l.iRadius == r.iRadius;
    }
    inline bool operator!=(const CircleLocation&l, const CircleLocation&r)
    {
        return !(l == r);
    }

    struct MsgSender : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.MsgSender";
        }
        static string MD5()
        {
            return "342eda7f58f7be8e3ec33bc677d5e6fb";
        }
        MsgSender(taf::Int64 uid,taf::Int32 header,const std::string &source,taf::Int64 postsId,taf::Int64 commentId)
            :uid(uid),header(header),source(source),postsId(postsId),commentId(commentId)
        {
        }
        MsgSender()
        :uid(0),header(0),source(""),postsId(0),commentId(0)
        {
        }
        void resetDefautlt()
        {
            uid = 0;
            header = 0;
            source = "";
            postsId = 0;
            commentId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uid, 0);
            _os.write(header, 1);
            _os.write(source, 2);
            _os.write(postsId, 3);
            _os.write(commentId, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uid, 0, false);
            _is.read(header, 1, false);
            _is.read(source, 2, false);
            _is.read(postsId, 3, false);
            _is.read(commentId, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uid,"uid");
            _ds.display(header,"header");
            _ds.display(source,"source");
            _ds.display(postsId,"postsId");
            _ds.display(commentId,"commentId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uid, true);
            _ds.displaySimple(header, true);
            _ds.displaySimple(source, true);
            _ds.displaySimple(postsId, true);
            _ds.displaySimple(commentId, false);
            return _os;
        }
    public:
        taf::Int64 uid;
        taf::Int32 header;
        std::string source;
        taf::Int64 postsId;
        taf::Int64 commentId;
    };
    inline bool operator==(const MsgSender&l, const MsgSender&r)
    {
        return l.uid == r.uid && l.header == r.header && l.source == r.source && l.postsId == r.postsId && l.commentId == r.commentId;
    }
    inline bool operator!=(const MsgSender&l, const MsgSender&r)
    {
        return !(l == r);
    }

    struct MessageReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.MessageReq";
        }
        static string MD5()
        {
            return "1a5cbc4940a41bc3e61f4a4f1f466c4b";
        }
        MessageReq(taf::Int64 msgId,taf::Int64 receiver,const std::string &content,const std::string &contentType,const QUAN::MsgSender &sender,const std::string &diy)
            :msgId(msgId),receiver(receiver),content(content),contentType(contentType),sender(sender),diy(diy)
        {
        }
        MessageReq()
        :msgId(0),receiver(0),content(""),contentType(""),diy("")
        {
        }
        void resetDefautlt()
        {
            msgId = 0;
            receiver = 0;
            content = "";
            contentType = "";
            diy = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(msgId, 0);
            _os.write(receiver, 1);
            _os.write(content, 2);
            _os.write(contentType, 3);
            _os.write(sender, 4);
            _os.write(diy, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(msgId, 0, false);
            _is.read(receiver, 1, false);
            _is.read(content, 2, false);
            _is.read(contentType, 3, false);
            _is.read(sender, 4, false);
            _is.read(diy, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(msgId,"msgId");
            _ds.display(receiver,"receiver");
            _ds.display(content,"content");
            _ds.display(contentType,"contentType");
            _ds.display(sender,"sender");
            _ds.display(diy,"diy");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(msgId, true);
            _ds.displaySimple(receiver, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(contentType, true);
            _ds.displaySimple(sender, true);
            _ds.displaySimple(diy, false);
            return _os;
        }
    public:
        taf::Int64 msgId;
        taf::Int64 receiver;
        std::string content;
        std::string contentType;
        QUAN::MsgSender sender;
        std::string diy;
    };
    inline bool operator==(const MessageReq&l, const MessageReq&r)
    {
        return l.msgId == r.msgId && l.receiver == r.receiver && l.content == r.content && l.contentType == r.contentType && l.sender == r.sender && l.diy == r.diy;
    }
    inline bool operator!=(const MessageReq&l, const MessageReq&r)
    {
        return !(l == r);
    }

    struct MessageBody : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.MessageBody";
        }
        static string MD5()
        {
            return "5d0f3cd88572dc1a73aff1226aaec53a";
        }
        MessageBody(taf::Int64 msgId,const std::string &contentType,const std::string &content,taf::Int64 sendTime,const std::string &diy)
            :msgId(msgId),contentType(contentType),content(content),sendTime(sendTime),diy(diy)
        {
        }
        MessageBody()
        :msgId(0),contentType(""),content(""),sendTime(0),diy("")
        {
        }
        void resetDefautlt()
        {
            msgId = 0;
            contentType = "";
            content = "";
            sendTime = 0;
            diy = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(msgId, 0);
            _os.write(contentType, 1);
            _os.write(content, 2);
            _os.write(sendTime, 3);
            _os.write(diy, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(msgId, 0, false);
            _is.read(contentType, 1, false);
            _is.read(content, 2, false);
            _is.read(sendTime, 3, false);
            _is.read(diy, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(msgId,"msgId");
            _ds.display(contentType,"contentType");
            _ds.display(content,"content");
            _ds.display(sendTime,"sendTime");
            _ds.display(diy,"diy");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(msgId, true);
            _ds.displaySimple(contentType, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(sendTime, true);
            _ds.displaySimple(diy, false);
            return _os;
        }
    public:
        taf::Int64 msgId;
        std::string contentType;
        std::string content;
        taf::Int64 sendTime;
        std::string diy;
    };
    inline bool operator==(const MessageBody&l, const MessageBody&r)
    {
        return l.msgId == r.msgId && l.contentType == r.contentType && l.content == r.content && l.sendTime == r.sendTime && l.diy == r.diy;
    }
    inline bool operator!=(const MessageBody&l, const MessageBody&r)
    {
        return !(l == r);
    }

    struct MessageRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.MessageRsp";
        }
        static string MD5()
        {
            return "7642534a753b23f046b47efcd42aa441";
        }
        MessageRsp(const QUAN::MsgSender &sender,const vector<QUAN::MessageBody> &messageList)
            :sender(sender),messageList(messageList)
        {
        }
        MessageRsp()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(sender, 0);
            _os.write(messageList, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sender, 0, false);
            _is.read(messageList, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(sender,"sender");
            _ds.display(messageList,"messageList");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(sender, true);
            _ds.displaySimple(messageList, false);
            return _os;
        }
    public:
        QUAN::MsgSender sender;
        vector<QUAN::MessageBody> messageList;
    };
    inline bool operator==(const MessageRsp&l, const MessageRsp&r)
    {
        return l.sender == r.sender && l.messageList == r.messageList;
    }
    inline bool operator!=(const MessageRsp&l, const MessageRsp&r)
    {
        return !(l == r);
    }

    struct StatusRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.StatusRsp";
        }
        static string MD5()
        {
            return "3c28d913d8b6de872104298ab7654818";
        }
        StatusRsp(taf::Int64 msgId,const std::string &status)
            :msgId(msgId),status(status)
        {
        }
        StatusRsp()
        :msgId(0),status("")
        {
        }
        void resetDefautlt()
        {
            msgId = 0;
            status = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(msgId, 0);
            _os.write(status, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(msgId, 0, false);
            _is.read(status, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(msgId,"msgId");
            _ds.display(status,"status");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(msgId, true);
            _ds.displaySimple(status, false);
            return _os;
        }
    public:
        taf::Int64 msgId;
        std::string status;
    };
    inline bool operator==(const StatusRsp&l, const StatusRsp&r)
    {
        return l.msgId == r.msgId && l.status == r.status;
    }
    inline bool operator!=(const StatusRsp&l, const StatusRsp&r)
    {
        return !(l == r);
    }

    struct GetSecretByIdReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.GetSecretByIdReq";
        }
        static string MD5()
        {
            return "37a824215cd139f698209400c2d6c949";
        }
        GetSecretByIdReq(const QUAN::UserId &tUserId,const QUAN::SecretInfo &tSecret,const QUAN::ContentInfo &tContent,const QUAN::ContentInfo &tReadContent)
            :tUserId(tUserId),tSecret(tSecret),tContent(tContent),tReadContent(tReadContent)
        {
        }
        GetSecretByIdReq()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(tSecret, 1);
            _os.write(tContent, 2);
            _os.write(tReadContent, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(tSecret, 1, false);
            _is.read(tContent, 2, false);
            _is.read(tReadContent, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(tSecret,"tSecret");
            _ds.display(tContent,"tContent");
            _ds.display(tReadContent,"tReadContent");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(tSecret, true);
            _ds.displaySimple(tContent, true);
            _ds.displaySimple(tReadContent, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        QUAN::SecretInfo tSecret;
        QUAN::ContentInfo tContent;
        QUAN::ContentInfo tReadContent;
    };
    inline bool operator==(const GetSecretByIdReq&l, const GetSecretByIdReq&r)
    {
        return l.tUserId == r.tUserId && l.tSecret == r.tSecret && l.tContent == r.tContent && l.tReadContent == r.tReadContent;
    }
    inline bool operator!=(const GetSecretByIdReq&l, const GetSecretByIdReq&r)
    {
        return !(l == r);
    }

    struct GetSecretByIdRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.GetSecretByIdRsp";
        }
        static string MD5()
        {
            return "330a7ab7981aa2a631dd0a9c6434b1b8";
        }
        GetSecretByIdRsp(const QUAN::SecretInfo &tSecret,const QUAN::ContentInfo &tContent,const QUAN::ContentInfo &tReadContent)
            :tSecret(tSecret),tContent(tContent),tReadContent(tReadContent)
        {
        }
        GetSecretByIdRsp()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tSecret, 0);
            _os.write(tContent, 1);
            _os.write(tReadContent, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tSecret, 0, false);
            _is.read(tContent, 1, false);
            _is.read(tReadContent, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tSecret,"tSecret");
            _ds.display(tContent,"tContent");
            _ds.display(tReadContent,"tReadContent");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tSecret, true);
            _ds.displaySimple(tContent, true);
            _ds.displaySimple(tReadContent, false);
            return _os;
        }
    public:
        QUAN::SecretInfo tSecret;
        QUAN::ContentInfo tContent;
        QUAN::ContentInfo tReadContent;
    };
    inline bool operator==(const GetSecretByIdRsp&l, const GetSecretByIdRsp&r)
    {
        return l.tSecret == r.tSecret && l.tContent == r.tContent && l.tReadContent == r.tReadContent;
    }
    inline bool operator!=(const GetSecretByIdRsp&l, const GetSecretByIdRsp&r)
    {
        return !(l == r);
    }

    struct PushImMsgReq : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.PushImMsgReq";
        }
        static string MD5()
        {
            return "c3d200690b8a63c6ace83bde65465030";
        }
        PushImMsgReq(const QUAN::UserId &tUserId,const std::string &sContent,taf::Int64 senderId,taf::Int64 postId,taf::Int64 commentId,const std::string &source,const std::string &sBadge,taf::Int64 msgId)
            :tUserId(tUserId),sContent(sContent),senderId(senderId),postId(postId),commentId(commentId),source(source),sBadge(sBadge),msgId(msgId)
        {
        }
        PushImMsgReq()
        :sContent(""),senderId(0),postId(0),commentId(0),source(""),sBadge(""),msgId(0)
        {
        }
        void resetDefautlt()
        {
            sContent = "";
            senderId = 0;
            postId = 0;
            commentId = 0;
            source = "";
            sBadge = "";
            msgId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(tUserId, 0);
            _os.write(sContent, 1);
            _os.write(senderId, 2);
            _os.write(postId, 3);
            _os.write(commentId, 4);
            _os.write(source, 5);
            _os.write(sBadge, 6);
            _os.write(msgId, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(tUserId, 0, false);
            _is.read(sContent, 1, false);
            _is.read(senderId, 2, false);
            _is.read(postId, 3, false);
            _is.read(commentId, 4, false);
            _is.read(source, 5, false);
            _is.read(sBadge, 6, false);
            _is.read(msgId, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(tUserId,"tUserId");
            _ds.display(sContent,"sContent");
            _ds.display(senderId,"senderId");
            _ds.display(postId,"postId");
            _ds.display(commentId,"commentId");
            _ds.display(source,"source");
            _ds.display(sBadge,"sBadge");
            _ds.display(msgId,"msgId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(tUserId, true);
            _ds.displaySimple(sContent, true);
            _ds.displaySimple(senderId, true);
            _ds.displaySimple(postId, true);
            _ds.displaySimple(commentId, true);
            _ds.displaySimple(source, true);
            _ds.displaySimple(sBadge, true);
            _ds.displaySimple(msgId, false);
            return _os;
        }
    public:
        QUAN::UserId tUserId;
        std::string sContent;
        taf::Int64 senderId;
        taf::Int64 postId;
        taf::Int64 commentId;
        std::string source;
        std::string sBadge;
        taf::Int64 msgId;
    };
    inline bool operator==(const PushImMsgReq&l, const PushImMsgReq&r)
    {
        return l.tUserId == r.tUserId && l.sContent == r.sContent && l.senderId == r.senderId && l.postId == r.postId && l.commentId == r.commentId && l.source == r.source && l.sBadge == r.sBadge && l.msgId == r.msgId;
    }
    inline bool operator!=(const PushImMsgReq&l, const PushImMsgReq&r)
    {
        return !(l == r);
    }


}

#define QUAN_UserId_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sUA,b.sUA);jce_copy_struct(a.vGuid,b.vGuid);jce_copy_struct(a.lUId,b.lUId);jce_copy_struct(a.sToken,b.sToken);jce_copy_struct(a.iAppId,b.iAppId);

#define QUAN_IdRange_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lBeginId,b.lBeginId);jce_copy_struct(a.lEndId,b.lEndId);

#define QUAN_AddressPair_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sName,b.sName);jce_copy_struct(a.sPhone,b.sPhone);

#define QUAN_AddressLists_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vAddressLists,b.vAddressLists);

#define QUAN_FriendsList_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lUId,b.lUId);jce_copy_struct(a.iRelat,b.iRelat);jce_copy_struct(a.iTimespan,b.iTimespan);

#define QUAN_UserEnrollReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sPhone,b.sPhone);jce_copy_struct(a.sVfyCode,b.sVfyCode);jce_copy_struct(a.sPwd,b.sPwd);

#define QUAN_UserEnrollRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);

#define QUAN_UserLoginReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sPhone,b.sPhone);jce_copy_struct(a.sPwd,b.sPwd);

#define QUAN_UserLoginRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);

#define QUAN_PostAddressListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.vAddressLists,b.vAddressLists);

#define QUAN_PostAddressListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iStatus,b.iStatus);

#define QUAN_SecretInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lSId,b.lSId);jce_copy_struct(a.lUId,b.lUId);jce_copy_struct(a.iColorId,b.iColorId);jce_copy_struct(a.sBitUrl,b.sBitUrl);jce_copy_struct(a.sContent,b.sContent);jce_copy_struct(a.iType,b.iType);jce_copy_struct(a.sLocal,b.sLocal);jce_copy_struct(a.iFavorNum,b.iFavorNum);jce_copy_struct(a.iCmtNum,b.iCmtNum);jce_copy_struct(a.isFavor,b.isFavor);jce_copy_struct(a.isRead,b.isRead);jce_copy_struct(a.isRemove,b.isRemove);jce_copy_struct(a.iNotRead,b.iNotRead);jce_copy_struct(a.iNtfyType,b.iNtfyType);jce_copy_struct(a.iReportNum,b.iReportNum);jce_copy_struct(a.lShareId,b.lShareId);jce_copy_struct(a.lCircleId,b.lCircleId);

#define QUAN_ContentInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lCId,b.lCId);jce_copy_struct(a.lSId,b.lSId);jce_copy_struct(a.lUId,b.lUId);jce_copy_struct(a.isFirst,b.isFirst);jce_copy_struct(a.Time,b.Time);jce_copy_struct(a.sContent,b.sContent);jce_copy_struct(a.iFavorNum,b.iFavorNum);jce_copy_struct(a.isFavor,b.isFavor);jce_copy_struct(a.iPortrait,b.iPortrait);jce_copy_struct(a.bIsMe,b.bIsMe);jce_copy_struct(a.iFloor,b.iFloor);jce_copy_struct(a.isRemove,b.isRemove);

#define QUAN_SecretListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.tRange,b.tRange);jce_copy_struct(a.iCount,b.iCount);jce_copy_struct(a.iType,b.iType);jce_copy_struct(a.sCoord,b.sCoord);

#define QUAN_SecretListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iStatus,b.iStatus);jce_copy_struct(a.lNextBeginId,b.lNextBeginId);jce_copy_struct(a.iLockCount,b.iLockCount);jce_copy_struct(a.vSecrets,b.vSecrets);jce_copy_struct(a.iFriends,b.iFriends);

#define QUAN_ContentListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.lFirstId,b.lFirstId);jce_copy_struct(a.lSId,b.lSId);

#define QUAN_ContentListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iStatus,b.iStatus);jce_copy_struct(a.iFavorNum,b.iFavorNum);jce_copy_struct(a.iCmtNum,b.iCmtNum);jce_copy_struct(a.vContents,b.vContents);jce_copy_struct(a.tSecret,b.tSecret);

#define QUAN_PostSecretReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.sBitUrl,b.sBitUrl);jce_copy_struct(a.iColorId,b.iColorId);jce_copy_struct(a.sContent,b.sContent);jce_copy_struct(a.sLocal,b.sLocal);jce_copy_struct(a.sCoord,b.sCoord);jce_copy_struct(a.sUuid,b.sUuid);jce_copy_struct(a.lCircleId,b.lCircleId);

#define QUAN_PostSecretRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iStatus,b.iStatus);jce_copy_struct(a.lSId,b.lSId);

#define QUAN_PostContentReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.lSId,b.lSId);jce_copy_struct(a.lFirstId,b.lFirstId);jce_copy_struct(a.sContent,b.sContent);jce_copy_struct(a.sUuid,b.sUuid);

#define QUAN_PostContentRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iStatus,b.iStatus);jce_copy_struct(a.tContent,b.tContent);

#define QUAN_PostFavorReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.lId,b.lId);jce_copy_struct(a.lSId,b.lSId);jce_copy_struct(a.iType,b.iType);jce_copy_struct(a.iOp,b.iOp);jce_copy_struct(a.lFavoredId,b.lFavoredId);

#define QUAN_PostFavorRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iStatus,b.iStatus);

#define QUAN_PostReportReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.lSId,b.lSId);jce_copy_struct(a.iType,b.iType);jce_copy_struct(a.lReportedId,b.lReportedId);

#define QUAN_PostReportRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iStatus,b.iStatus);

#define QUAN_CleanTrailReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.lSId,b.lSId);jce_copy_struct(a.lCId,b.lCId);

#define QUAN_CleanTrailRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iStatus,b.iStatus);

#define QUAN_RemoveSecretReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.lUId,b.lUId);jce_copy_struct(a.lSId,b.lSId);

#define QUAN_RemoveSecretRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iStatus,b.iStatus);

#define QUAN_SglSecretReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lSId,b.lSId);jce_copy_struct(a.tUserId,b.tUserId);

#define QUAN_SglSecretRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iStatus,b.iStatus);jce_copy_struct(a.tSecret,b.tSecret);jce_copy_struct(a.vContents,b.vContents);

#define QUAN_ShareSecretReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lSId,b.lSId);jce_copy_struct(a.tUserId,b.tUserId);

#define QUAN_ShareSecretRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iStatus,b.iStatus);

#define QUAN_UserSecretCacheReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tPostReq,b.tPostReq);jce_copy_struct(a.lSId,b.lSId);jce_copy_struct(a.vUIds,b.vUIds);jce_copy_struct(a.iType,b.iType);jce_copy_struct(a.lUId,b.lUId);

#define QUAN_FeedBackReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.sContent,b.sContent);jce_copy_struct(a.sPlatform,b.sPlatform);jce_copy_struct(a.sSystem,b.sSystem);jce_copy_struct(a.sVersion,b.sVersion);

#define QUAN_FeedBackRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iStatus,b.iStatus);

#define QUAN_RemoveContentReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.lSId,b.lSId);jce_copy_struct(a.lCId,b.lCId);

#define QUAN_RemoveContentRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iStatus,b.iStatus);

#define QUAN_SystemListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);

#define QUAN_SystemListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iStatus,b.iStatus);jce_copy_struct(a.vSystems,b.vSystems);

#define QUAN_PushMsgReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.tRange,b.tRange);jce_copy_struct(a.iCount,b.iCount);jce_copy_struct(a.sCoord,b.sCoord);

#define QUAN_PushMsgRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lNextBeginId,b.lNextBeginId);jce_copy_struct(a.vSecrets,b.vSecrets);jce_copy_struct(a.iStatus,b.iStatus);

#define QUAN_GetMsgNumReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);

#define QUAN_GetMsgNumRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iCount,b.iCount);jce_copy_struct(a.iStatus,b.iStatus);

#define QUAN_MsgRmd_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iOp,b.iOp);jce_copy_struct(a.isRead,b.isRead);

#define QUAN_AddMsgReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.lSId,b.lSId);jce_copy_struct(a.lFirstId,b.lFirstId);jce_copy_struct(a.iOp,b.iOp);jce_copy_struct(a.vUserIds,b.vUserIds);

#define QUAN_ChangeMsgReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.lSId,b.lSId);jce_copy_struct(a.iOp,b.iOp);jce_copy_struct(a.lFirstId,b.lFirstId);jce_copy_struct(a.iType,b.iType);

#define QUAN_BindMsgReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.sId,b.sId);jce_copy_struct(a.iType,b.iType);jce_copy_struct(a.channelid,b.channelid);

#define QUAN_AtMsgReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.lSId,b.lSId);jce_copy_struct(a.vUserIds,b.vUserIds);jce_copy_struct(a.vPhones,b.vPhones);

#define QUAN_CircleInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lCircleId,b.lCircleId);jce_copy_struct(a.lCircleType,b.lCircleType);jce_copy_struct(a.sName,b.sName);jce_copy_struct(a.iLastPostTime,b.iLastPostTime);jce_copy_struct(a.iLocationType,b.iLocationType);jce_copy_struct(a.sLocation,b.sLocation);jce_copy_struct(a.sCoord,b.sCoord);jce_copy_struct(a.lSecretCount,b.lSecretCount);jce_copy_struct(a.lConcernCount,b.lConcernCount);jce_copy_struct(a.bAuditState,b.bAuditState);jce_copy_struct(a.iDistance,b.iDistance);jce_copy_struct(a.sCity,b.sCity);jce_copy_struct(a.iLockNum,b.iLockNum);

#define QUAN_CircleGroup_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sTitle,b.sTitle);jce_copy_struct(a.sCity,b.sCity);jce_copy_struct(a.sDistance,b.sDistance);jce_copy_struct(a.vCircleInfo,b.vCircleInfo);

#define QUAN_CreateCircleReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.sName,b.sName);jce_copy_struct(a.sCity,b.sCity);jce_copy_struct(a.iLocationType,b.iLocationType);jce_copy_struct(a.sLocation,b.sLocation);jce_copy_struct(a.sCoord,b.sCoord);

#define QUAN_CreateCircleRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tCircleInfo,b.tCircleInfo);

#define QUAN_SearchCircleReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.sCond,b.sCond);jce_copy_struct(a.sCoord,b.sCoord);

#define QUAN_SearchCircleRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vCircleGroup,b.vCircleGroup);

#define QUAN_GetCircleReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.lCircleType,b.lCircleType);jce_copy_struct(a.sCoord,b.sCoord);

#define QUAN_GetCircleRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vCircleGroup,b.vCircleGroup);

#define QUAN_SetCircleReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.lCircleId,b.lCircleId);jce_copy_struct(a.bIsConcern,b.bIsConcern);

#define QUAN_GetCircleListReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.tRange,b.tRange);jce_copy_struct(a.iCount,b.iCount);jce_copy_struct(a.lCircleId,b.lCircleId);jce_copy_struct(a.sCoord,b.sCoord);jce_copy_struct(a.iType,b.iType);

#define QUAN_GetCircleListRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iStatus,b.iStatus);jce_copy_struct(a.lNextBeginId,b.lNextBeginId);jce_copy_struct(a.vSecrets,b.vSecrets);jce_copy_struct(a.tCircleInfo,b.tCircleInfo);jce_copy_struct(a.iFriends,b.iFriends);

#define QUAN_SysMsgInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lId,b.lId);jce_copy_struct(a.sContent,b.sContent);jce_copy_struct(a.sTime,b.sTime);jce_copy_struct(a.bIsRead,b.bIsRead);jce_copy_struct(a.lCircleId,b.lCircleId);jce_copy_struct(a.bIsPass,b.bIsPass);

#define QUAN_GetSysMsgReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);

#define QUAN_GetSysMsgRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vSysMsgInfo,b.vSysMsgInfo);

#define QUAN_PushSysMsgReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.tSysMsgInfo,b.tSysMsgInfo);

#define QUAN_PushSysMsgRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iStatus,b.iStatus);

#define QUAN_GetNewSysMsgReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);

#define QUAN_GetNewSysMsgRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iCount,b.iCount);

#define QUAN_CircleLocation_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.dLat,b.dLat);jce_copy_struct(a.dLon,b.dLon);jce_copy_struct(a.sCity,b.sCity);jce_copy_struct(a.sLocation,b.sLocation);jce_copy_struct(a.iRadius,b.iRadius);

#define QUAN_MsgSender_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uid,b.uid);jce_copy_struct(a.header,b.header);jce_copy_struct(a.source,b.source);jce_copy_struct(a.postsId,b.postsId);jce_copy_struct(a.commentId,b.commentId);

#define QUAN_MessageReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.msgId,b.msgId);jce_copy_struct(a.receiver,b.receiver);jce_copy_struct(a.content,b.content);jce_copy_struct(a.contentType,b.contentType);jce_copy_struct(a.sender,b.sender);jce_copy_struct(a.diy,b.diy);

#define QUAN_MessageBody_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.msgId,b.msgId);jce_copy_struct(a.contentType,b.contentType);jce_copy_struct(a.content,b.content);jce_copy_struct(a.sendTime,b.sendTime);jce_copy_struct(a.diy,b.diy);

#define QUAN_MessageRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.sender,b.sender);jce_copy_struct(a.messageList,b.messageList);

#define QUAN_StatusRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.msgId,b.msgId);jce_copy_struct(a.status,b.status);

#define QUAN_GetSecretByIdReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.tSecret,b.tSecret);jce_copy_struct(a.tContent,b.tContent);jce_copy_struct(a.tReadContent,b.tReadContent);

#define QUAN_GetSecretByIdRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tSecret,b.tSecret);jce_copy_struct(a.tContent,b.tContent);jce_copy_struct(a.tReadContent,b.tReadContent);

#define QUAN_PushImMsgReq_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.tUserId,b.tUserId);jce_copy_struct(a.sContent,b.sContent);jce_copy_struct(a.senderId,b.senderId);jce_copy_struct(a.postId,b.postId);jce_copy_struct(a.commentId,b.commentId);jce_copy_struct(a.source,b.source);jce_copy_struct(a.sBadge,b.sBadge);jce_copy_struct(a.msgId,b.msgId);



#endif
