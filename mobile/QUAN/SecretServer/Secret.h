// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.4.3 by WSRD Tencent.
// Generated from `Secret.jce'
// **********************************************************************

#ifndef __SECRET_H_
#define __SECRET_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "SecretBase.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "servant/TafCallbacks.h"


namespace QUAN
{
    struct SecretListKey : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.SecretListKey";
        }
        static string MD5()
        {
            return "c5d29a3a3b5e33926ecd936ff3153e6b";
        }
        SecretListKey(taf::Int64 lUId)
            :lUId(lUId)
        {
        }
        SecretListKey()
        :lUId(0)
        {
        }
        void resetDefautlt()
        {
            lUId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lUId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lUId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lUId,"lUId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lUId, false);
            return _os;
        }
    public:
        taf::Int64 lUId;
    };
    inline bool operator==(const SecretListKey&l, const SecretListKey&r)
    {
        return l.lUId == r.lUId;
    }
    inline bool operator!=(const SecretListKey&l, const SecretListKey&r)
    {
        return !(l == r);
    }

    struct IdNum : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.IdNum";
        }
        static string MD5()
        {
            return "bcdab25845af3d13d13a3ffa45b256bd";
        }
        IdNum(taf::Int64 lId,taf::Int32 iNum)
            :lId(lId),iNum(iNum)
        {
        }
        IdNum()
        :lId(0),iNum(0)
        {
        }
        void resetDefautlt()
        {
            lId = 0;
            iNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lId, 0);
            _os.write(iNum, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lId, 0, false);
            _is.read(iNum, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lId,"lId");
            _ds.display(iNum,"iNum");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lId, true);
            _ds.displaySimple(iNum, false);
            return _os;
        }
    public:
        taf::Int64 lId;
        taf::Int32 iNum;
    };
    inline bool operator==(const IdNum&l, const IdNum&r)
    {
        return l.lId == r.lId && l.iNum == r.iNum;
    }
    inline bool operator!=(const IdNum&l, const IdNum&r)
    {
        return !(l == r);
    }

    struct SIdRd : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.SIdRd";
        }
        static string MD5()
        {
            return "ddf0c6ce496e440ea4c71434ff05ccb4";
        }
        SIdRd(taf::Int64 lSId,taf::Bool isRead)
            :lSId(lSId),isRead(isRead)
        {
        }
        SIdRd()
        :lSId(0),isRead(true)
        {
        }
        void resetDefautlt()
        {
            lSId = 0;
            isRead = true;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lSId, 0);
            _os.write(isRead, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lSId, 0, false);
            _is.read(isRead, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lSId,"lSId");
            _ds.display(isRead,"isRead");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lSId, true);
            _ds.displaySimple(isRead, false);
            return _os;
        }
    public:
        taf::Int64 lSId;
        taf::Bool isRead;
    };
    inline bool operator==(const SIdRd&l, const SIdRd&r)
    {
        return l.lSId == r.lSId && l.isRead == r.isRead;
    }
    inline bool operator!=(const SIdRd&l, const SIdRd&r)
    {
        return !(l == r);
    }

    struct SecretRelatMap : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.SecretRelatMap";
        }
        static string MD5()
        {
            return "b08d4f0798a95360bccd8d207fe4b23e";
        }
        SecretRelatMap(const map<taf::Int64, QUAN::IdNum> &mSId,taf::Int32 iTime)
            :mSId(mSId),iTime(iTime)
        {
        }
        SecretRelatMap()
        :iTime(0)
        {
        }
        void resetDefautlt()
        {
            iTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(mSId, 0);
            _os.write(iTime, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(mSId, 0, false);
            _is.read(iTime, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(mSId,"mSId");
            _ds.display(iTime,"iTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(mSId, true);
            _ds.displaySimple(iTime, false);
            return _os;
        }
    public:
        map<taf::Int64, QUAN::IdNum> mSId;
        taf::Int32 iTime;
    };
    inline bool operator==(const SecretRelatMap&l, const SecretRelatMap&r)
    {
        return l.mSId == r.mSId && l.iTime == r.iTime;
    }
    inline bool operator!=(const SecretRelatMap&l, const SecretRelatMap&r)
    {
        return !(l == r);
    }

    struct ContentRelatMap : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.ContentRelatMap";
        }
        static string MD5()
        {
            return "b08d4f0798a95360bccd8d207fe4b23e";
        }
        ContentRelatMap(const map<taf::Int64, QUAN::IdNum> &mCId,taf::Int32 iTime)
            :mCId(mCId),iTime(iTime)
        {
        }
        ContentRelatMap()
        :iTime(0)
        {
        }
        void resetDefautlt()
        {
            iTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(mCId, 0);
            _os.write(iTime, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(mCId, 0, false);
            _is.read(iTime, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(mCId,"mCId");
            _ds.display(iTime,"iTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(mCId, true);
            _ds.displaySimple(iTime, false);
            return _os;
        }
    public:
        map<taf::Int64, QUAN::IdNum> mCId;
        taf::Int32 iTime;
    };
    inline bool operator==(const ContentRelatMap&l, const ContentRelatMap&r)
    {
        return l.mCId == r.mCId && l.iTime == r.iTime;
    }
    inline bool operator!=(const ContentRelatMap&l, const ContentRelatMap&r)
    {
        return !(l == r);
    }

    struct SecretListValue : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.SecretListValue";
        }
        static string MD5()
        {
            return "87765cd3844146e4fb8dc4272d5dac2d";
        }
        SecretListValue(const vector<QUAN::SecretInfo> &vSecrets,const vector<QUAN::SecretInfo> &vAccepts,const QUAN::SecretRelatMap &tFavorScrts,const QUAN::ContentRelatMap &tFavorCnts,const QUAN::SecretRelatMap &tRemoveScrts,taf::Int64 lNextBeginId,taf::Int32 iTime,taf::Int32 iAcceptTime)
            :vSecrets(vSecrets),vAccepts(vAccepts),tFavorScrts(tFavorScrts),tFavorCnts(tFavorCnts),tRemoveScrts(tRemoveScrts),lNextBeginId(lNextBeginId),iTime(iTime),iAcceptTime(iAcceptTime)
        {
        }
        SecretListValue()
        :lNextBeginId(0),iTime(0),iAcceptTime(0)
        {
        }
        void resetDefautlt()
        {
            lNextBeginId = 0;
            iTime = 0;
            iAcceptTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vSecrets, 0);
            _os.write(vAccepts, 1);
            _os.write(tFavorScrts, 2);
            _os.write(tFavorCnts, 3);
            _os.write(tRemoveScrts, 4);
            _os.write(lNextBeginId, 5);
            _os.write(iTime, 6);
            _os.write(iAcceptTime, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vSecrets, 0, false);
            _is.read(vAccepts, 1, false);
            _is.read(tFavorScrts, 2, false);
            _is.read(tFavorCnts, 3, false);
            _is.read(tRemoveScrts, 4, false);
            _is.read(lNextBeginId, 5, false);
            _is.read(iTime, 6, false);
            _is.read(iAcceptTime, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vSecrets,"vSecrets");
            _ds.display(vAccepts,"vAccepts");
            _ds.display(tFavorScrts,"tFavorScrts");
            _ds.display(tFavorCnts,"tFavorCnts");
            _ds.display(tRemoveScrts,"tRemoveScrts");
            _ds.display(lNextBeginId,"lNextBeginId");
            _ds.display(iTime,"iTime");
            _ds.display(iAcceptTime,"iAcceptTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vSecrets, true);
            _ds.displaySimple(vAccepts, true);
            _ds.displaySimple(tFavorScrts, true);
            _ds.displaySimple(tFavorCnts, true);
            _ds.displaySimple(tRemoveScrts, true);
            _ds.displaySimple(lNextBeginId, true);
            _ds.displaySimple(iTime, true);
            _ds.displaySimple(iAcceptTime, false);
            return _os;
        }
    public:
        vector<QUAN::SecretInfo> vSecrets;
        vector<QUAN::SecretInfo> vAccepts;
        QUAN::SecretRelatMap tFavorScrts;
        QUAN::ContentRelatMap tFavorCnts;
        QUAN::SecretRelatMap tRemoveScrts;
        taf::Int64 lNextBeginId;
        taf::Int32 iTime;
        taf::Int32 iAcceptTime;
    };
    inline bool operator==(const SecretListValue&l, const SecretListValue&r)
    {
        return l.vSecrets == r.vSecrets && l.vAccepts == r.vAccepts && l.tFavorScrts == r.tFavorScrts && l.tFavorCnts == r.tFavorCnts && l.tRemoveScrts == r.tRemoveScrts && l.lNextBeginId == r.lNextBeginId && l.iTime == r.iTime && l.iAcceptTime == r.iAcceptTime;
    }
    inline bool operator!=(const SecretListValue&l, const SecretListValue&r)
    {
        return !(l == r);
    }

    struct ContentListKey : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.ContentListKey";
        }
        static string MD5()
        {
            return "c5d29a3a3b5e33926ecd936ff3153e6b";
        }
        ContentListKey(taf::Int64 lSId)
            :lSId(lSId)
        {
        }
        ContentListKey()
        :lSId(0)
        {
        }
        void resetDefautlt()
        {
            lSId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lSId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lSId, 0, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lSId,"lSId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lSId, false);
            return _os;
        }
    public:
        taf::Int64 lSId;
    };
    inline bool operator==(const ContentListKey&l, const ContentListKey&r)
    {
        return l.lSId == r.lSId;
    }
    inline bool operator!=(const ContentListKey&l, const ContentListKey&r)
    {
        return !(l == r);
    }

    struct ContentListValue : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "QUAN.ContentListValue";
        }
        static string MD5()
        {
            return "e9647662decd14dc71401a449c3bced6";
        }
        ContentListValue(const vector<QUAN::ContentInfo> &vContents,taf::Int32 iFavorNum,taf::Int32 iCmtNum,taf::Int32 iTime)
            :vContents(vContents),iFavorNum(iFavorNum),iCmtNum(iCmtNum),iTime(iTime)
        {
        }
        ContentListValue()
        :iFavorNum(0),iCmtNum(0),iTime(0)
        {
        }
        void resetDefautlt()
        {
            iFavorNum = 0;
            iCmtNum = 0;
            iTime = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(vContents, 0);
            _os.write(iFavorNum, 1);
            _os.write(iCmtNum, 2);
            _os.write(iTime, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(vContents, 0, false);
            _is.read(iFavorNum, 1, false);
            _is.read(iCmtNum, 2, false);
            _is.read(iTime, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(vContents,"vContents");
            _ds.display(iFavorNum,"iFavorNum");
            _ds.display(iCmtNum,"iCmtNum");
            _ds.display(iTime,"iTime");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(vContents, true);
            _ds.displaySimple(iFavorNum, true);
            _ds.displaySimple(iCmtNum, true);
            _ds.displaySimple(iTime, false);
            return _os;
        }
    public:
        vector<QUAN::ContentInfo> vContents;
        taf::Int32 iFavorNum;
        taf::Int32 iCmtNum;
        taf::Int32 iTime;
    };
    inline bool operator==(const ContentListValue&l, const ContentListValue&r)
    {
        return l.vContents == r.vContents && l.iFavorNum == r.iFavorNum && l.iCmtNum == r.iCmtNum && l.iTime == r.iTime;
    }
    inline bool operator!=(const ContentListValue&l, const ContentListValue&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class SecretPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~SecretPrxCallback(){}
        virtual void callback_test(taf::Int32 ret)
        { throw std::runtime_error("callback_test() overloading incorrect."); }
        virtual void callback_test_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_test_exception() overloading incorrect."); }

        virtual void callback_getSecretList(taf::Int32 ret, const QUAN::SecretListRsp& tRsp)
        { throw std::runtime_error("callback_getSecretList() overloading incorrect."); }
        virtual void callback_getSecretList_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getSecretList_exception() overloading incorrect."); }

        virtual void callback_getSecretContent(taf::Int32 ret, const QUAN::ContentListRsp& tRsp)
        { throw std::runtime_error("callback_getSecretContent() overloading incorrect."); }
        virtual void callback_getSecretContent_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getSecretContent_exception() overloading incorrect."); }

        virtual void callback_postSecret(taf::Int32 ret, const QUAN::PostSecretRsp& tRsp)
        { throw std::runtime_error("callback_postSecret() overloading incorrect."); }
        virtual void callback_postSecret_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_postSecret_exception() overloading incorrect."); }

        virtual void callback_postContent(taf::Int32 ret, const QUAN::PostContentRsp& tRsp)
        { throw std::runtime_error("callback_postContent() overloading incorrect."); }
        virtual void callback_postContent_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_postContent_exception() overloading incorrect."); }

        virtual void callback_postFavor(taf::Int32 ret, const QUAN::PostFavorRsp& tRsp)
        { throw std::runtime_error("callback_postFavor() overloading incorrect."); }
        virtual void callback_postFavor_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_postFavor_exception() overloading incorrect."); }

        virtual void callback_postReport(taf::Int32 ret, const QUAN::PostReportRsp& tRsp)
        { throw std::runtime_error("callback_postReport() overloading incorrect."); }
        virtual void callback_postReport_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_postReport_exception() overloading incorrect."); }

        virtual void callback_cleanTrail(taf::Int32 ret, const QUAN::CleanTrailRsp& tRsp)
        { throw std::runtime_error("callback_cleanTrail() overloading incorrect."); }
        virtual void callback_cleanTrail_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_cleanTrail_exception() overloading incorrect."); }

        virtual void callback_removeSecret(taf::Int32 ret, const QUAN::RemoveSecretRsp& tRsp)
        { throw std::runtime_error("callback_removeSecret() overloading incorrect."); }
        virtual void callback_removeSecret_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_removeSecret_exception() overloading incorrect."); }

        virtual void callback_getUserFavorRelat(taf::Int32 ret, const QUAN::SecretRelatMap& tFavorScrts)
        { throw std::runtime_error("callback_getUserFavorRelat() overloading incorrect."); }
        virtual void callback_getUserFavorRelat_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getUserFavorRelat_exception() overloading incorrect."); }

        virtual void callback_getUserRemoveRelat(taf::Int32 ret, const QUAN::SecretRelatMap& tRemoveScrts)
        { throw std::runtime_error("callback_getUserRemoveRelat() overloading incorrect."); }
        virtual void callback_getUserRemoveRelat_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getUserRemoveRelat_exception() overloading incorrect."); }

        virtual void callback_getUserBatchSecrets(taf::Int32 ret, const vector<QUAN::SecretInfo>& vSecrets)
        { throw std::runtime_error("callback_getUserBatchSecrets() overloading incorrect."); }
        virtual void callback_getUserBatchSecrets_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getUserBatchSecrets_exception() overloading incorrect."); }

        virtual void callback_getUserSingleSecret(taf::Int32 ret, const QUAN::SglSecretRsp& tRsp)
        { throw std::runtime_error("callback_getUserSingleSecret() overloading incorrect."); }
        virtual void callback_getUserSingleSecret_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_getUserSingleSecret_exception() overloading incorrect."); }

        virtual void callback_setUserSecretShare(taf::Int32 ret, const QUAN::ShareSecretRsp& tRsp)
        { throw std::runtime_error("callback_setUserSecretShare() overloading incorrect."); }
        virtual void callback_setUserSecretShare_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_setUserSecretShare_exception() overloading incorrect."); }

        virtual void callback_setUserSecretToCache(taf::Int32 ret)
        { throw std::runtime_error("callback_setUserSecretToCache() overloading incorrect."); }
        virtual void callback_setUserSecretToCache_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_setUserSecretToCache_exception() overloading incorrect."); }

        virtual void callback_feedBack(taf::Int32 ret, const QUAN::FeedBackRsp& tRsp)
        { throw std::runtime_error("callback_feedBack() overloading incorrect."); }
        virtual void callback_feedBack_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_feedBack_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<SecretPrxCallback> SecretPrxCallbackPtr;

    /* callback of lambda_async support proxy for client */
    template<typename ...Args>
    class SecretPrxCallbackImp:public SecretPrxCallback,public tafAsync::TafCallback<Args...>
    {
    public:
        virtual void callback_test(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_test_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getSecretList(taf::Int32 ret, const QUAN::SecretListRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getSecretList_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getSecretContent(taf::Int32 ret, const QUAN::ContentListRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getSecretContent_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_postSecret(taf::Int32 ret, const QUAN::PostSecretRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_postSecret_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_postContent(taf::Int32 ret, const QUAN::PostContentRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_postContent_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_postFavor(taf::Int32 ret, const QUAN::PostFavorRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_postFavor_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_postReport(taf::Int32 ret, const QUAN::PostReportRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_postReport_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_cleanTrail(taf::Int32 ret, const QUAN::CleanTrailRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_cleanTrail_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_removeSecret(taf::Int32 ret, const QUAN::RemoveSecretRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_removeSecret_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getUserFavorRelat(taf::Int32 ret, const QUAN::SecretRelatMap& tFavorScrts)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tFavorScrts);}
        virtual void callback_getUserFavorRelat_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getUserRemoveRelat(taf::Int32 ret, const QUAN::SecretRelatMap& tRemoveScrts)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRemoveScrts);}
        virtual void callback_getUserRemoveRelat_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getUserBatchSecrets(taf::Int32 ret, const vector<QUAN::SecretInfo>& vSecrets)
        { tafAsync::TafCallback<Args...>::doCalls(ret,vSecrets);}
        virtual void callback_getUserBatchSecrets_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_getUserSingleSecret(taf::Int32 ret, const QUAN::SglSecretRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_getUserSingleSecret_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_setUserSecretShare(taf::Int32 ret, const QUAN::ShareSecretRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_setUserSecretShare_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_setUserSecretToCache(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::doCalls(ret);}
        virtual void callback_setUserSecretToCache_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

        virtual void callback_feedBack(taf::Int32 ret, const QUAN::FeedBackRsp& tRsp)
        { tafAsync::TafCallback<Args...>::doCalls(ret,tRsp);}
        virtual void callback_feedBack_exception(taf::Int32 ret)
        { tafAsync::TafCallback<Args...>::handleException(ret);}

    };
    /* proxy for client */
    class SecretProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        typedef SecretPrxCallbackImp<taf::Int32> taf_testCb;
        typedef SecretPrxCallbackImp<taf::Int32, const QUAN::SecretListRsp&> taf_getSecretListCb;
        typedef SecretPrxCallbackImp<taf::Int32, const QUAN::ContentListRsp&> taf_getSecretContentCb;
        typedef SecretPrxCallbackImp<taf::Int32, const QUAN::PostSecretRsp&> taf_postSecretCb;
        typedef SecretPrxCallbackImp<taf::Int32, const QUAN::PostContentRsp&> taf_postContentCb;
        typedef SecretPrxCallbackImp<taf::Int32, const QUAN::PostFavorRsp&> taf_postFavorCb;
        typedef SecretPrxCallbackImp<taf::Int32, const QUAN::PostReportRsp&> taf_postReportCb;
        typedef SecretPrxCallbackImp<taf::Int32, const QUAN::CleanTrailRsp&> taf_cleanTrailCb;
        typedef SecretPrxCallbackImp<taf::Int32, const QUAN::RemoveSecretRsp&> taf_removeSecretCb;
        typedef SecretPrxCallbackImp<taf::Int32, const QUAN::SecretRelatMap&> taf_getUserFavorRelatCb;
        typedef SecretPrxCallbackImp<taf::Int32, const QUAN::SecretRelatMap&> taf_getUserRemoveRelatCb;
        typedef SecretPrxCallbackImp<taf::Int32, const vector<QUAN::SecretInfo>&> taf_getUserBatchSecretsCb;
        typedef SecretPrxCallbackImp<taf::Int32, const QUAN::SglSecretRsp&> taf_getUserSingleSecretCb;
        typedef SecretPrxCallbackImp<taf::Int32, const QUAN::ShareSecretRsp&> taf_setUserSecretShareCb;
        typedef SecretPrxCallbackImp<taf::Int32> taf_setUserSecretToCacheCb;
        typedef SecretPrxCallbackImp<taf::Int32, const QUAN::FeedBackRsp&> taf_feedBackCb;

        taf::Int32 test(taf::Int64 lId,const map<string, string> &context = TAF_CONTEXT());
        void async_test(SecretPrxCallbackPtr callback,taf::Int64 lId,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_testCb> async_test(taf::Int64 lId,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_testCb> cb=new taf_testCb; async_test(cb,lId,context);return cb; }

        taf::Int32 getSecretList(const QUAN::SecretListReq & tReq,QUAN::SecretListRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getSecretList(SecretPrxCallbackPtr callback,const QUAN::SecretListReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getSecretListCb> async_getSecretList(const QUAN::SecretListReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getSecretListCb> cb=new taf_getSecretListCb; async_getSecretList(cb,tReq,context);return cb; }

        taf::Int32 getSecretContent(const QUAN::ContentListReq & tReq,QUAN::ContentListRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getSecretContent(SecretPrxCallbackPtr callback,const QUAN::ContentListReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getSecretContentCb> async_getSecretContent(const QUAN::ContentListReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getSecretContentCb> cb=new taf_getSecretContentCb; async_getSecretContent(cb,tReq,context);return cb; }

        taf::Int32 postSecret(const QUAN::PostSecretReq & tReq,QUAN::PostSecretRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_postSecret(SecretPrxCallbackPtr callback,const QUAN::PostSecretReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_postSecretCb> async_postSecret(const QUAN::PostSecretReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_postSecretCb> cb=new taf_postSecretCb; async_postSecret(cb,tReq,context);return cb; }

        taf::Int32 postContent(const QUAN::PostContentReq & tReq,QUAN::PostContentRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_postContent(SecretPrxCallbackPtr callback,const QUAN::PostContentReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_postContentCb> async_postContent(const QUAN::PostContentReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_postContentCb> cb=new taf_postContentCb; async_postContent(cb,tReq,context);return cb; }

        taf::Int32 postFavor(const QUAN::PostFavorReq & tReq,QUAN::PostFavorRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_postFavor(SecretPrxCallbackPtr callback,const QUAN::PostFavorReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_postFavorCb> async_postFavor(const QUAN::PostFavorReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_postFavorCb> cb=new taf_postFavorCb; async_postFavor(cb,tReq,context);return cb; }

        taf::Int32 postReport(const QUAN::PostReportReq & tReq,QUAN::PostReportRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_postReport(SecretPrxCallbackPtr callback,const QUAN::PostReportReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_postReportCb> async_postReport(const QUAN::PostReportReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_postReportCb> cb=new taf_postReportCb; async_postReport(cb,tReq,context);return cb; }

        taf::Int32 cleanTrail(const QUAN::CleanTrailReq & tReq,QUAN::CleanTrailRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_cleanTrail(SecretPrxCallbackPtr callback,const QUAN::CleanTrailReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_cleanTrailCb> async_cleanTrail(const QUAN::CleanTrailReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_cleanTrailCb> cb=new taf_cleanTrailCb; async_cleanTrail(cb,tReq,context);return cb; }

        taf::Int32 removeSecret(const QUAN::RemoveSecretReq & tReq,QUAN::RemoveSecretRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_removeSecret(SecretPrxCallbackPtr callback,const QUAN::RemoveSecretReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_removeSecretCb> async_removeSecret(const QUAN::RemoveSecretReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_removeSecretCb> cb=new taf_removeSecretCb; async_removeSecret(cb,tReq,context);return cb; }

        taf::Int32 getUserFavorRelat(taf::Int64 lUId,QUAN::SecretRelatMap &tFavorScrts,const map<string, string> &context = TAF_CONTEXT());
        void async_getUserFavorRelat(SecretPrxCallbackPtr callback,taf::Int64 lUId,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getUserFavorRelatCb> async_getUserFavorRelat(taf::Int64 lUId,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getUserFavorRelatCb> cb=new taf_getUserFavorRelatCb; async_getUserFavorRelat(cb,lUId,context);return cb; }

        taf::Int32 getUserRemoveRelat(taf::Int64 lUId,QUAN::SecretRelatMap &tRemoveScrts,const map<string, string> &context = TAF_CONTEXT());
        void async_getUserRemoveRelat(SecretPrxCallbackPtr callback,taf::Int64 lUId,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getUserRemoveRelatCb> async_getUserRemoveRelat(taf::Int64 lUId,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getUserRemoveRelatCb> cb=new taf_getUserRemoveRelatCb; async_getUserRemoveRelat(cb,lUId,context);return cb; }

        taf::Int32 getUserBatchSecrets(taf::Int64 lUId,const map<taf::Int64, QUAN::MsgRmd> & mSIds,vector<QUAN::SecretInfo> &vSecrets,const map<string, string> &context = TAF_CONTEXT());
        void async_getUserBatchSecrets(SecretPrxCallbackPtr callback,taf::Int64 lUId,const map<taf::Int64, QUAN::MsgRmd> & mSIds,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getUserBatchSecretsCb> async_getUserBatchSecrets(taf::Int64 lUId,const map<taf::Int64, QUAN::MsgRmd> & mSIds,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getUserBatchSecretsCb> cb=new taf_getUserBatchSecretsCb; async_getUserBatchSecrets(cb,lUId,mSIds,context);return cb; }

        taf::Int32 getUserSingleSecret(const QUAN::SglSecretReq & tReq,QUAN::SglSecretRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_getUserSingleSecret(SecretPrxCallbackPtr callback,const QUAN::SglSecretReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_getUserSingleSecretCb> async_getUserSingleSecret(const QUAN::SglSecretReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_getUserSingleSecretCb> cb=new taf_getUserSingleSecretCb; async_getUserSingleSecret(cb,tReq,context);return cb; }

        taf::Int32 setUserSecretShare(const QUAN::ShareSecretReq & tReq,QUAN::ShareSecretRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_setUserSecretShare(SecretPrxCallbackPtr callback,const QUAN::ShareSecretReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_setUserSecretShareCb> async_setUserSecretShare(const QUAN::ShareSecretReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_setUserSecretShareCb> cb=new taf_setUserSecretShareCb; async_setUserSecretShare(cb,tReq,context);return cb; }

        taf::Int32 setUserSecretToCache(const QUAN::UserSecretCacheReq & tReq,const map<string, string> &context = TAF_CONTEXT());
        void async_setUserSecretToCache(SecretPrxCallbackPtr callback,const QUAN::UserSecretCacheReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_setUserSecretToCacheCb> async_setUserSecretToCache(const QUAN::UserSecretCacheReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_setUserSecretToCacheCb> cb=new taf_setUserSecretToCacheCb; async_setUserSecretToCache(cb,tReq,context);return cb; }

        taf::Int32 feedBack(const QUAN::FeedBackReq & tReq,QUAN::FeedBackRsp &tRsp,const map<string, string> &context = TAF_CONTEXT());
        void async_feedBack(SecretPrxCallbackPtr callback,const QUAN::FeedBackReq & tReq,const map<string, string> &context = TAF_CONTEXT());

        tafAsync::AutoRef<taf_feedBackCb> async_feedBack(const QUAN::FeedBackReq & tReq,const map<string, string> &context = TAF_CONTEXT())
        { TC_AutoPtr<taf_feedBackCb> cb=new taf_feedBackCb; async_feedBack(cb,tReq,context);return cb; }

        SecretProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<SecretProxy> SecretPrx;

    /* servant for server */
    class Secret : public taf::Servant
    {
    public:
        virtual ~Secret(){}
        virtual taf::Int32 test(taf::Int64 lId,taf::JceCurrentPtr current) = 0;
        static void async_response_test(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 getSecretList(const QUAN::SecretListReq & tReq,QUAN::SecretListRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getSecretList(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::SecretListRsp &tRsp);

        virtual taf::Int32 getSecretContent(const QUAN::ContentListReq & tReq,QUAN::ContentListRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getSecretContent(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::ContentListRsp &tRsp);

        virtual taf::Int32 postSecret(const QUAN::PostSecretReq & tReq,QUAN::PostSecretRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_postSecret(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::PostSecretRsp &tRsp);

        virtual taf::Int32 postContent(const QUAN::PostContentReq & tReq,QUAN::PostContentRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_postContent(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::PostContentRsp &tRsp);

        virtual taf::Int32 postFavor(const QUAN::PostFavorReq & tReq,QUAN::PostFavorRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_postFavor(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::PostFavorRsp &tRsp);

        virtual taf::Int32 postReport(const QUAN::PostReportReq & tReq,QUAN::PostReportRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_postReport(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::PostReportRsp &tRsp);

        virtual taf::Int32 cleanTrail(const QUAN::CleanTrailReq & tReq,QUAN::CleanTrailRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_cleanTrail(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::CleanTrailRsp &tRsp);

        virtual taf::Int32 removeSecret(const QUAN::RemoveSecretReq & tReq,QUAN::RemoveSecretRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_removeSecret(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::RemoveSecretRsp &tRsp);

        virtual taf::Int32 getUserFavorRelat(taf::Int64 lUId,QUAN::SecretRelatMap &tFavorScrts,taf::JceCurrentPtr current) = 0;
        static void async_response_getUserFavorRelat(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::SecretRelatMap &tFavorScrts);

        virtual taf::Int32 getUserRemoveRelat(taf::Int64 lUId,QUAN::SecretRelatMap &tRemoveScrts,taf::JceCurrentPtr current) = 0;
        static void async_response_getUserRemoveRelat(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::SecretRelatMap &tRemoveScrts);

        virtual taf::Int32 getUserBatchSecrets(taf::Int64 lUId,const map<taf::Int64, QUAN::MsgRmd> & mSIds,vector<QUAN::SecretInfo> &vSecrets,taf::JceCurrentPtr current) = 0;
        static void async_response_getUserBatchSecrets(taf::JceCurrentPtr current, taf::Int32 _ret, const vector<QUAN::SecretInfo> &vSecrets);

        virtual taf::Int32 getUserSingleSecret(const QUAN::SglSecretReq & tReq,QUAN::SglSecretRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_getUserSingleSecret(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::SglSecretRsp &tRsp);

        virtual taf::Int32 setUserSecretShare(const QUAN::ShareSecretReq & tReq,QUAN::ShareSecretRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_setUserSecretShare(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::ShareSecretRsp &tRsp);

        virtual taf::Int32 setUserSecretToCache(const QUAN::UserSecretCacheReq & tReq,taf::JceCurrentPtr current) = 0;
        static void async_response_setUserSecretToCache(taf::JceCurrentPtr current, taf::Int32 _ret);

        virtual taf::Int32 feedBack(const QUAN::FeedBackReq & tReq,QUAN::FeedBackRsp &tRsp,taf::JceCurrentPtr current) = 0;
        static void async_response_feedBack(taf::JceCurrentPtr current, taf::Int32 _ret, const QUAN::FeedBackRsp &tRsp);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}

#define QUAN_SecretListKey_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lUId,b.lUId);

#define QUAN_IdNum_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lId,b.lId);jce_copy_struct(a.iNum,b.iNum);

#define QUAN_SIdRd_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lSId,b.lSId);jce_copy_struct(a.isRead,b.isRead);

#define QUAN_SecretRelatMap_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.mSId,b.mSId);jce_copy_struct(a.iTime,b.iTime);

#define QUAN_ContentRelatMap_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.mCId,b.mCId);jce_copy_struct(a.iTime,b.iTime);

#define QUAN_SecretListValue_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vSecrets,b.vSecrets);jce_copy_struct(a.vAccepts,b.vAccepts);jce_copy_struct(a.tFavorScrts,b.tFavorScrts);jce_copy_struct(a.tFavorCnts,b.tFavorCnts);jce_copy_struct(a.tRemoveScrts,b.tRemoveScrts);jce_copy_struct(a.lNextBeginId,b.lNextBeginId);jce_copy_struct(a.iTime,b.iTime);jce_copy_struct(a.iAcceptTime,b.iAcceptTime);

#define QUAN_ContentListKey_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lSId,b.lSId);

#define QUAN_ContentListValue_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.vContents,b.vContents);jce_copy_struct(a.iFavorNum,b.iFavorNum);jce_copy_struct(a.iCmtNum,b.iCmtNum);jce_copy_struct(a.iTime,b.iTime);



#include "Secret.hpp"
#endif
