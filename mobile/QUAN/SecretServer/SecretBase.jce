 
module QUAN 
{
    //============================================用户基本信息===========================================
    //用户Id信息
    struct UserId
    {
        0 optional  string               sUA;                   // 平台&版本&渠道  ios&1.3.2&store  adr&1.3.2&baidu 
        1 optional  vector<byte>         vGuid;                 // 设备ID
        2 optional  long                 lUId;                  // 用户ID   本字段不使用手机号码
        3 optional  string               sToken;                // 用户token
        4  optional  int                 iAppId;                // 应用id
    };

    //请求段
    struct IdRange
    {
        0 optional long lBeginId;     //请求开始ID,      大于该值则不传    请求最新则-1
        1 optional long lEndId;       //请求的最后ID值,  小于或等于该值则不传   请求最早则-1
    };
    key[IdRange,lBeginId];
    //即传输的ID范围只会   iBegin>= ID > iEndId

    // 姓名-电话 结构
    struct AddressPair
    {
        0 optional  string               sName;                    // 姓名
        1 optional  string               sPhone;                   // 手机号
    };

    // 通讯录结构
    struct AddressLists
    {
        0 optional  vector<AddressPair>    vAddressLists;         // 通讯录
    };

    struct FriendsList
    {
        0  optional   long     lUId;         //   用户id
        1  optional   int      iRelat;       //   关系   0 - 1度  1 - 2度  3 - 1度+2度
        2  optional   int      iTimespan=-1;
    };
    key[FriendsList,iTimespan];

    //============================================用户注册相关信息===========================================

    //用户注册、找回忘记密码请求
    struct UserEnrollReq
    {
        0 optional  string               sPhone;                   // 手机号
        1 optional  string               sVfyCode;                 // 验证码
        2 optional  string               sPwd;                     // 密码
    };

    //用户注册、找回忘记密码返回
    struct UserEnrollRsp
    {
        0 optional UserId                tUserId;     // 用户ID
    };    

    //============================================用户登陆相关信息===========================================

    //用户登录请求
    struct UserLoginReq
    {
        0 optional  string               sPhone;                   // 手机号
        1 optional  string               sPwd;                     // 密码
    };

    //用户登录返回
    struct UserLoginRsp
    {
        0 optional UserId                tUserId;     // 用户ID
    };   

    //============================================用户通讯录信息===========================================

    //通讯录上传请求 
    struct PostAddressListReq
    {
        0 optional UserId                tUserId;                 // 用户ID
        1 optional vector<byte>          vAddressLists;           // 通讯录   
    };

    //通讯录上传返回
    struct PostAddressListRsp
    {
        0 optional int                   iStatus;                 // 返回结果
    };

    //=====================帖子信息相关=============================================

    // 拉取帖子类型
    enum GetType {
        GET_SECRET_ALL = 0,
        GET_SECRET_FRIENDS = 1
    };

    // 帖子来源
    enum SType {
        FRIEND   = 0,    // 朋友
        FFRIEND  = 1,    // 朋友的朋友
        RECMD    = 2,    // 推荐
        SYS      = 3,    // 系统引导
        ME       = 4,    // 用户自己
        GUIDE    = 5,    // 引导帖
        CRCLCK   = 7,    // 树洞没有发布权限
        CIRCLE   = 8,    // 树洞
        NONE     = 6     // 没关系
    };

    // 帖子来源
    enum IdType {
        SECRET  = 0,    // 帖子
        CONTENT = 1,   // 内容
    };

    // 赞类型
    enum FavorType {
        FAVORY   = 0,    // 赞
        FAVORN   = 1,    // 取消赞
        REPORTY  = 2,    // 举报
        REPORTN  = 3,    // 取消举报
        REMOVEY  = 4,    // 移除 
        REMOVEN  = 5,    // 取消移除
        CLEANY   = 6,    // 清除
        CLEANN   = 7,    // 取消清除
    };

    // 用户推缓存标志
    enum UserCacheType {
        USER_FAVORY   = 0,    // 赞
        USER_FAVORN   = 1,    // 取消赞
        USER_REMOVEY  = 2,    // 移除 
        USER_POST     = 3,    // 发帖
        USER_CONTENT  = 4,    // 评论
        USER_CLEAN    = 5,    // 清除痕迹
        USER_REMOVEY_CONT  = 6    // 移除 
    };

    // 帖子列表
    struct SecretInfo
    {   
        0  optional long    lSId;            // 帖子ID
        1  optional long    lUId;            // 发帖用户ID
        2  optional int     iColorId;        // 色块ID
        3  optional string  sBitUrl;         // 图URL
        4  optional string  sContent;        // 内容
        5  optional int     iType;           // 来源 SType
        6  optional string  sLocal;          // 地理位置(来源type为推荐时需要来源城市名)
        7  optional int     iFavorNum;       // 赞数
        8  optional int     iCmtNum;         // 评论数
        9  optional bool    isFavor=false;   // 是否赞
        10 optional bool    isRead;          // 是否已读
        11 optional int     isRemove;        // 是否移除
        12 optional int     iNotRead;        // 未读评论数
	13 optional int     iNtfyType;       // 消息类型 0 -普通评论   1 -@消息
        14 optional int     iReportNum;      // 举报数
        15 optional long    lShareId;        // 分享用户ID
        16 optional long    lCircleId;       // 树洞ID
    };  
    key[SecretInfo, lSId];

    // 评论内容
    struct ContentInfo
    {
        0  optional long    lCId;            // 评论ID
        1  optional long    lSId;            // 父ID
        2  optional long    lUId;            // 评论者ID
        3  optional bool    isFirst=false;   // 是否楼主
        4  optional string  Time;            // 时间 (YYYY-MM-DD HH:MM)
        5  optional string  sContent;        // 内容
        6  optional int     iFavorNum;       // 赞数
        7  optional bool    isFavor=false;   // 是否赞
        8  optional int     iPortrait;       // 头像ID
        9  optional bool    bIsMe=false;     // 是否自己
        10 optional int     iFloor;          // 评论楼层
        11 optional int     isRemove;        // 是否移除
    };
    key[ContentInfo, lCId];

    //=====================查询帖子列表相关=============================================

    // 查询帖子列表请求
    struct SecretListReq
    {
        0 optional UserId                tUserId;     // 用户ID
        1 optional IdRange               tRange;      //返回的ID范围
        2 optional int                   iCount;      // 请求数量
        3 optional int                   iType;       // 0-全部 1-朋友
        4 optional string                sCoord;      // Lat,Lon
    };

    // 查询帖子列表返回
    struct SecretListRsp
    {
        0 optional int                   iStatus;        // 返回结果
        1 optional long                  lNextBeginId;   // 返回下次请求的开始ID
        2 optional int                   iLockCount;     // 朋友圈未解锁帖子数
        3 optional vector<SecretInfo>    vSecrets;       // 帖子列表       20条
        4 optional int                   iFriends;       // 一度好友数
    };


    //=====================查询帖子详情相关=============================================

    // 帖子详情请求  不分页
    struct ContentListReq
    {
        0 optional UserId                tUserId;   // 用户ID
        1 optional long                  lFirstId;  // 帖子发表者ID
        2 optional long                  lSId;      // 帖子ID
    };

    // 帖子详情返回
    struct ContentListRsp
    {
        0 optional int                   iStatus;     // 返回结果
        1 optional int                   iFavorNum;      // 帖子的最新赞数
        2 optional int                   iCmtNum;        // 帖子的最新评论数
        3 optional vector<ContentInfo>   vContents;      // 帖子详情列表
        4 optional SecretInfo            tSecret;        // 帖子内容
    };

    //=====================发表帖子相关=============================================

    // 发表帖子请求
    struct PostSecretReq
    {
        0 optional UserId                tUserId;     // 用户ID
        1 optional string                sBitUrl;     // 图片url
        2 optional int                   iColorId;    // 色块ID
        3 optional string                sContent;    // 内容
        4 optional string                sLocal;      // 地理位置
        5 optional string                sCoord;      // 坐标
        6 optional string                sUuid;   
        7 optional long                  lCircleId;
    };

    // 发表帖子返回
    struct PostSecretRsp
    {
        0 optional int                   iStatus;      // 返回结果
        1 optional long                  lSId;   
    };

    //=====================发表评论相关=============================================

    // 发表评论请求
    struct PostContentReq
    {
        0 optional UserId                tUserId;     // 用户ID
        1 optional long                  lSId;        // 帖子ID
        2 optional long                  lFirstId;    // 帖子ID
        3 optional string                sContent;    // 内容
        4 optional string                sUuid;   
    };

    // 发表评论返回
    struct PostContentRsp
    {
        0 optional int                   iStatus;     // 返回结果
        1 optional ContentInfo           tContent;    // 评论内容
    };

    //=====================点赞相关=============================================

    // 点赞请求
    struct PostFavorReq
    {
        0 optional UserId                tUserId;     // 用户ID
        1 optional long                  lId;         // ID
        2 optional long                  lSId;        // 如果ID为评论ID需要上传对应的帖子ID
        3 optional int                   iType;       // 类型 0 帖子   1 评论
        4 optional int                   iOp;         // 类型 0 赞     1 取消赞
        5 optional long                  lFavoredId;  // 被赞评论对应的帖子的作者ID 
    };

    // 点赞返回
    struct PostFavorRsp
    {
        0 optional int                   iStatus;     // 返回结果
    };

    //=====================举报相关=============================================

    // 举报请求
    struct PostReportReq
    {
        0 optional UserId                tUserId;      // 用户ID
        1 optional long                  lSId;         // 帖子ID
        2 optional int                   iType;        // 类型 0 帖子   1 评论
        3 optional long                  lReportedId;  // 被举报用户ID 
    };

    // 举报返回
    struct PostReportRsp
    {
        0 optional int                   iStatus;     // 返回结果
    };

    //=====================清除痕迹相关=============================================

    // 清除痕迹请求
    struct CleanTrailReq
    {
        0 optional UserId                tUserId;     // 用户ID
        1 optional long                  lSId;        // 帖子ID  传0代表清全部
        2 optional long                  lCId;        // 评论ID  传0代表清全部
    };

    // 清除痕迹返回
    struct CleanTrailRsp
    {
        0 optional int                   iStatus;     // 返回结果
    };

    //=====================移除帖子相关=============================================

    // 移除帖子请求
    struct RemoveSecretReq
    {
        0 optional UserId                tUserId;     // 用户ID
        1 optional long                  lUId;        // 被移除用户ID
        2 optional long                  lSId;        // 被移除帖子ID
    };

    // 移除帖子返回
    struct RemoveSecretRsp
    {
        0 optional int                   iStatus;     // 返回结果
    };

    //=====================分享接口相关=============================================

    // 根据ID取帖子内容请求
    struct SglSecretReq
    {
        0 optional long                  lSId;        // 帖子ID
        1 optional UserId                tUserId;     // 用户ID
    };

    struct SglSecretRsp
    {
        0 optional int                   iStatus;     // 返回结果
        1 optional SecretInfo            tSecret;     // 帖子内容
        2 optional vector<ContentInfo>   vContents;   // 内容
    };

    // 根据ID设置帖子为分享
    struct ShareSecretReq
    {
        0 optional long                  lSId;        // 帖子ID
        1 optional UserId                tUserId;     // 用户ID
    };

    struct ShareSecretRsp
    {
        0 optional int                   iStatus;     // 返回结果
    };

    //=====================设置收帖箱cache相关=============================================

    //批量更新粉丝收帖箱
    struct UserSecretCacheReq
    {
        0 optional PostSecretReq         tPostReq;    // 发帖请求
        1 optional long                  lSId;        // 帖子ID
        2 optional vector<FriendsList>   vUIds;       // 用户好友的ID
        4 optional long                  lUId;        // 用户自己的ID
        3 optional int                   iType;       // 详见UserCacheType枚举
    };

    //=====================反馈相关=============================================

    //反馈
    struct FeedBackReq
    {
        0 optional UserId                tUserId;     // 发帖请求
        1 optional string                sContent;
        2 optional string                sPlatform;
        3 optional string                sSystem;      
        4 optional string                sVersion;      
    };

    //反馈
    struct FeedBackRsp
    {
        0 optional int                   iStatus;    
    };

    //=====================移除评论=============================================
    // 移除帖子请求
    struct RemoveContentReq
    {
        0 optional UserId                tUserId;     // 用户ID
        1 optional long                  lSId;        // 被移除帖子ID
        2 optional long                  lCId;        // 被移除评论ID
    };

    // 移除帖子返回
    struct RemoveContentRsp
    {
        0 optional int                   iStatus;     // 返回结果
    };

    //=====================系统引导=============================================
    // 系统引导帖请求
    struct SystemListReq
    {
        0 optional UserId                tUserId;     // 用户ID
    };

    // 系统引导帖返回
    struct SystemListRsp
    {
        0 optional int                   iStatus;      // 返回结果
        1 optional vector<SecretInfo>    vSystems;     // 返回结果
    };

    //=====================消息提醒接口相关=============================================

    //消息提醒请求  
    struct PushMsgReq  
    {
        0 optional UserId                tUserId;     // 用户ID 
        1 optional IdRange               tRange;      //返回的ID范围
        2 optional int                   iCount;      // 请求数量
        3 optional string                sCoord;      // 坐标
    };

    //消息提醒请求  
    struct PushMsgRsp  
    {
        0 optional long                  lNextBeginId;   // 返回下次请求的开始ID
        1 optional vector<SecretInfo>    vSecrets;       // 帖子列表       20条
        2 optional int                   iStatus;        // 结果
    };

    //消息提醒请求  
    struct GetMsgNumReq  
    {
        0 optional UserId                tUserId;     // 用户ID 
    };

    //消息提醒请求  
    struct GetMsgNumRsp  
    {
        0 optional int                   iCount;     // 未读数
        1 optional int                   iStatus;    // 结果
    };

    struct MsgRmd
    {
        0  optional  int          iOp;         // 操作
        2  optional  bool         isRead;      // 是否已读
    };

    enum RtnStat 
    {
        SUCCESS = 0,       // 成功
        FAILURE = -1,      // 失败
        TIMEOUT = 1        // 失败
    };

	enum NotifyType {
		AT_CMT = 0,
		AT_MSG = 1,
		AT_FVR = 2
	};

    enum MSGOP 
    {
        CONT  = 0,      // 评论
        FAVOR = 1,      // 点赞
        CONT_FAVOR = 2, // 评论和点赞
        CLEAN_MSG = 4,  // 清除消息
        FRD_RECMD = 5   // 好友推荐
    };

    enum MSGSTAT 
    {
        NOTRD  = 0,    // 未读
        READED = 1     // 已读
    };

    enum BINDTYPE 
    {
        MSG_BIND   = 0,    // 绑定
        MSG_UNBIND = 1     // 解绑定
    };

    struct AddMsgReq 
    {
        0  optional  UserId         tUserId;     // 用户ID
        1  optional  long           lSId;        // 帖子ID
        2  optional  long           lFirstId;    // 帖子的作者ID
        3  optional  int            iOp;         // 操作 0-评论 1-点赞
        4  optional  vector<long>   vUserIds;    // 操作 0-评论 1-点赞
    };
 
    struct ChangeMsgReq 
    {
        0  optional  UserId   tUserId;     // 用户ID
        1  optional  long     lSId;        // 帖子ID
        2  optional  int      iOp;         // 操作 0-未读 1-已读
        3  optional  long     lFirstId;    // 楼主ID
        4  optional  long     iType;       // 类型 1-CONT_FAVOR更新 2-CLEAN清除 
    };

    struct BindMsgReq 
    {
        0  optional  UserId   tUserId;     // 用户ID
        1  optional  string   sId;         //
        2  optional  int      iType;       // 0 - 绑定 1 - 解绑定
        3  optional  string   channelid;   
    };

    struct AtMsgReq 
    {
        0  optional  UserId   tUserId;           // 用户ID
        1  optional  long     lSId;              // 帖子ID
        2  optional  vector<long>     vUserIds;   // 用户ID
        3  optional  vector<string>   vPhones;    // 电话号码
    }; 

    //=====================树洞接口相关=============================================

    enum ELocaitionType
    {
        ECommunity=3,          // 社区
        EOffice=2,             // 公司
        EShcool=1,             // 学校
    };

    enum ECircleType
    {
        ENone=0,
        ENearBy=1,             // 附近
        EConcern=2,            // 关注
        EAccessable=4,         // 可以发布
        ERecomm=8,             // 推荐
        ENearByAll=16
    };

    struct CircleInfo
    {
        0 optional long lCircleId;
        1 optional long lCircleType;      //由ECircleType 与运算得出
        2 optional string sName;
        3 optional int iLastPostTime;
        4 optional int iLocationType;
        5 optional string sLocation;
        6 optional string sCoord;
        7 optional long lSecretCount;
        8 optional long lConcernCount;
        9 optional bool bAuditState=false;
        10 optional int iDistance = -1;
        11 optional string sCity;
        12 optional int iLockNum;
    };

    struct CircleGroup
    {
        0 optional string sTitle;
        1 optional string sCity;
        2 optional string sDistance;
        3 optional vector<CircleInfo> vCircleInfo;
    };

    // 创建树洞请求
    struct CreateCircleReq
    {
        0 optional UserId tUserId;
        1 optional string sName;
        2 optional string sCity;
        3 optional int iLocationType;
        4 optional string sLocation;
        5 optional string sCoord;
    };

    // 创建树洞响应
    struct CreateCircleRsp
    {
        0 optional CircleInfo tCircleInfo;
    };

    // 搜索树洞请求
    struct SearchCircleReq
    {
        0 optional UserId tUserId;
        1 optional string sCond;
        2 optional string sCoord;
    };

    // 搜索树洞响应
    struct SearchCircleRsp
    {
        0 optional vector<CircleGroup> vCircleGroup;
    };

    // 获取树洞列表请求
    struct GetCircleReq
    {
        0 optional UserId tUserId;
        1 optional int lCircleType;
        2 optional string sCoord;
    };

    // 获取树洞列表响应
    struct GetCircleRsp
    {
        0 optional vector<CircleGroup> vCircleGroup;
    };

    // 设置树洞关注
    struct SetCircleReq
    {
        0 optional UserId tUserId;
        1 optional long lCircleId; 
        2 optional bool bIsConcern;
    };

    // 查询树洞列表请求
    struct GetCircleListReq
    {
        0 optional UserId                tUserId;     // 用户ID
        1 optional IdRange               tRange;      //返回的ID范围
        2 optional int                   iCount;      // 请求数量
        3 optional long                  lCircleId;   // 圈子ID
        4 optional string                sCoord;      // Lat,Lon
        5 optional int                   iType;       // 0-通讯录 1-树洞帖子
    };

    // 查询树洞列表返回
    struct GetCircleListRsp
    {
        0 optional int                   iStatus;        // 返回结果
        1 optional long                  lNextBeginId;   // 返回下次请求的开始ID
        2 optional vector<SecretInfo>    vSecrets;       // 帖子列表       20条
        3 optional CircleInfo            tCircleInfo;    // 圈子信息
        4 optional int                   iFriends;       // 一度好友数
    };

    // 系统消息结构
    struct SysMsgInfo
    {
        0 optional long      lId;         
        1 optional string    sContent;
        2 optional string    sTime;
        3 optional bool      bIsRead;
        4 optional long      lCircleId;
        5 optional bool      bIsPass;
    };

    // 获取用户自己的系统通知请求
    struct GetSysMsgReq
    {
        0 optional UserId                tUserId;
    };

    // 用户自己的系统通知响应
    struct GetSysMsgRsp 
    {
        0 optional vector<SysMsgInfo>    vSysMsgInfo; 
    };

    // 推送系统消息请求
    struct PushSysMsgReq
    {
        0 optional UserId                tUserId;
        1 optional SysMsgInfo            tSysMsgInfo;
    };

    // 推送系统消息响应
    struct PushSysMsgRsp
    {
        0 optional int                   iStatus;
    };

    // 获取用户自己的系统通知请求
    struct GetNewSysMsgReq
    {
        0 optional UserId                tUserId;
    };

    struct GetNewSysMsgRsp
    {
        0 optional int           iCount;
    };

    struct CircleLocation
    {   
        0 optional double dLat;
        1 optional double dLon;
        2 optional string sCity;
        3 optional string sLocation;
        4 optional int    iRadius;
    }; 

    // 2.1私信
    struct MsgSender
    {
        0 optional long uid;
        1 optional int header;
        2 optional string source;
        3 optional long postsId;
        4 optional long commentId;
    };

    struct MessageReq 
    {
        0 optional long msgId;
        1 optional long receiver;
        2 optional string content;
        3 optional string contentType;
        4 optional MsgSender sender;
        5 optional string diy;
    };

    struct MessageBody
    {
        0 optional long   msgId;
        1 optional string contentType;
        2 optional string content;
        3 optional long   sendTime;
        4 optional string diy;
    };

    struct MessageRsp
    {
        0 optional MsgSender sender;
        1 optional vector<MessageBody> messageList;
    };

    struct StatusRsp
    {
        0 optional long msgId;
        1 optional string status;
    };

    // 通过ID获取帖子或评论
    struct GetSecretByIdReq 
    {
        0 optional UserId      tUserId;
        1 optional SecretInfo  tSecret;
        2 optional ContentInfo tContent;
        3 optional ContentInfo tReadContent;
    };

    struct GetSecretByIdRsp 
    {
        0 optional SecretInfo  tSecret;
        1 optional ContentInfo tContent;
        2 optional ContentInfo tReadContent;
    };

    // IM推送消息
    struct PushImMsgReq 
    {
        0 optional UserId      tUserId;
        1 optional string      sContent;
        2 optional long        senderId;
        3 optional long        postId;
        4 optional long        commentId;
        5 optional string      source;
        6 optional string      sBadge;
        7 optional long        msgId;
    };
};
