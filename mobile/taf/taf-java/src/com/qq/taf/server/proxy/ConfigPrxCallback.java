// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 1.3.1 by WSRD Tencent.
// Generated from `Config.jce'
// **********************************************************************

package com.qq.taf.server.proxy;

public abstract class ConfigPrxCallback extends com.qq.taf.proxy.ServantProxyCallback
{
    protected String __server__Config_all[] = 
    {
        "ListConfig",
        "checkConfig",
        "loadConfig",
        "loadConfigByHost"
    };

    protected String sServerEncoding = "GBK";
    public int setServerEncoding(String se){
        sServerEncoding = se;
        return 0;
    }

    public abstract void callback_ListConfig(int _ret, String[] vf);

    public abstract void callback_ListConfig_exception(int _iRet);

    public abstract void callback_checkConfig(int _ret, String result);

    public abstract void callback_checkConfig_exception(int _iRet);

    public abstract void callback_loadConfig(int _ret, String config);

    public abstract void callback_loadConfig_exception(int _iRet);

    public abstract void callback_loadConfigByHost(int _ret, String config);

    public abstract void callback_loadConfigByHost_exception(int _iRet);

    final public int _onDispatch(String sFuncName, com.qq.taf.ResponsePacket response)
    {

        int iPos = java.util.Arrays.binarySearch(__server__Config_all, sFuncName);
        if(iPos < 0 || iPos >= 4) return -1; //or throw execption?
        switch(iPos)
        {
            case 0:
            {
                if ( response.iRet != com.qq.taf.cnst.JCESERVERSUCCESS.value )
                {
                    callback_ListConfig_exception(response.iRet);
                    return response.iRet;
                }
                com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(response.sBuffer);
                _is.setServerEncoding(sServerEncoding);
                int _ret = 0;
                _ret = (int) _is.read(_ret, 0, true);

                String[] vf = (String[]) new String[1];
                String __var_2 = "";
                ((String[])vf)[0] = __var_2;
                vf = (String[]) _is.read(vf, 3, true);

                callback_ListConfig(_ret, vf);
                break;
            }
            case 1:
            {
                if ( response.iRet != com.qq.taf.cnst.JCESERVERSUCCESS.value )
                {
                    callback_checkConfig_exception(response.iRet);
                    return response.iRet;
                }
                com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(response.sBuffer);
                _is.setServerEncoding(sServerEncoding);
                int _ret = 0;
                _ret = (int) _is.read(_ret, 0, true);

                String result = "";
                result = (String) _is.read(result, 4, true);

                callback_checkConfig(_ret, result);
                break;
            }
            case 2:
            {
                if ( response.iRet != com.qq.taf.cnst.JCESERVERSUCCESS.value )
                {
                    callback_loadConfig_exception(response.iRet);
                    return response.iRet;
                }
                com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(response.sBuffer);
                _is.setServerEncoding(sServerEncoding);
                int _ret = 0;
                _ret = (int) _is.read(_ret, 0, true);

                String config = "";
                config = (String) _is.read(config, 4, true);

                callback_loadConfig(_ret, config);
                break;
            }
            case 3:
            {
                if ( response.iRet != com.qq.taf.cnst.JCESERVERSUCCESS.value )
                {
                    callback_loadConfigByHost_exception(response.iRet);
                    return response.iRet;
                }
                com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(response.sBuffer);
                _is.setServerEncoding(sServerEncoding);
                int _ret = 0;
                _ret = (int) _is.read(_ret, 0, true);

                String config = "";
                config = (String) _is.read(config, 4, true);

                callback_loadConfigByHost(_ret, config);
                break;
            }
        }
        return 0;
    }
}
