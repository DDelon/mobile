// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.4.3 by WSRD Tencent.
// Generated from `DemoServant.jce'
// **********************************************************************

#ifndef __DEMOSERVANT_H_
#define __DEMOSERVANT_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace DemoApp
{

    /* callback of async proxy for client */
    class DemoServantPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~DemoServantPrxCallback(){}
        virtual void callback_test(taf::Int32 ret)
        { throw std::runtime_error("callback_test() overloading incorrect."); }
        virtual void callback_test_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_test_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<DemoServantPrxCallback> DemoServantPrxCallbackPtr;

    /* proxy for client */
    class DemoServantProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;
        taf::Int32 test(const map<string, string> &context = TAF_CONTEXT());
        void async_test(DemoServantPrxCallbackPtr callback,const map<string, string> &context = TAF_CONTEXT());

        DemoServantProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<DemoServantProxy> DemoServantPrx;

    /* servant for server */
    class DemoServant : public taf::Servant
    {
    public:
        virtual ~DemoServant(){}
        virtual taf::Int32 test(taf::JceCurrentPtr current) = 0;
        static void async_response_test(taf::JceCurrentPtr current, taf::Int32 _ret);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}



#endif
