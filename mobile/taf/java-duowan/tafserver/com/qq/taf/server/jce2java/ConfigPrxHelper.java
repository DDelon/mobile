// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 1.3.1 by WSRD Tencent.
// Generated from `Config.jce'
// **********************************************************************

package com.qq.taf.server.jce2java;

public final class ConfigPrxHelper extends com.qq.taf.proxy.ServantProxy implements ConfigPrx
{

    public ConfigPrxHelper taf_hash(int hashCode)
    {
        super.taf_hash(hashCode);
        return this;
    }

    public java.util.Map __defaultContext()
    {
        java.util.HashMap _ctx = new java.util.HashMap();
        return _ctx;
    }

    protected String sServerEncoding = "GBK";
    public int setServerEncoding(String se){
        sServerEncoding = se;
        return 0;
    }

    public int ListConfig(String app, String server, com.qq.taf.holder.JceArrayHolder vf)
    {
        return ListConfig(app, server, vf, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int ListConfig(String app, String server, com.qq.taf.holder.JceArrayHolder vf, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(app, 1);
        _os.write(server, 2);
        if(vf.value != null)         _os.write(vf.value, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> status = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("ListConfig", _sBuffer, __ctx, status);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        vf.value = (String[]) new String[1];
        String __var_1 = "";
        ((String[])vf.value)[0] = __var_1;
        vf.value = (String[]) _is.read(vf.value, 3, true);
        return _ret;
    }

    public void async_ListConfig(com.qq.taf.server.jce2java.ConfigPrxCallback callback, String app, String server)
    {
        async_ListConfig(callback, app, server, __defaultContext());
    }

    public void async_ListConfig(com.qq.taf.server.jce2java.ConfigPrxCallback callback, String app, String server, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(app, 1);
        _os.write(server, 2);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> status = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "ListConfig", _sBuffer, __ctx, status);

    }

    public int checkConfig(String appServerName, String filename, String host, com.qq.taf.holder.JceStringHolder result)
    {
        return checkConfig(appServerName, filename, host, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int checkConfig(String appServerName, String filename, String host, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(appServerName, 1);
        _os.write(filename, 2);
        _os.write(host, 3);
        if(result.value != null)         _os.write(result.value, 4);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> status = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("checkConfig", _sBuffer, __ctx, status);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 4, true);
        return _ret;
    }

    public void async_checkConfig(com.qq.taf.server.jce2java.ConfigPrxCallback callback, String appServerName, String filename, String host)
    {
        async_checkConfig(callback, appServerName, filename, host, __defaultContext());
    }

    public void async_checkConfig(com.qq.taf.server.jce2java.ConfigPrxCallback callback, String appServerName, String filename, String host, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(appServerName, 1);
        _os.write(filename, 2);
        _os.write(host, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> status = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "checkConfig", _sBuffer, __ctx, status);

    }

    public int loadConfig(String app, String server, String filename, com.qq.taf.holder.JceStringHolder config)
    {
        return loadConfig(app, server, filename, config, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int loadConfig(String app, String server, String filename, com.qq.taf.holder.JceStringHolder config, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(app, 1);
        _os.write(server, 2);
        _os.write(filename, 3);
        if(config.value != null)         _os.write(config.value, 4);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> status = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("loadConfig", _sBuffer, __ctx, status);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        config.value = "";
        config.value = (String) _is.read(config.value, 4, true);
        return _ret;
    }

    public void async_loadConfig(com.qq.taf.server.jce2java.ConfigPrxCallback callback, String app, String server, String filename)
    {
        async_loadConfig(callback, app, server, filename, __defaultContext());
    }

    public void async_loadConfig(com.qq.taf.server.jce2java.ConfigPrxCallback callback, String app, String server, String filename, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(app, 1);
        _os.write(server, 2);
        _os.write(filename, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> status = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "loadConfig", _sBuffer, __ctx, status);

    }

    public int loadConfigByHost(String appServerName, String filename, String host, com.qq.taf.holder.JceStringHolder config)
    {
        return loadConfigByHost(appServerName, filename, host, config, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int loadConfigByHost(String appServerName, String filename, String host, com.qq.taf.holder.JceStringHolder config, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(appServerName, 1);
        _os.write(filename, 2);
        _os.write(host, 3);
        if(config.value != null)         _os.write(config.value, 4);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> status = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("loadConfigByHost", _sBuffer, __ctx, status);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        config.value = "";
        config.value = (String) _is.read(config.value, 4, true);
        return _ret;
    }

    public void async_loadConfigByHost(com.qq.taf.server.jce2java.ConfigPrxCallback callback, String appServerName, String filename, String host)
    {
        async_loadConfigByHost(callback, appServerName, filename, host, __defaultContext());
    }

    public void async_loadConfigByHost(com.qq.taf.server.jce2java.ConfigPrxCallback callback, String appServerName, String filename, String host, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(appServerName, 1);
        _os.write(filename, 2);
        _os.write(host, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> status = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "loadConfigByHost", _sBuffer, __ctx, status);

    }

}
