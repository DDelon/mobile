
module Test
{
	/*
    interface Test
    {
        int echo(int t);
    };
	*/
	///////////////////////////////////////////////////////////////////////////
	struct MyInfo
	{
		0 require int i;
		1 require string s;
	};
	key[MyInfo, i, s];
	///////////////////////////////////////////////////////////////////////////
	struct TestInfo
	{
		0 require bool b;
		1 require byte by;
		2 require short si;
		3 require int   ii;
		4 require long  li;
		5 require float f;
		6 require double d;
		7 require string s;
		8 require vector<MyInfo> vt;
		9 require vector<string> vs;
		10 require map<string, string> m;
		11 require vector<map<string,string>> vm;
		12 require map<vector<string>,vector<string>> mv;
	};
	key[TestInfo, li, ii, b];
	///////////////////////////////////////////////////////////////////////////
	interface TestBase
	{
		int testStr(int id, string si, out string so);
		int testVectorByte(int id, vector<byte> vi, out vector<byte> vo);
		int testVectorInt(int id, vector<int> vi, out vector<int> vo);
		int testVectorStr(int id, vector<string> vi, out vector<string> vo);
		int testVectorShort(int id, vector<short> vi, out vector<short> vo);
		int testVectorFloat(int id, vector<float> vi, out vector<float> vo);
		int testVectorDouble(int id, vector<double> vi, out vector<double> vo);
		int testMapByte(int id, map<byte, string> mi, out map<byte, string> mo);
		int testMapInt(int id, map<int, int> mi, out map<int, int> mo);
		int testMapStr(int id, map<string, string> mi, out map<string, string> mo);
		int testMapIntFloat(int id, map<int, float> mi, out map<int, float> mo); 
		int testMapIntDouble(int id, map<int, double> mi, out map<int, double> mo);
		int testMapIntStr(int id, map<int, string> mi, out map<int, string> mo);
	};
	///////////////////////////////////////////////////////////////////////////
	interface TestExt
	{
		int testMyInfo(int id, MyInfo mi, out MyInfo mo);
		int testTestInfo(int id, TestInfo ti, out TestInfo to);
		int testMapStruct(int id, map<int, MyInfo> mi, out map<int, MyInfo> mo);
		int testVectorStruct(int id, vector<TestInfo> vi, out vector<TestInfo> vo);
	};
	///////////////////////////////////////////////////////////////////////////
};

