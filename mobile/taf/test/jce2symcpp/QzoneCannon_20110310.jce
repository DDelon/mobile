module cannon
{
	struct Profile
	{
		1 require long uin;
		2 require string nickname;
		3 require string qzonename;
		4 require byte vip;
		5 optional byte gender;
		6 optional byte age;
		7 optional int birthday;
		8 optional byte astro;
		9 optional byte marriage;
		10 optional string country;
		11 optional string province;
		12 optional string city;
		13 optional string Portrait;	
		14 optional string birthdaystr;
	};

	struct BlogTitle
	{
		1 require long uin;
		2 require int blogid;
		3 require string title;
		4 optional int read;
		5 optional int comment;
		6 optional int effect;
		7 optional int pubdate;
		8 optional string category;
		9 optional string content;
		10 optional int rights;
	};

	struct BlogInfo
	{
		1 require long uin;
		2 require int blogid;
		3 require string title;
		4 require string content;
		5 require string sign;
		6 require string cat;
		7 require int pubdate;
		8 optional int effect;
		9 optional int read;
		10 optional int comment;
		11 optional long authorid;
		12 optional string authorname;
	};

	struct CommentReply
	{
		1 require long uin;
		2 require string nickname;
		3 require string content;
		4 optional int pubdate;
	};

	struct BlogComment
	{
		1 require int blogid;
		2 require int cmtid;
		3 require long userid;
		4 require string username;
		5 require string content;
		6 require int pubdate;
		7 optional string sign;
		8 optional int archive;
		9 optional int effect;
		10 optional vector<CommentReply> replylist;
		11 optional int replyCount;
		12 optional int replistsize;
	};

	struct Visitor
	{
		1 require long uin;
		2 require string name;
		3 optional int visittime;
		4 optional string portrait;
		5 optional string lastmood;
	};

	struct MessageReply
	{
		1 require long uin;
		2 require string nickname;
		3 require string content;
		4 optional int pubdate;
	};

	struct GuestMessage
	{
		1 require int msgid;
		2 require long userid;
		3 require string username;
		4 require string content;
		5 require int pubdate;
		6 optional string sign;
		7 optional int archive;
		8 optional vector<MessageReply> replylist;
		9 optional int replistsize;
	    10 optional bool isCommon;
	};

	struct Mood
	{
		1 require long uin;
		2 require string nickname;
		3 require string moodid;
		4 require int emotion;
		5 require string content;
		6 require int pubdate;
		7 require int replycount;
		8 optional string tid;
		9 optional vector<CommentReply> replylist;
		10 optional int replistsize;
		11 optional bool isforward;
		12 optional string oricontent;
		13 optional string orisourcename;
		14 optional string oriuinname;
		15 optional long oriuin;
		16 optional int oricreatetime;
		17 optional int orisum;
		18 optional string oritid;
		19 optional int richtype;
		20 optional string richval1;
		21 optional string richval2;
		22 optional int orit1source;//转播时原文的来源id
		23 optional int t1source;//此说说的来源id
		24 optional string addr;//lbs的地址
		25 optional int posx;//lbs坐标x，结果右移6位的结果
		26 optional int posy;//lbs坐标y，结果右移6位的结果
	};

	struct Album
	{
		1 require byte privacy;
		2 require long uin;
		3 require string albumid;
		4 require string title;
		5 require string cover;
		6 require int total;
		7 optional string password;
		8 optional int createtime;
		9 optional int updatetime;
	};

	struct Photo
	{
		1 require long uin;
		2 require string albumid;
		3 require string photoid;
		4 require string title;
		5 require string desc;
		6 require int pubdate;
		7 require string thumbnail;
		8 require string url;
		9 optional string damnimgurl;
		10 optional string SmarlSizeUrl;
		11 optional string albumname;
		12 optional int albumnum;
		13 optional int cmtnum;
		14 optional int width;
		15 optional int height;
	};
	struct SmallPhoto
	{
		1 require string photoid;
		2 require bool hascmt;		
		3 optional string title;
	};

	struct QzoneFeed
	{
		1 require byte state;
		2 require long opuin;
		3 require string opname;
		4 require int pubdate;
		5 require string feedname;
		6 require vector<byte> feeddata;
		7 optional byte feedtype;
	};

	struct BlogFeed
	{
		1 require byte type;
		2 require int blogid;
		3 require string title;
		4 optional string summary;
		5 optional string image;
		6 optional long authorid;
		7 optional string authorname;
		8 require int cmtnum;
		9 optional vector<BlogComment> commnetlist;
	        10 optional int comlistsize;
		11 optional string image2;
		12 optional string image3;
	};

	struct CommentFeed
	{
		1 require byte type;
		2 require long uin;
		3 require int blogid;
		4 require int cmtid;
		5 require string title;
		6 require string comment;
		7 require int pubdate;
		8 optional vector<CommentReply> replylist;
        9 optional long cmtuin;
        10 optional string cmtnick;
        11 optional int replynum;
        12 optional int replistsize;
	13 optional string cmtimg;
	};

	struct MessageFeed
	{
		1 require byte type;
		2 require long uin;
		3 require int msgid;
		4 require string message;
		5 require int pubdate;
		6 optional vector<MessageReply> replylist;
		7 optional int replistsize;
	};

	struct MoodFeed
	{
		1 require byte type;
		2 require string  moodid;
		3 require string mood;
		4 optional string cmt;
		5 optional int replycount;
		6 optional long mooduin;
		7 optional string moodnick;
		8 optional string cmtnick;
		9 optional long cmtuin;
		10 optional int cmttime;
		11 optional vector<Mood> replylist;
		12 optional int act;
		13 optional int cmtnum;
		14 optional string  cmtid;
		15 optional string  stringmoodid;
		16 optional string  stringcmtid;
		17 optional int richtype;
		18 optional string sourcename;
		19 optional string url1;
		20 optional string url2;
                21 optional int replistsize;
		22 optional bool isforward;
		23 optional string lastfwdcontent;
		24 optional string orisourcename;
		25 optional string oriname;
		26 optional long oriuin;
		27 optional int oritime;
		28 optional int orisum;
		29 optional string orimoodid;
		30 optional int orit1source;
		31 optional int t1source;
		32 optional string addr;//lbs的地址
		33 optional int posx;//lbs坐标x，结果右移6位的结果
		34 optional int posy;//lbs坐标y，结果右移6位的结果
	};

	struct PhotoUploadFeed
	{
		1 require string albumid;
		2 require string albumname;
		3 require string photoid;
		4 require string photourl;
		5 require byte privacy;
		6 optional string photoid2;
		7 optional string photourl2;
		8 optional string photoid3;
		9 optional string photourl3;
		10 optional vector<CommentReply> replylist;
		11 optional int replistsize;
		12 optional int replycount;
		13 optional byte type;
	};

	struct PhotoCommentFeed
	{
		1 require byte type;
		2 require string albumid;
		3 require string photoid; 
		4 require string title;     
		5 require string photourl;
		6 require string comment;
		7 require int pubdate;
		8 optional vector<CommentReply> replylist;
		9 optional long cmtuin;
		10 optional int cmtid;
		11 optional long albumuin;
		12 optional int replistsize;
	};
		struct MoreFeed
	{
		1 require int begintime;
		2 require int endtime;
		3 require int sum;
	};
		struct ShareFeed
	{
		1 require int type;
		2 require string title;
		3 require string reason; 
		4 require long resuin;
		5 require string reanickname;
		6 require string resid;
		7 require long shareuin;
	    8 require string sharenickname;
		9 require int sharecount;
		10 optional string albumId;
		11 optional vector<string> imageslist;
		12 optional int imalistsize;
		13 require  string summary;
		14 require bool isPassive;
	};
    struct SimpleUserInfo
    {
        1 require long userid;
        2 require string nickname;
        3 require string qzonename;
        4 require int gender;
        5 require  int viplevel;
        6 require string remark;
    };
    struct PhotoReply
    {
        1 require long replyuserid;
        2 require int replytime;
        3 require string  replycontent;
        4 require string replynickname;
     };
    struct PhotoCmt
    {
        1 require long cmtuserid;
        2 require string albumid;
        3 require string lloc;
        4 require string sloc;
        5 require int cmtid;
        6 require int cmttime;
        7 require string cmtcontent;
        8 require string nickname;
        9 require int replynum;
        10 optional vector<PhotoReply> replylist;
    };
    struct Category
    {
        1 require string name;
        2 require int count;
    };
    struct Group
    {
        1 require int groupid;
        2 require string groupname;
    };  
    struct GroupFriend
    {
        1 require long uin;
        2 require int groupid;
    };  
    struct FriendNick
    {
        1 require long uin;
        2 require string nick;
        3 require string remark;
    };
	struct GPSPoint
	{
			//以下经度、纬度数值均为相应坐标*1000,000，即把小数点右移6位(因为WUP的float精确度支持不够)
			0 require int lat =900000000; 	//纬度,缺省表示无GPS坐标
			1 require int lon =900000000; 	//经度
			2 require int alt =-10000000;   // 海拨
	};
	struct GSMCell
	{
			0 require short mcc	= -1;// 国家码, mobile country code.中国是460
			1 require short mnc	= -1;// 网络码, mobile network code.移动是0, 联通是1
			2 require int lac	= -1;// 区域码, location area code
			3 require int cellid	= -1;// cell id
	};  
		
		
//		struct BirthdayFeed
//		{
//			1 require vector<int> uins;
//			2 require string solar;
//		};
		//好友生日相关信息
		struct BirthdayInfo
		{
			1 require long uin;
			2 require string nick;
			3 require bool isSend;
			4 require string birthday;
		};
		
		struct GiftFeed
		{
			1 require string content;
			2 require long itemId;
			3 require string itemName;
			4 require string preFormat;
		};
		struct PrivBlog//私密日志
		{
			1 require string title;
			2 require int blogId;
			3 require int pubTime;
			4 require bool isQuote;
			5 require bool isHasPic;
			6 optional string content;//只有查询正文的时候才有这个信息
		};

		struct UserSimpleStatus
		{
			1 require string mood;
			2 require string photourl;
			3 require string nickname;
			4 require long uin;
		};
 
		struct ClientQzoneApp
		{
			1 require string title;
			2 require int mark;
			3 require string url;
			4 require string pic;
			5 optional int appid;
		};


    //以下三个消息为 QQ Service 和 QZone 通过MSF 通信的消息。
     struct QzoneAndMsfMsgPkg
    {
         1 require int version;
         2 require int commandID;
         3 require long loginUIN;
         4 require string loginNickname;
         5 require byte isNightModeSkin;
         6 require byte apnID;
         7 require string sid;
         8 optional vector<byte> paramBuf;
    };
    struct OpenMainpageMsgParam
    {
         1 require byte tabID;
         2 require long friendUIN;
    };
    struct OpenFeedMsgParam
    { 
         1 require vector<byte> feedData;
         2 optional int feedIndex;
    };
};
