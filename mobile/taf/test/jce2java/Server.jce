
module Server1
{
    struct AInfo
    {
        0 require int i;
        1 require string s;
    };
    key[AInfo, i, s];

    enum ETest
    {
        E1,
        E2,
        E3
    };

    struct TestInfo
    {
    	0 require bool b;
    	1 require byte by;
    	2 require short si;
    	3 require int   ii;
    	4 require long  li;
    	5 require float f;
    	6 require double d;
    	7 require string s;
    	8 require vector<string> vs;
    	9 require map<string, string> m;
    	10 require vector<map<string,string> > vm;
    	11 require vector<vector<vector<string> > > vvv;
    	12 require vector<vector<map<string, vector<string> > > > vvmv;
        13 require vector<AInfo> vst;
    	14 require vector<float> vf;
    };
    key[TestInfo, li, ii, b];

    interface Test
    {
        int test(TestInfo t);
        TestInfo get(TestInfo info);
        int getOut(int i, out AInfo ai1, out AInfo ai2);
        string echo(string s);
        ETest testETest(ETest t);
        int echo_int(int t);
    };
};

module Server2
{
    struct TestInfo
    {
    	0 require vector<Server1::TestInfo> vt;
    };

    interface TestEx
    {
    	int test(Server1::TestInfo t);
    	int testEx(TestInfo t);
    };
};


