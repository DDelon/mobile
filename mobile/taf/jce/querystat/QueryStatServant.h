// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.5.7
// Generated from `QueryStatServant.jce'
// **********************************************************************

#ifndef __QUERYSTATSERVANT_H_
#define __QUERYSTATSERVANT_H_

#include <map>
#include <string>
#include <vector>
#include "jce/Jce.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"


namespace taf
{

    /* callback of async proxy for client */
    class queryDataPrxCallback: public taf::ServantProxyCallback
    {
    public:
        virtual ~queryDataPrxCallback(){}
        virtual void callback_query(taf::Int32 ret, const std::string& result)
        { throw std::runtime_error("callback_query() overloading incorrect."); }
        virtual void callback_query_exception(taf::Int32 ret)
        { throw std::runtime_error("callback_query_exception() overloading incorrect."); }

    public:
        int onDispatch(taf::ReqMessagePtr msg);
    };
    typedef taf::TC_AutoPtr<queryDataPrxCallback> queryDataPrxCallbackPtr;

    /* proxy for client */
    class queryDataProxy : public taf::ServantProxy
    {
    public:
        typedef map<string, string> TAF_CONTEXT;

        taf::Int32 query(const std::string & input,std::string &result,const map<string, string> &context = TAF_CONTEXT());
        void async_query(queryDataPrxCallbackPtr callback,const std::string & input,const map<string, string> &context = TAF_CONTEXT());

        queryDataProxy* taf_hash(int64_t key);
    };
    typedef taf::TC_AutoPtr<queryDataProxy> queryDataPrx;

    /* servant for server */
    class queryData : public taf::Servant
    {
    public:
        virtual ~queryData(){}
        virtual taf::Int32 query(const std::string & input,std::string &result,taf::JceCurrentPtr current) = 0;
        static void async_response_query(taf::JceCurrentPtr current, taf::Int32 _ret, const std::string &result);

    public:
        int onDispatch(taf::JceCurrentPtr _current, vector<char> &_sResponseBuffer);
    };


}



#endif
