// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.4.3 by WSRD Tencent.
// Generated from `Node.jce'
// **********************************************************************

package com.qq.taf;

public abstract class NodePrxCallback extends com.qq.taf.proxy.ServantProxyCallback
{
    protected String __taf__Node_all[] = 
    {
        "addFile",
        "delCache",
        "destroyServer",
        "getLoad",
        "getName",
        "getPatchPercent",
        "getServerPid",
        "getSettingState",
        "getState",
        "loadServer",
        "notifyServer",
        "patch",
        "patchPro",
        "patchSubborn",
        "shutdown",
        "startServer",
        "stopAllServers",
        "stopServer",
        "synState"
    };

    protected String sServerEncoding = "GBK";
    public int setServerEncoding(String se){
        sServerEncoding = se;
        return 0;
    }

    public abstract void callback_addFile(int _ret, String result);

    public abstract void callback_addFile_exception(int _iRet);

    public abstract void callback_delCache(int _ret, String result);

    public abstract void callback_delCache_exception(int _iRet);

    public abstract void callback_destroyServer(int _ret, String result);

    public abstract void callback_destroyServer_exception(int _iRet);

    public abstract void callback_getLoad(com.qq.taf.LoadInfo _ret);

    public abstract void callback_getLoad_exception(int _iRet);

    public abstract void callback_getName(String _ret);

    public abstract void callback_getName_exception(int _iRet);

    public abstract void callback_getPatchPercent(int _ret, com.qq.taf.PatchInfo tPatchInfo);

    public abstract void callback_getPatchPercent_exception(int _iRet);

    public abstract void callback_getServerPid(int _ret, String result);

    public abstract void callback_getServerPid_exception(int _iRet);

    public abstract void callback_getSettingState(int _ret, String result);

    public abstract void callback_getSettingState_exception(int _iRet);

    public abstract void callback_getState(int _ret, String result);

    public abstract void callback_getState_exception(int _iRet);

    public abstract void callback_loadServer(int _ret, String result);

    public abstract void callback_loadServer_exception(int _iRet);

    public abstract void callback_notifyServer(int _ret, String result);

    public abstract void callback_notifyServer_exception(int _iRet);

    public abstract void callback_patch(int _ret, String result);

    public abstract void callback_patch_exception(int _iRet);

    public abstract void callback_patchPro(int _ret, String result);

    public abstract void callback_patchPro_exception(int _iRet);

    public abstract void callback_patchSubborn(int _ret, String result);

    public abstract void callback_patchSubborn_exception(int _iRet);

    public abstract void callback_shutdown(int _ret, String result);

    public abstract void callback_shutdown_exception(int _iRet);

    public abstract void callback_startServer(int _ret, String result);

    public abstract void callback_startServer_exception(int _iRet);

    public abstract void callback_stopAllServers(int _ret, String result);

    public abstract void callback_stopAllServers_exception(int _iRet);

    public abstract void callback_stopServer(int _ret, String result);

    public abstract void callback_stopServer_exception(int _iRet);

    public abstract void callback_synState(int _ret, String result);

    public abstract void callback_synState_exception(int _iRet);

    final public int _onDispatch(String sFuncName, com.qq.taf.ResponsePacket response)
    {

        int iPos = java.util.Arrays.binarySearch(__taf__Node_all, sFuncName);
        if(iPos < 0 || iPos >= 19) return -1; //or throw execption?
        switch(iPos)
        {
            case 0:
            {
                if ( response.iRet != com.qq.taf.cnst.JCESERVERSUCCESS.value )
                {
                    callback_addFile_exception(response.iRet);
                    return response.iRet;
                }
                com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(response.sBuffer);
                _is.setServerEncoding(sServerEncoding);
                int _ret = 0;
                _ret = (int) _is.read(_ret, 0, true);

                String result = "";
                result = (String) _is.read(result, 4, true);

                callback_addFile(_ret, result);
                break;
            }
            case 1:
            {
                if ( response.iRet != com.qq.taf.cnst.JCESERVERSUCCESS.value )
                {
                    callback_delCache_exception(response.iRet);
                    return response.iRet;
                }
                com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(response.sBuffer);
                _is.setServerEncoding(sServerEncoding);
                int _ret = 0;
                _ret = (int) _is.read(_ret, 0, true);

                String result = "";
                result = (String) _is.read(result, 4, true);

                callback_delCache(_ret, result);
                break;
            }
            case 2:
            {
                if ( response.iRet != com.qq.taf.cnst.JCESERVERSUCCESS.value )
                {
                    callback_destroyServer_exception(response.iRet);
                    return response.iRet;
                }
                com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(response.sBuffer);
                _is.setServerEncoding(sServerEncoding);
                int _ret = 0;
                _ret = (int) _is.read(_ret, 0, true);

                String result = "";
                result = (String) _is.read(result, 3, true);

                callback_destroyServer(_ret, result);
                break;
            }
            case 3:
            {
                if ( response.iRet != com.qq.taf.cnst.JCESERVERSUCCESS.value )
                {
                    callback_getLoad_exception(response.iRet);
                    return response.iRet;
                }
                com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(response.sBuffer);
                _is.setServerEncoding(sServerEncoding);
                com.qq.taf.LoadInfo _ret = new com.qq.taf.LoadInfo();
                _ret = (com.qq.taf.LoadInfo) _is.read(_ret, 0, true);

                callback_getLoad(_ret);
                break;
            }
            case 4:
            {
                if ( response.iRet != com.qq.taf.cnst.JCESERVERSUCCESS.value )
                {
                    callback_getName_exception(response.iRet);
                    return response.iRet;
                }
                com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(response.sBuffer);
                _is.setServerEncoding(sServerEncoding);
                String _ret = "";
                _ret = (String) _is.read(_ret, 0, true);

                callback_getName(_ret);
                break;
            }
            case 5:
            {
                if ( response.iRet != com.qq.taf.cnst.JCESERVERSUCCESS.value )
                {
                    callback_getPatchPercent_exception(response.iRet);
                    return response.iRet;
                }
                com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(response.sBuffer);
                _is.setServerEncoding(sServerEncoding);
                int _ret = 0;
                _ret = (int) _is.read(_ret, 0, true);

                com.qq.taf.PatchInfo tPatchInfo = new com.qq.taf.PatchInfo();
                tPatchInfo = (com.qq.taf.PatchInfo) _is.read(tPatchInfo, 3, true);

                callback_getPatchPercent(_ret, tPatchInfo);
                break;
            }
            case 6:
            {
                if ( response.iRet != com.qq.taf.cnst.JCESERVERSUCCESS.value )
                {
                    callback_getServerPid_exception(response.iRet);
                    return response.iRet;
                }
                com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(response.sBuffer);
                _is.setServerEncoding(sServerEncoding);
                int _ret = 0;
                _ret = (int) _is.read(_ret, 0, true);

                String result = "";
                result = (String) _is.read(result, 3, true);

                callback_getServerPid(_ret, result);
                break;
            }
            case 7:
            {
                if ( response.iRet != com.qq.taf.cnst.JCESERVERSUCCESS.value )
                {
                    callback_getSettingState_exception(response.iRet);
                    return response.iRet;
                }
                com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(response.sBuffer);
                _is.setServerEncoding(sServerEncoding);
                int _ret = 0;
                _ret = (int) _is.read(_ret, 0, true);

                String result = "";
                result = (String) _is.read(result, 3, true);

                callback_getSettingState(_ret, result);
                break;
            }
            case 8:
            {
                if ( response.iRet != com.qq.taf.cnst.JCESERVERSUCCESS.value )
                {
                    callback_getState_exception(response.iRet);
                    return response.iRet;
                }
                com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(response.sBuffer);
                _is.setServerEncoding(sServerEncoding);
                int _ret = 0;
                _ret = (int) _is.read(_ret, 0, true);

                String result = "";
                result = (String) _is.read(result, 3, true);

                callback_getState(_ret, result);
                break;
            }
            case 9:
            {
                if ( response.iRet != com.qq.taf.cnst.JCESERVERSUCCESS.value )
                {
                    callback_loadServer_exception(response.iRet);
                    return response.iRet;
                }
                com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(response.sBuffer);
                _is.setServerEncoding(sServerEncoding);
                int _ret = 0;
                _ret = (int) _is.read(_ret, 0, true);

                String result = "";
                result = (String) _is.read(result, 3, true);

                callback_loadServer(_ret, result);
                break;
            }
            case 10:
            {
                if ( response.iRet != com.qq.taf.cnst.JCESERVERSUCCESS.value )
                {
                    callback_notifyServer_exception(response.iRet);
                    return response.iRet;
                }
                com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(response.sBuffer);
                _is.setServerEncoding(sServerEncoding);
                int _ret = 0;
                _ret = (int) _is.read(_ret, 0, true);

                String result = "";
                result = (String) _is.read(result, 4, true);

                callback_notifyServer(_ret, result);
                break;
            }
            case 11:
            {
                if ( response.iRet != com.qq.taf.cnst.JCESERVERSUCCESS.value )
                {
                    callback_patch_exception(response.iRet);
                    return response.iRet;
                }
                com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(response.sBuffer);
                _is.setServerEncoding(sServerEncoding);
                int _ret = 0;
                _ret = (int) _is.read(_ret, 0, true);

                String result = "";
                result = (String) _is.read(result, 5, true);

                callback_patch(_ret, result);
                break;
            }
            case 12:
            {
                if ( response.iRet != com.qq.taf.cnst.JCESERVERSUCCESS.value )
                {
                    callback_patchPro_exception(response.iRet);
                    return response.iRet;
                }
                com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(response.sBuffer);
                _is.setServerEncoding(sServerEncoding);
                int _ret = 0;
                _ret = (int) _is.read(_ret, 0, true);

                String result = "";
                result = (String) _is.read(result, 2, true);

                callback_patchPro(_ret, result);
                break;
            }
            case 13:
            {
                if ( response.iRet != com.qq.taf.cnst.JCESERVERSUCCESS.value )
                {
                    callback_patchSubborn_exception(response.iRet);
                    return response.iRet;
                }
                com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(response.sBuffer);
                _is.setServerEncoding(sServerEncoding);
                int _ret = 0;
                _ret = (int) _is.read(_ret, 0, true);

                String result = "";
                result = (String) _is.read(result, 6, true);

                callback_patchSubborn(_ret, result);
                break;
            }
            case 14:
            {
                if ( response.iRet != com.qq.taf.cnst.JCESERVERSUCCESS.value )
                {
                    callback_shutdown_exception(response.iRet);
                    return response.iRet;
                }
                com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(response.sBuffer);
                _is.setServerEncoding(sServerEncoding);
                int _ret = 0;
                _ret = (int) _is.read(_ret, 0, true);

                String result = "";
                result = (String) _is.read(result, 1, true);

                callback_shutdown(_ret, result);
                break;
            }
            case 15:
            {
                if ( response.iRet != com.qq.taf.cnst.JCESERVERSUCCESS.value )
                {
                    callback_startServer_exception(response.iRet);
                    return response.iRet;
                }
                com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(response.sBuffer);
                _is.setServerEncoding(sServerEncoding);
                int _ret = 0;
                _ret = (int) _is.read(_ret, 0, true);

                String result = "";
                result = (String) _is.read(result, 3, true);

                callback_startServer(_ret, result);
                break;
            }
            case 16:
            {
                if ( response.iRet != com.qq.taf.cnst.JCESERVERSUCCESS.value )
                {
                    callback_stopAllServers_exception(response.iRet);
                    return response.iRet;
                }
                com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(response.sBuffer);
                _is.setServerEncoding(sServerEncoding);
                int _ret = 0;
                _ret = (int) _is.read(_ret, 0, true);

                String result = "";
                result = (String) _is.read(result, 1, true);

                callback_stopAllServers(_ret, result);
                break;
            }
            case 17:
            {
                if ( response.iRet != com.qq.taf.cnst.JCESERVERSUCCESS.value )
                {
                    callback_stopServer_exception(response.iRet);
                    return response.iRet;
                }
                com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(response.sBuffer);
                _is.setServerEncoding(sServerEncoding);
                int _ret = 0;
                _ret = (int) _is.read(_ret, 0, true);

                String result = "";
                result = (String) _is.read(result, 3, true);

                callback_stopServer(_ret, result);
                break;
            }
            case 18:
            {
                if ( response.iRet != com.qq.taf.cnst.JCESERVERSUCCESS.value )
                {
                    callback_synState_exception(response.iRet);
                    return response.iRet;
                }
                com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(response.sBuffer);
                _is.setServerEncoding(sServerEncoding);
                int _ret = 0;
                _ret = (int) _is.read(_ret, 0, true);

                String result = "";
                result = (String) _is.read(result, 3, true);

                callback_synState(_ret, result);
                break;
            }
        }
        return 0;
    }
}
