// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.4.3 by WSRD Tencent.
// Generated from `Node.jce'
// **********************************************************************

package com.qq.taf;

public final class NodePrxHelper extends com.qq.taf.proxy.ServantProxy implements NodePrx
{

    public NodePrxHelper taf_hash(int hashCode)
    {
        super.taf_hash(hashCode);
        return this;
    }

    public java.util.Map __defaultContext()
    {
        java.util.HashMap _ctx = new java.util.HashMap();
        return _ctx;
    }

    protected String sServerEncoding = "GBK";
    public int setServerEncoding(String se){
        sServerEncoding = se;
        return 0;
    }

    public int addFile(String application, String serverName, String file, com.qq.taf.holder.JceStringHolder result)
    {
        return addFile(application, serverName, file, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int addFile(String application, String serverName, String file, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(file, 3);
        if(result.value != null)         _os.write(result.value, 4);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("addFile", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 4, true);
        return _ret;
    }

    public void async_addFile(com.qq.taf.NodePrxCallback callback, String application, String serverName, String file)
    {
        async_addFile(callback, application, serverName, file, __defaultContext());
    }

    public void async_addFile(com.qq.taf.NodePrxCallback callback, String application, String serverName, String file, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(file, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "addFile", _sBuffer, __ctx, _mStatus);

    }

    public int delCache(String sFullCacheName, String sBackupPath, String sKey, com.qq.taf.holder.JceStringHolder result)
    {
        return delCache(sFullCacheName, sBackupPath, sKey, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int delCache(String sFullCacheName, String sBackupPath, String sKey, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(sFullCacheName, 1);
        _os.write(sBackupPath, 2);
        _os.write(sKey, 3);
        if(result.value != null)         _os.write(result.value, 4);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("delCache", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 4, true);
        return _ret;
    }

    public void async_delCache(com.qq.taf.NodePrxCallback callback, String sFullCacheName, String sBackupPath, String sKey)
    {
        async_delCache(callback, sFullCacheName, sBackupPath, sKey, __defaultContext());
    }

    public void async_delCache(com.qq.taf.NodePrxCallback callback, String sFullCacheName, String sBackupPath, String sKey, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(sFullCacheName, 1);
        _os.write(sBackupPath, 2);
        _os.write(sKey, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "delCache", _sBuffer, __ctx, _mStatus);

    }

    public int destroyServer(String application, String serverName, com.qq.taf.holder.JceStringHolder result)
    {
        return destroyServer(application, serverName, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int destroyServer(String application, String serverName, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        if(result.value != null)         _os.write(result.value, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("destroyServer", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 3, true);
        return _ret;
    }

    public void async_destroyServer(com.qq.taf.NodePrxCallback callback, String application, String serverName)
    {
        async_destroyServer(callback, application, serverName, __defaultContext());
    }

    public void async_destroyServer(com.qq.taf.NodePrxCallback callback, String application, String serverName, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "destroyServer", _sBuffer, __ctx, _mStatus);

    }

    public com.qq.taf.LoadInfo getLoad()
    {
        return getLoad(__defaultContext());
    }

    @SuppressWarnings("unchecked")
    public com.qq.taf.LoadInfo getLoad(java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("getLoad", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        com.qq.taf.LoadInfo _ret = new com.qq.taf.LoadInfo();
        _ret = (com.qq.taf.LoadInfo) _is.read(_ret, 0, true);
        return _ret;
    }

    public void async_getLoad(com.qq.taf.NodePrxCallback callback)
    {
        async_getLoad(callback, __defaultContext());
    }

    public void async_getLoad(com.qq.taf.NodePrxCallback callback, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "getLoad", _sBuffer, __ctx, _mStatus);

    }

    public String getName()
    {
        return getName(__defaultContext());
    }

    @SuppressWarnings("unchecked")
    public String getName(java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("getName", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        String _ret = "";
        _ret = (String) _is.read(_ret, 0, true);
        return _ret;
    }

    public void async_getName(com.qq.taf.NodePrxCallback callback)
    {
        async_getName(callback, __defaultContext());
    }

    public void async_getName(com.qq.taf.NodePrxCallback callback, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "getName", _sBuffer, __ctx, _mStatus);

    }

    public int getPatchPercent(String application, String serverName, com.qq.taf.PatchInfoHolder tPatchInfo)
    {
        return getPatchPercent(application, serverName, tPatchInfo, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int getPatchPercent(String application, String serverName, com.qq.taf.PatchInfoHolder tPatchInfo, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        if(tPatchInfo.value != null)         _os.write(tPatchInfo.value, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("getPatchPercent", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        tPatchInfo.value = new com.qq.taf.PatchInfo();
        tPatchInfo.value = (com.qq.taf.PatchInfo) _is.read(tPatchInfo.value, 3, true);
        return _ret;
    }

    public void async_getPatchPercent(com.qq.taf.NodePrxCallback callback, String application, String serverName)
    {
        async_getPatchPercent(callback, application, serverName, __defaultContext());
    }

    public void async_getPatchPercent(com.qq.taf.NodePrxCallback callback, String application, String serverName, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "getPatchPercent", _sBuffer, __ctx, _mStatus);

    }

    public int getServerPid(String application, String serverName, com.qq.taf.holder.JceStringHolder result)
    {
        return getServerPid(application, serverName, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int getServerPid(String application, String serverName, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        if(result.value != null)         _os.write(result.value, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("getServerPid", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 3, true);
        return _ret;
    }

    public void async_getServerPid(com.qq.taf.NodePrxCallback callback, String application, String serverName)
    {
        async_getServerPid(callback, application, serverName, __defaultContext());
    }

    public void async_getServerPid(com.qq.taf.NodePrxCallback callback, String application, String serverName, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "getServerPid", _sBuffer, __ctx, _mStatus);

    }

    public int getSettingState(String application, String serverName, com.qq.taf.holder.JceStringHolder result)
    {
        return getSettingState(application, serverName, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int getSettingState(String application, String serverName, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        if(result.value != null)         _os.write(result.value, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("getSettingState", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 3, true);
        return _ret;
    }

    public void async_getSettingState(com.qq.taf.NodePrxCallback callback, String application, String serverName)
    {
        async_getSettingState(callback, application, serverName, __defaultContext());
    }

    public void async_getSettingState(com.qq.taf.NodePrxCallback callback, String application, String serverName, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "getSettingState", _sBuffer, __ctx, _mStatus);

    }

    public int getState(String application, String serverName, com.qq.taf.holder.JceStringHolder result)
    {
        return getState(application, serverName, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int getState(String application, String serverName, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        if(result.value != null)         _os.write(result.value, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("getState", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 3, true);
        return _ret;
    }

    public void async_getState(com.qq.taf.NodePrxCallback callback, String application, String serverName)
    {
        async_getState(callback, application, serverName, __defaultContext());
    }

    public void async_getState(com.qq.taf.NodePrxCallback callback, String application, String serverName, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "getState", _sBuffer, __ctx, _mStatus);

    }

    public int loadServer(String application, String serverName, com.qq.taf.holder.JceStringHolder result)
    {
        return loadServer(application, serverName, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int loadServer(String application, String serverName, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        if(result.value != null)         _os.write(result.value, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("loadServer", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 3, true);
        return _ret;
    }

    public void async_loadServer(com.qq.taf.NodePrxCallback callback, String application, String serverName)
    {
        async_loadServer(callback, application, serverName, __defaultContext());
    }

    public void async_loadServer(com.qq.taf.NodePrxCallback callback, String application, String serverName, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "loadServer", _sBuffer, __ctx, _mStatus);

    }

    public int notifyServer(String application, String serverName, String command, com.qq.taf.holder.JceStringHolder result)
    {
        return notifyServer(application, serverName, command, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int notifyServer(String application, String serverName, String command, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(command, 3);
        if(result.value != null)         _os.write(result.value, 4);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("notifyServer", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 4, true);
        return _ret;
    }

    public void async_notifyServer(com.qq.taf.NodePrxCallback callback, String application, String serverName, String command)
    {
        async_notifyServer(callback, application, serverName, command, __defaultContext());
    }

    public void async_notifyServer(com.qq.taf.NodePrxCallback callback, String application, String serverName, String command, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(command, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "notifyServer", _sBuffer, __ctx, _mStatus);

    }

    public int patch(String application, String serverName, boolean shutDown, String patchServer, com.qq.taf.holder.JceStringHolder result)
    {
        return patch(application, serverName, shutDown, patchServer, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int patch(String application, String serverName, boolean shutDown, String patchServer, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(shutDown, 3);
        _os.write(patchServer, 4);
        if(result.value != null)         _os.write(result.value, 5);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("patch", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 5, true);
        return _ret;
    }

    public void async_patch(com.qq.taf.NodePrxCallback callback, String application, String serverName, boolean shutDown, String patchServer)
    {
        async_patch(callback, application, serverName, shutDown, patchServer, __defaultContext());
    }

    public void async_patch(com.qq.taf.NodePrxCallback callback, String application, String serverName, boolean shutDown, String patchServer, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(shutDown, 3);
        _os.write(patchServer, 4);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "patch", _sBuffer, __ctx, _mStatus);

    }

    public int patchPro(com.qq.taf.PatchRequest req, com.qq.taf.holder.JceStringHolder result)
    {
        return patchPro(req, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int patchPro(com.qq.taf.PatchRequest req, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(req, 1);
        if(result.value != null)         _os.write(result.value, 2);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("patchPro", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 2, true);
        return _ret;
    }

    public void async_patchPro(com.qq.taf.NodePrxCallback callback, com.qq.taf.PatchRequest req)
    {
        async_patchPro(callback, req, __defaultContext());
    }

    public void async_patchPro(com.qq.taf.NodePrxCallback callback, com.qq.taf.PatchRequest req, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(req, 1);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "patchPro", _sBuffer, __ctx, _mStatus);

    }

    public int patchSubborn(String patchServer, String application, String serverName, String srcFile, String dstFile, com.qq.taf.holder.JceStringHolder result)
    {
        return patchSubborn(patchServer, application, serverName, srcFile, dstFile, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int patchSubborn(String patchServer, String application, String serverName, String srcFile, String dstFile, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(patchServer, 1);
        _os.write(application, 2);
        _os.write(serverName, 3);
        _os.write(srcFile, 4);
        _os.write(dstFile, 5);
        if(result.value != null)         _os.write(result.value, 6);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("patchSubborn", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 6, true);
        return _ret;
    }

    public void async_patchSubborn(com.qq.taf.NodePrxCallback callback, String patchServer, String application, String serverName, String srcFile, String dstFile)
    {
        async_patchSubborn(callback, patchServer, application, serverName, srcFile, dstFile, __defaultContext());
    }

    public void async_patchSubborn(com.qq.taf.NodePrxCallback callback, String patchServer, String application, String serverName, String srcFile, String dstFile, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(patchServer, 1);
        _os.write(application, 2);
        _os.write(serverName, 3);
        _os.write(srcFile, 4);
        _os.write(dstFile, 5);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "patchSubborn", _sBuffer, __ctx, _mStatus);

    }

    public int shutdown(com.qq.taf.holder.JceStringHolder result)
    {
        return shutdown(result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int shutdown(com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        if(result.value != null)         _os.write(result.value, 1);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("shutdown", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 1, true);
        return _ret;
    }

    public void async_shutdown(com.qq.taf.NodePrxCallback callback)
    {
        async_shutdown(callback, __defaultContext());
    }

    public void async_shutdown(com.qq.taf.NodePrxCallback callback, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "shutdown", _sBuffer, __ctx, _mStatus);

    }

    public int startServer(String application, String serverName, com.qq.taf.holder.JceStringHolder result)
    {
        return startServer(application, serverName, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int startServer(String application, String serverName, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        if(result.value != null)         _os.write(result.value, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("startServer", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 3, true);
        return _ret;
    }

    public void async_startServer(com.qq.taf.NodePrxCallback callback, String application, String serverName)
    {
        async_startServer(callback, application, serverName, __defaultContext());
    }

    public void async_startServer(com.qq.taf.NodePrxCallback callback, String application, String serverName, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "startServer", _sBuffer, __ctx, _mStatus);

    }

    public int stopAllServers(com.qq.taf.holder.JceStringHolder result)
    {
        return stopAllServers(result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int stopAllServers(com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        if(result.value != null)         _os.write(result.value, 1);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("stopAllServers", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 1, true);
        return _ret;
    }

    public void async_stopAllServers(com.qq.taf.NodePrxCallback callback)
    {
        async_stopAllServers(callback, __defaultContext());
    }

    public void async_stopAllServers(com.qq.taf.NodePrxCallback callback, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "stopAllServers", _sBuffer, __ctx, _mStatus);

    }

    public int stopServer(String application, String serverName, com.qq.taf.holder.JceStringHolder result)
    {
        return stopServer(application, serverName, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int stopServer(String application, String serverName, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        if(result.value != null)         _os.write(result.value, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("stopServer", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 3, true);
        return _ret;
    }

    public void async_stopServer(com.qq.taf.NodePrxCallback callback, String application, String serverName)
    {
        async_stopServer(callback, application, serverName, __defaultContext());
    }

    public void async_stopServer(com.qq.taf.NodePrxCallback callback, String application, String serverName, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "stopServer", _sBuffer, __ctx, _mStatus);

    }

    public int synState(String application, String serverName, com.qq.taf.holder.JceStringHolder result)
    {
        return synState(application, serverName, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int synState(String application, String serverName, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        if(result.value != null)         _os.write(result.value, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("synState", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 3, true);
        return _ret;
    }

    public void async_synState(com.qq.taf.NodePrxCallback callback, String application, String serverName)
    {
        async_synState(callback, application, serverName, __defaultContext());
    }

    public void async_synState(com.qq.taf.NodePrxCallback callback, String application, String serverName, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "synState", _sBuffer, __ctx, _mStatus);

    }

}
