// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.4.3 by WSRD Tencent.
// Generated from `NodeDescriptor.jce'
// **********************************************************************

package com.qq.taf;

public final class ServerStateInfo extends com.qq.taf.jce.JceStruct implements java.lang.Cloneable
{
    public String className()
    {
        return "taf.ServerStateInfo";
    }

    public String fullClassName()
    {
        return "com.qq.taf.ServerStateInfo";
    }

    public int serverState = 0;

    public int processId = 0;

    public String nodeName = "";

    public String application = "";

    public String serverName = "";

    public int getServerState()
    {
        return serverState;
    }

    public void  setServerState(int serverState)
    {
        this.serverState = serverState;
    }

    public int getProcessId()
    {
        return processId;
    }

    public void  setProcessId(int processId)
    {
        this.processId = processId;
    }

    public String getNodeName()
    {
        return nodeName;
    }

    public void  setNodeName(String nodeName)
    {
        this.nodeName = nodeName;
    }

    public String getApplication()
    {
        return application;
    }

    public void  setApplication(String application)
    {
        this.application = application;
    }

    public String getServerName()
    {
        return serverName;
    }

    public void  setServerName(String serverName)
    {
        this.serverName = serverName;
    }

    public ServerStateInfo()
    {
        setServerState(serverState);
        setProcessId(processId);
        setNodeName(nodeName);
        setApplication(application);
        setServerName(serverName);
    }

    public ServerStateInfo(int serverState, int processId, String nodeName, String application, String serverName)
    {
        setServerState(serverState);
        setProcessId(processId);
        setNodeName(nodeName);
        setApplication(application);
        setServerName(serverName);
    }

    public boolean equals(Object o)
    {
        if(o == null)
        {
            return false;
        }

        ServerStateInfo t = (ServerStateInfo) o;
        return (
            com.qq.taf.jce.JceUtil.equals(serverState, t.serverState) && 
            com.qq.taf.jce.JceUtil.equals(processId, t.processId) && 
            com.qq.taf.jce.JceUtil.equals(nodeName, t.nodeName) && 
            com.qq.taf.jce.JceUtil.equals(application, t.application) && 
            com.qq.taf.jce.JceUtil.equals(serverName, t.serverName) );
    }

    public int hashCode()
    {
        try
        {
            throw new Exception("Need define key first!");
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        return 0;
    }
    public java.lang.Object clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void writeTo(com.qq.taf.jce.JceOutputStream _os)
    {
        _os.write(serverState, 0);
        _os.write(processId, 1);
        if (null != nodeName)
        {
            _os.write(nodeName, 2);
        }
        if (null != application)
        {
            _os.write(application, 3);
        }
        if (null != serverName)
        {
            _os.write(serverName, 4);
        }
    }

    static int cache_serverState;

    public void readFrom(com.qq.taf.jce.JceInputStream _is)
    {
        setServerState((int) _is.read(serverState, 0, true));

        setProcessId((int) _is.read(processId, 1, true));

        setNodeName( _is.readString(2, false));

        setApplication( _is.readString(3, false));

        setServerName( _is.readString(4, false));

    }

    public void display(java.lang.StringBuilder _os, int _level)
    {
        com.qq.taf.jce.JceDisplayer _ds = new com.qq.taf.jce.JceDisplayer(_os, _level);
        _ds.display(serverState, "serverState");
        _ds.display(processId, "processId");
        _ds.display(nodeName, "nodeName");
        _ds.display(application, "application");
        _ds.display(serverName, "serverName");
    }

}

