// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.4.3 by WSRD Tencent.
// Generated from `AdminReg.jce'
// **********************************************************************

package com.qq.taf;

public final class AdminRegPrxHelper extends com.qq.taf.proxy.ServantProxy implements AdminRegPrx
{

    public AdminRegPrxHelper taf_hash(int hashCode)
    {
        super.taf_hash(hashCode);
        return this;
    }

    public java.util.Map __defaultContext()
    {
        java.util.HashMap _ctx = new java.util.HashMap();
        return _ctx;
    }

    protected String sServerEncoding = "GBK";
    public int setServerEncoding(String se){
        sServerEncoding = se;
        return 0;
    }

    public int batchPatch(com.qq.taf.PatchRequest req, com.qq.taf.holder.JceStringHolder result)
    {
        return batchPatch(req, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int batchPatch(com.qq.taf.PatchRequest req, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(req, 1);
        if(result.value != null)         _os.write(result.value, 2);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("batchPatch", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 2, true);
        return _ret;
    }

    public void async_batchPatch(com.qq.taf.AdminRegPrxCallback callback, com.qq.taf.PatchRequest req)
    {
        async_batchPatch(callback, req, __defaultContext());
    }

    public void async_batchPatch(com.qq.taf.AdminRegPrxCallback callback, com.qq.taf.PatchRequest req, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(req, 1);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "batchPatch", _sBuffer, __ctx, _mStatus);

    }

    public java.util.ArrayList<String> getAllApplicationNames(com.qq.taf.holder.JceStringHolder result)
    {
        return getAllApplicationNames(result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public java.util.ArrayList<String> getAllApplicationNames(com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        if(result.value != null)         _os.write(result.value, 1);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("getAllApplicationNames", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        java.util.ArrayList<String> _ret = new java.util.ArrayList<String>();
        String __var_1 = "";
        ((java.util.ArrayList<String>)_ret).add(__var_1);
        _ret = (java.util.ArrayList<String>) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 1, true);
        return _ret;
    }

    public void async_getAllApplicationNames(com.qq.taf.AdminRegPrxCallback callback)
    {
        async_getAllApplicationNames(callback, __defaultContext());
    }

    public void async_getAllApplicationNames(com.qq.taf.AdminRegPrxCallback callback, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "getAllApplicationNames", _sBuffer, __ctx, _mStatus);

    }

    public java.util.ArrayList<String> getAllNodeNames(com.qq.taf.holder.JceStringHolder result)
    {
        return getAllNodeNames(result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public java.util.ArrayList<String> getAllNodeNames(com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        if(result.value != null)         _os.write(result.value, 1);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("getAllNodeNames", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        java.util.ArrayList<String> _ret = new java.util.ArrayList<String>();
        String __var_2 = "";
        ((java.util.ArrayList<String>)_ret).add(__var_2);
        _ret = (java.util.ArrayList<String>) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 1, true);
        return _ret;
    }

    public void async_getAllNodeNames(com.qq.taf.AdminRegPrxCallback callback)
    {
        async_getAllNodeNames(callback, __defaultContext());
    }

    public void async_getAllNodeNames(com.qq.taf.AdminRegPrxCallback callback, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "getAllNodeNames", _sBuffer, __ctx, _mStatus);

    }

    public java.util.ArrayList<java.util.ArrayList<String>> getAllServerIds(com.qq.taf.holder.JceStringHolder result)
    {
        return getAllServerIds(result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public java.util.ArrayList<java.util.ArrayList<String>> getAllServerIds(com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        if(result.value != null)         _os.write(result.value, 1);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("getAllServerIds", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        java.util.ArrayList<java.util.ArrayList<String>> _ret = new java.util.ArrayList<java.util.ArrayList<String>>();
        java.util.ArrayList<String> __var_3 = new java.util.ArrayList<String>();
        String __var_4 = "";
        ((java.util.ArrayList<String>)__var_3).add(__var_4);
        ((java.util.ArrayList<java.util.ArrayList<String>>)_ret).add(__var_3);
        _ret = (java.util.ArrayList<java.util.ArrayList<String>>) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 1, true);
        return _ret;
    }

    public void async_getAllServerIds(com.qq.taf.AdminRegPrxCallback callback)
    {
        async_getAllServerIds(callback, __defaultContext());
    }

    public void async_getAllServerIds(com.qq.taf.AdminRegPrxCallback callback, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "getAllServerIds", _sBuffer, __ctx, _mStatus);

    }

    public int getGroupId(String ip, com.qq.taf.holder.JceIntHolder groupId, com.qq.taf.holder.JceStringHolder result)
    {
        return getGroupId(ip, groupId, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int getGroupId(String ip, com.qq.taf.holder.JceIntHolder groupId, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(ip, 1);
        _os.write(groupId.value, 2);
        if(result.value != null)         _os.write(result.value, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("getGroupId", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        groupId.value = 0;
        groupId.value = (int) _is.read(groupId.value, 2, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 3, true);
        return _ret;
    }

    public void async_getGroupId(com.qq.taf.AdminRegPrxCallback callback, String ip)
    {
        async_getGroupId(callback, ip, __defaultContext());
    }

    public void async_getGroupId(com.qq.taf.AdminRegPrxCallback callback, String ip, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(ip, 1);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "getGroupId", _sBuffer, __ctx, _mStatus);

    }

    public int getNodeVesion(String name, com.qq.taf.holder.JceStringHolder version, com.qq.taf.holder.JceStringHolder result)
    {
        return getNodeVesion(name, version, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int getNodeVesion(String name, com.qq.taf.holder.JceStringHolder version, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(name, 1);
        if(version.value != null)         _os.write(version.value, 2);
        if(result.value != null)         _os.write(result.value, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("getNodeVesion", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        version.value = "";
        version.value = (String) _is.read(version.value, 2, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 3, true);
        return _ret;
    }

    public void async_getNodeVesion(com.qq.taf.AdminRegPrxCallback callback, String name)
    {
        async_getNodeVesion(callback, name, __defaultContext());
    }

    public void async_getNodeVesion(com.qq.taf.AdminRegPrxCallback callback, String name, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(name, 1);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "getNodeVesion", _sBuffer, __ctx, _mStatus);

    }

    public int getPatchPercent(String application, String serverName, String nodeName, com.qq.taf.PatchInfoHolder tPatchInfo)
    {
        return getPatchPercent(application, serverName, nodeName, tPatchInfo, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int getPatchPercent(String application, String serverName, String nodeName, com.qq.taf.PatchInfoHolder tPatchInfo, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        if(tPatchInfo.value != null)         _os.write(tPatchInfo.value, 4);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("getPatchPercent", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        tPatchInfo.value = new com.qq.taf.PatchInfo();
        tPatchInfo.value = (com.qq.taf.PatchInfo) _is.read(tPatchInfo.value, 4, true);
        return _ret;
    }

    public void async_getPatchPercent(com.qq.taf.AdminRegPrxCallback callback, String application, String serverName, String nodeName)
    {
        async_getPatchPercent(callback, application, serverName, nodeName, __defaultContext());
    }

    public void async_getPatchPercent(com.qq.taf.AdminRegPrxCallback callback, String application, String serverName, String nodeName, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "getPatchPercent", _sBuffer, __ctx, _mStatus);

    }

    public int getProfileTemplate(String profileName, com.qq.taf.holder.JceStringHolder profileTemplate, com.qq.taf.holder.JceStringHolder resultDesc)
    {
        return getProfileTemplate(profileName, profileTemplate, resultDesc, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int getProfileTemplate(String profileName, com.qq.taf.holder.JceStringHolder profileTemplate, com.qq.taf.holder.JceStringHolder resultDesc, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(profileName, 1);
        if(profileTemplate.value != null)         _os.write(profileTemplate.value, 2);
        if(resultDesc.value != null)         _os.write(resultDesc.value, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("getProfileTemplate", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        profileTemplate.value = "";
        profileTemplate.value = (String) _is.read(profileTemplate.value, 2, true);
        resultDesc.value = "";
        resultDesc.value = (String) _is.read(resultDesc.value, 3, true);
        return _ret;
    }

    public void async_getProfileTemplate(com.qq.taf.AdminRegPrxCallback callback, String profileName)
    {
        async_getProfileTemplate(callback, profileName, __defaultContext());
    }

    public void async_getProfileTemplate(com.qq.taf.AdminRegPrxCallback callback, String profileName, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(profileName, 1);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "getProfileTemplate", _sBuffer, __ctx, _mStatus);

    }

    public int getServerProfileTemplate(String application, String serverName, String nodeName, com.qq.taf.holder.JceStringHolder profileTemplate, com.qq.taf.holder.JceStringHolder resultDesc)
    {
        return getServerProfileTemplate(application, serverName, nodeName, profileTemplate, resultDesc, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int getServerProfileTemplate(String application, String serverName, String nodeName, com.qq.taf.holder.JceStringHolder profileTemplate, com.qq.taf.holder.JceStringHolder resultDesc, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        if(profileTemplate.value != null)         _os.write(profileTemplate.value, 4);
        if(resultDesc.value != null)         _os.write(resultDesc.value, 5);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("getServerProfileTemplate", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        profileTemplate.value = "";
        profileTemplate.value = (String) _is.read(profileTemplate.value, 4, true);
        resultDesc.value = "";
        resultDesc.value = (String) _is.read(resultDesc.value, 5, true);
        return _ret;
    }

    public void async_getServerProfileTemplate(com.qq.taf.AdminRegPrxCallback callback, String application, String serverName, String nodeName)
    {
        async_getServerProfileTemplate(callback, application, serverName, nodeName, __defaultContext());
    }

    public void async_getServerProfileTemplate(com.qq.taf.AdminRegPrxCallback callback, String application, String serverName, String nodeName, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "getServerProfileTemplate", _sBuffer, __ctx, _mStatus);

    }

    public int getServerState(String application, String serverName, String nodeName, com.qq.taf.ServerStateDescHolder state, com.qq.taf.holder.JceStringHolder result)
    {
        return getServerState(application, serverName, nodeName, state, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int getServerState(String application, String serverName, String nodeName, com.qq.taf.ServerStateDescHolder state, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        if(state.value != null)         _os.write(state.value, 4);
        if(result.value != null)         _os.write(result.value, 5);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("getServerState", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        state.value = new com.qq.taf.ServerStateDesc();
        state.value = (com.qq.taf.ServerStateDesc) _is.read(state.value, 4, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 5, true);
        return _ret;
    }

    public void async_getServerState(com.qq.taf.AdminRegPrxCallback callback, String application, String serverName, String nodeName)
    {
        async_getServerState(callback, application, serverName, nodeName, __defaultContext());
    }

    public void async_getServerState(com.qq.taf.AdminRegPrxCallback callback, String application, String serverName, String nodeName, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "getServerState", _sBuffer, __ctx, _mStatus);

    }

    public int loadServer(String application, String serverName, String nodeName, com.qq.taf.holder.JceStringHolder result)
    {
        return loadServer(application, serverName, nodeName, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int loadServer(String application, String serverName, String nodeName, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        if(result.value != null)         _os.write(result.value, 4);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("loadServer", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 4, true);
        return _ret;
    }

    public void async_loadServer(com.qq.taf.AdminRegPrxCallback callback, String application, String serverName, String nodeName)
    {
        async_loadServer(callback, application, serverName, nodeName, __defaultContext());
    }

    public void async_loadServer(com.qq.taf.AdminRegPrxCallback callback, String application, String serverName, String nodeName, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "loadServer", _sBuffer, __ctx, _mStatus);

    }

    public int notifyServer(String application, String serverName, String nodeName, String command, com.qq.taf.holder.JceStringHolder result)
    {
        return notifyServer(application, serverName, nodeName, command, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int notifyServer(String application, String serverName, String nodeName, String command, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        _os.write(command, 4);
        if(result.value != null)         _os.write(result.value, 5);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("notifyServer", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 5, true);
        return _ret;
    }

    public void async_notifyServer(com.qq.taf.AdminRegPrxCallback callback, String application, String serverName, String nodeName, String command)
    {
        async_notifyServer(callback, application, serverName, nodeName, command, __defaultContext());
    }

    public void async_notifyServer(com.qq.taf.AdminRegPrxCallback callback, String application, String serverName, String nodeName, String command, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        _os.write(command, 4);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "notifyServer", _sBuffer, __ctx, _mStatus);

    }

    public int patchServer(String application, String serverName, String nodeName, boolean shutdown, String version, String user, com.qq.taf.holder.JceStringHolder result)
    {
        return patchServer(application, serverName, nodeName, shutdown, version, user, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int patchServer(String application, String serverName, String nodeName, boolean shutdown, String version, String user, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        _os.write(shutdown, 4);
        _os.write(version, 5);
        _os.write(user, 6);
        if(result.value != null)         _os.write(result.value, 7);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("patchServer", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 7, true);
        return _ret;
    }

    public void async_patchServer(com.qq.taf.AdminRegPrxCallback callback, String application, String serverName, String nodeName, boolean shutdown, String version, String user)
    {
        async_patchServer(callback, application, serverName, nodeName, shutdown, version, user, __defaultContext());
    }

    public void async_patchServer(com.qq.taf.AdminRegPrxCallback callback, String application, String serverName, String nodeName, boolean shutdown, String version, String user, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        _os.write(shutdown, 4);
        _os.write(version, 5);
        _os.write(user, 6);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "patchServer", _sBuffer, __ctx, _mStatus);

    }

    public int patchSubborn(String application, String serverName, String nodeName, String sSrcFile, String sDstFile, com.qq.taf.holder.JceStringHolder result)
    {
        return patchSubborn(application, serverName, nodeName, sSrcFile, sDstFile, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int patchSubborn(String application, String serverName, String nodeName, String sSrcFile, String sDstFile, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        _os.write(sSrcFile, 4);
        _os.write(sDstFile, 5);
        if(result.value != null)         _os.write(result.value, 6);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("patchSubborn", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 6, true);
        return _ret;
    }

    public void async_patchSubborn(com.qq.taf.AdminRegPrxCallback callback, String application, String serverName, String nodeName, String sSrcFile, String sDstFile)
    {
        async_patchSubborn(callback, application, serverName, nodeName, sSrcFile, sDstFile, __defaultContext());
    }

    public void async_patchSubborn(com.qq.taf.AdminRegPrxCallback callback, String application, String serverName, String nodeName, String sSrcFile, String sDstFile, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        _os.write(sSrcFile, 4);
        _os.write(sDstFile, 5);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "patchSubborn", _sBuffer, __ctx, _mStatus);

    }

    public boolean pingNode(String name, com.qq.taf.holder.JceStringHolder result)
    {
        return pingNode(name, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public boolean pingNode(String name, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(name, 1);
        if(result.value != null)         _os.write(result.value, 2);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("pingNode", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        boolean _ret = false;
        _ret = (boolean) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 2, true);
        return _ret;
    }

    public void async_pingNode(com.qq.taf.AdminRegPrxCallback callback, String name)
    {
        async_pingNode(callback, name, __defaultContext());
    }

    public void async_pingNode(com.qq.taf.AdminRegPrxCallback callback, String name, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(name, 1);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "pingNode", _sBuffer, __ctx, _mStatus);

    }

    public int restartServer(String application, String serverName, String nodeName, com.qq.taf.holder.JceStringHolder result)
    {
        return restartServer(application, serverName, nodeName, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int restartServer(String application, String serverName, String nodeName, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        if(result.value != null)         _os.write(result.value, 4);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("restartServer", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 4, true);
        return _ret;
    }

    public void async_restartServer(com.qq.taf.AdminRegPrxCallback callback, String application, String serverName, String nodeName)
    {
        async_restartServer(callback, application, serverName, nodeName, __defaultContext());
    }

    public void async_restartServer(com.qq.taf.AdminRegPrxCallback callback, String application, String serverName, String nodeName, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "restartServer", _sBuffer, __ctx, _mStatus);

    }

    public int shutdownNode(String name, com.qq.taf.holder.JceStringHolder result)
    {
        return shutdownNode(name, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int shutdownNode(String name, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(name, 1);
        if(result.value != null)         _os.write(result.value, 2);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("shutdownNode", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 2, true);
        return _ret;
    }

    public void async_shutdownNode(com.qq.taf.AdminRegPrxCallback callback, String name)
    {
        async_shutdownNode(callback, name, __defaultContext());
    }

    public void async_shutdownNode(com.qq.taf.AdminRegPrxCallback callback, String name, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(name, 1);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "shutdownNode", _sBuffer, __ctx, _mStatus);

    }

    public int startServer(String application, String serverName, String nodeName, com.qq.taf.holder.JceStringHolder result)
    {
        return startServer(application, serverName, nodeName, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int startServer(String application, String serverName, String nodeName, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        if(result.value != null)         _os.write(result.value, 4);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("startServer", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 4, true);
        return _ret;
    }

    public void async_startServer(com.qq.taf.AdminRegPrxCallback callback, String application, String serverName, String nodeName)
    {
        async_startServer(callback, application, serverName, nodeName, __defaultContext());
    }

    public void async_startServer(com.qq.taf.AdminRegPrxCallback callback, String application, String serverName, String nodeName, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "startServer", _sBuffer, __ctx, _mStatus);

    }

    public int stopServer(String application, String serverName, String nodeName, com.qq.taf.holder.JceStringHolder result)
    {
        return stopServer(application, serverName, nodeName, result, __defaultContext());
    }

    @SuppressWarnings("unchecked")
    public int stopServer(String application, String serverName, String nodeName, com.qq.taf.holder.JceStringHolder result, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        if(result.value != null)         _os.write(result.value, 4);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        byte[] _returnSBuffer = taf_invoke("stopServer", _sBuffer, __ctx, _mStatus);

        com.qq.taf.jce.JceInputStream _is = new com.qq.taf.jce.JceInputStream(_returnSBuffer);
        _is.setServerEncoding(sServerEncoding);
        int _ret = 0;
        _ret = (int) _is.read(_ret, 0, true);
        result.value = "";
        result.value = (String) _is.read(result.value, 4, true);
        return _ret;
    }

    public void async_stopServer(com.qq.taf.AdminRegPrxCallback callback, String application, String serverName, String nodeName)
    {
        async_stopServer(callback, application, serverName, nodeName, __defaultContext());
    }

    public void async_stopServer(com.qq.taf.AdminRegPrxCallback callback, String application, String serverName, String nodeName, java.util.Map __ctx)
    {
        com.qq.taf.jce.JceOutputStream _os = new com.qq.taf.jce.JceOutputStream(0);
        _os.setServerEncoding(sServerEncoding);
        _os.write(application, 1);
        _os.write(serverName, 2);
        _os.write(nodeName, 3);
        byte[] _sBuffer = com.qq.taf.jce.JceUtil.getJceBufArray(_os.getByteBuffer());

        java.util.HashMap<String, String> _mStatus = new java.util.HashMap<String, String>();

        taf_invokeAsync(callback, "stopServer", _sBuffer, __ctx, _mStatus);

    }

}
