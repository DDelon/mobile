// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.4.3 by WSRD Tencent.
// Generated from `AdminReg.jce'
// **********************************************************************

package com.qq.taf;

public final class ServerStateDesc extends com.qq.taf.jce.JceStruct implements java.lang.Cloneable
{
    public String className()
    {
        return "taf.ServerStateDesc";
    }

    public String fullClassName()
    {
        return "com.qq.taf.ServerStateDesc";
    }

    public String settingStateInReg = "";

    public String presentStateInReg = "";

    public String presentStateInNode = "";

    public int processId = 0;

    public String patchVersion = "";

    public String patchTime = "";

    public String patchUser = "";

    public String getSettingStateInReg()
    {
        return settingStateInReg;
    }

    public void  setSettingStateInReg(String settingStateInReg)
    {
        this.settingStateInReg = settingStateInReg;
    }

    public String getPresentStateInReg()
    {
        return presentStateInReg;
    }

    public void  setPresentStateInReg(String presentStateInReg)
    {
        this.presentStateInReg = presentStateInReg;
    }

    public String getPresentStateInNode()
    {
        return presentStateInNode;
    }

    public void  setPresentStateInNode(String presentStateInNode)
    {
        this.presentStateInNode = presentStateInNode;
    }

    public int getProcessId()
    {
        return processId;
    }

    public void  setProcessId(int processId)
    {
        this.processId = processId;
    }

    public String getPatchVersion()
    {
        return patchVersion;
    }

    public void  setPatchVersion(String patchVersion)
    {
        this.patchVersion = patchVersion;
    }

    public String getPatchTime()
    {
        return patchTime;
    }

    public void  setPatchTime(String patchTime)
    {
        this.patchTime = patchTime;
    }

    public String getPatchUser()
    {
        return patchUser;
    }

    public void  setPatchUser(String patchUser)
    {
        this.patchUser = patchUser;
    }

    public ServerStateDesc()
    {
        setSettingStateInReg(settingStateInReg);
        setPresentStateInReg(presentStateInReg);
        setPresentStateInNode(presentStateInNode);
        setProcessId(processId);
        setPatchVersion(patchVersion);
        setPatchTime(patchTime);
        setPatchUser(patchUser);
    }

    public ServerStateDesc(String settingStateInReg, String presentStateInReg, String presentStateInNode, int processId, String patchVersion, String patchTime, String patchUser)
    {
        setSettingStateInReg(settingStateInReg);
        setPresentStateInReg(presentStateInReg);
        setPresentStateInNode(presentStateInNode);
        setProcessId(processId);
        setPatchVersion(patchVersion);
        setPatchTime(patchTime);
        setPatchUser(patchUser);
    }

    public boolean equals(Object o)
    {
        if(o == null)
        {
            return false;
        }

        ServerStateDesc t = (ServerStateDesc) o;
        return (
            com.qq.taf.jce.JceUtil.equals(settingStateInReg, t.settingStateInReg) && 
            com.qq.taf.jce.JceUtil.equals(presentStateInReg, t.presentStateInReg) && 
            com.qq.taf.jce.JceUtil.equals(presentStateInNode, t.presentStateInNode) && 
            com.qq.taf.jce.JceUtil.equals(processId, t.processId) && 
            com.qq.taf.jce.JceUtil.equals(patchVersion, t.patchVersion) && 
            com.qq.taf.jce.JceUtil.equals(patchTime, t.patchTime) && 
            com.qq.taf.jce.JceUtil.equals(patchUser, t.patchUser) );
    }

    public int hashCode()
    {
        try
        {
            throw new Exception("Need define key first!");
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        return 0;
    }
    public java.lang.Object clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void writeTo(com.qq.taf.jce.JceOutputStream _os)
    {
        _os.write(settingStateInReg, 0);
        _os.write(presentStateInReg, 1);
        _os.write(presentStateInNode, 2);
        _os.write(processId, 3);
        _os.write(patchVersion, 4);
        _os.write(patchTime, 5);
        _os.write(patchUser, 6);
    }


    public void readFrom(com.qq.taf.jce.JceInputStream _is)
    {
        setSettingStateInReg( _is.readString(0, true));

        setPresentStateInReg( _is.readString(1, true));

        setPresentStateInNode( _is.readString(2, true));

        setProcessId((int) _is.read(processId, 3, true));

        setPatchVersion( _is.readString(4, true));

        setPatchTime( _is.readString(5, true));

        setPatchUser( _is.readString(6, true));

    }

    public void display(java.lang.StringBuilder _os, int _level)
    {
        com.qq.taf.jce.JceDisplayer _ds = new com.qq.taf.jce.JceDisplayer(_os, _level);
        _ds.display(settingStateInReg, "settingStateInReg");
        _ds.display(presentStateInReg, "presentStateInReg");
        _ds.display(presentStateInNode, "presentStateInNode");
        _ds.display(processId, "processId");
        _ds.display(patchVersion, "patchVersion");
        _ds.display(patchTime, "patchTime");
        _ds.display(patchUser, "patchUser");
    }

}

